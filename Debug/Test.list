
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bb4  08009000  08009000  00019000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bb4  08009bb4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009bb4  08009bb4  00019bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bbc  08009bbc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bbc  08009bbc  00019bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bc0  08009bc0  00019bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  200001e4  08009da8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007f0  08009da8  000207f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017d3d  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cf5  00000000  00000000  00037f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  0003ac48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000240f4  00000000  00000000  0003c100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00016c9e  00000000  00000000  000601f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000dde0e  00000000  00000000  00076e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00154ca0  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001388  00000000  00000000  00154cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a94  00000000  00000000  00156080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008fe4 	.word	0x08008fe4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08008fe4 	.word	0x08008fe4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
  //char *buffer;

  float volt;
  float amp;
  float power;
  float resistance=0.01;
 8000f46:	4b76      	ldr	r3, [pc, #472]	; (8001120 <main+0x1e0>)
 8000f48:	61fb      	str	r3, [r7, #28]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4a:	f000 ffa2 	bl	8001e92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4e:	f000 f8f7 	bl	8001140 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f52:	f000 fac9 	bl	80014e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f56:	f000 faa9 	bl	80014ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f5a:	f000 fa77 	bl	800144c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f5e:	f000 f9e7 	bl	8001330 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000f62:	f000 f96f 	bl	8001244 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000f66:	f000 fa23 	bl	80013b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //CAN_Config();
  HAL_Delay(2000);
 8000f6a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f6e:	f001 f805 	bl	8001f7c <HAL_Delay>
  HAL_TIM_Base_Start(&htim2);
 8000f72:	486c      	ldr	r0, [pc, #432]	; (8001124 <main+0x1e4>)
 8000f74:	f004 fb20 	bl	80055b8 <HAL_TIM_Base_Start>
  /* Ecran */
  ssd1306_Init();
 8000f78:	f000 fb22 	bl	80015c0 <ssd1306_Init>
  ssd1306_Fill(Black); // White pour mettre un fond blanc
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f000 fb8b 	bl	8001698 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8000f82:	f000 fbad 	bl	80016e0 <ssd1306_UpdateScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000f86:	2120      	movs	r1, #32
 8000f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8c:	f002 fd2e 	bl	80039ec <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 8000f90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f94:	f000 fff2 	bl	8001f7c <HAL_Delay>
    // Traitement des données
    // Test: Set GPIO pin high
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa2:	f002 fd0b 	bl	80039bc <HAL_GPIO_WritePin>

    // Get ADC value

    HAL_ADC_Start_DMA(&hadc1, tab, 2);
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	2202      	movs	r2, #2
 8000faa:	4619      	mov	r1, r3
 8000fac:	485e      	ldr	r0, [pc, #376]	; (8001128 <main+0x1e8>)
 8000fae:	f001 fb19 	bl	80025e4 <HAL_ADC_Start_DMA>
    volt=tab[0]*(3.3/4095);
 8000fb2:	883b      	ldrh	r3, [r7, #0]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fab5 	bl	8000524 <__aeabi_i2d>
 8000fba:	a357      	add	r3, pc, #348	; (adr r3, 8001118 <main+0x1d8>)
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	f7ff fb1a 	bl	80005f8 <__aeabi_dmul>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f7ff fdec 	bl	8000ba8 <__aeabi_d2f>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	61bb      	str	r3, [r7, #24]
    amp=(tab[1]*(3.3/4095))/resistance;
 8000fd4:	887b      	ldrh	r3, [r7, #2]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff faa4 	bl	8000524 <__aeabi_i2d>
 8000fdc:	a34e      	add	r3, pc, #312	; (adr r3, 8001118 <main+0x1d8>)
 8000fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe2:	f7ff fb09 	bl	80005f8 <__aeabi_dmul>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4614      	mov	r4, r2
 8000fec:	461d      	mov	r5, r3
 8000fee:	69f8      	ldr	r0, [r7, #28]
 8000ff0:	f7ff faaa 	bl	8000548 <__aeabi_f2d>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	4629      	mov	r1, r5
 8000ffc:	f7ff fc26 	bl	800084c <__aeabi_ddiv>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4610      	mov	r0, r2
 8001006:	4619      	mov	r1, r3
 8001008:	f7ff fdce 	bl	8000ba8 <__aeabi_d2f>
 800100c:	4603      	mov	r3, r0
 800100e:	617b      	str	r3, [r7, #20]
    power=volt*amp;
 8001010:	ed97 7a06 	vldr	s14, [r7, #24]
 8001014:	edd7 7a05 	vldr	s15, [r7, #20]
 8001018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800101c:	edc7 7a04 	vstr	s15, [r7, #16]

    // Test: Set GPIO pin low
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102a:	f002 fcc7 	bl	80039bc <HAL_GPIO_WritePin>


    // Pretend we have to do something else for a while
    //HAL_Delay(1);
    // Affichage des données
    sprintf(msg, "V:");     // %hu = unsigned short int. Si tu utilises RxData[0] au lieu de raw, remplacer 0 par le numéro de l'octet qui contient l'information à afficher
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	493e      	ldr	r1, [pc, #248]	; (800112c <main+0x1ec>)
 8001032:	4618      	mov	r0, r3
 8001034:	f005 fdac 	bl	8006b90 <siprintf>
    ssd1306_SetCursor(0,0);                       	// Placer sur la ligne de son choix
 8001038:	2100      	movs	r1, #0
 800103a:	2000      	movs	r0, #0
 800103c:	f000 fc86 	bl	800194c <ssd1306_SetCursor>
    ssd1306_WriteString(msg, Font_7x10, White); 	// Choisir la taille et la couleur de la police
 8001040:	4a3b      	ldr	r2, [pc, #236]	; (8001130 <main+0x1f0>)
 8001042:	1d38      	adds	r0, r7, #4
 8001044:	2301      	movs	r3, #1
 8001046:	ca06      	ldmia	r2, {r1, r2}
 8001048:	f000 fc5a 	bl	8001900 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800104c:	f000 fb48 	bl	80016e0 <ssd1306_UpdateScreen>
    sprintf(msg,"%0.3f",volt);
 8001050:	69b8      	ldr	r0, [r7, #24]
 8001052:	f7ff fa79 	bl	8000548 <__aeabi_f2d>
 8001056:	4602      	mov	r2, r0
 8001058:	460b      	mov	r3, r1
 800105a:	1d38      	adds	r0, r7, #4
 800105c:	4935      	ldr	r1, [pc, #212]	; (8001134 <main+0x1f4>)
 800105e:	f005 fd97 	bl	8006b90 <siprintf>
    ssd1306_SetCursor(30,0);
 8001062:	2100      	movs	r1, #0
 8001064:	201e      	movs	r0, #30
 8001066:	f000 fc71 	bl	800194c <ssd1306_SetCursor>
    ssd1306_WriteString(msg, Font_7x10, White);
 800106a:	4a31      	ldr	r2, [pc, #196]	; (8001130 <main+0x1f0>)
 800106c:	1d38      	adds	r0, r7, #4
 800106e:	2301      	movs	r3, #1
 8001070:	ca06      	ldmia	r2, {r1, r2}
 8001072:	f000 fc45 	bl	8001900 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001076:	f000 fb33 	bl	80016e0 <ssd1306_UpdateScreen>
    sprintf(msg, "A:");     // %hu = unsigned short int. Si tu utilises RxData[0] au lieu de raw, remplacer 0 par le numéro de l'octet qui contient l'information à afficher
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	492e      	ldr	r1, [pc, #184]	; (8001138 <main+0x1f8>)
 800107e:	4618      	mov	r0, r3
 8001080:	f005 fd86 	bl	8006b90 <siprintf>
    ssd1306_SetCursor(0,12);                       	// Placer sur la ligne de son choix
 8001084:	210c      	movs	r1, #12
 8001086:	2000      	movs	r0, #0
 8001088:	f000 fc60 	bl	800194c <ssd1306_SetCursor>
    ssd1306_WriteString(msg, Font_7x10, White); 	// Choisir la taille et la couleur de la police
 800108c:	4a28      	ldr	r2, [pc, #160]	; (8001130 <main+0x1f0>)
 800108e:	1d38      	adds	r0, r7, #4
 8001090:	2301      	movs	r3, #1
 8001092:	ca06      	ldmia	r2, {r1, r2}
 8001094:	f000 fc34 	bl	8001900 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001098:	f000 fb22 	bl	80016e0 <ssd1306_UpdateScreen>
    sprintf(msg,"%0.3f",amp);
 800109c:	6978      	ldr	r0, [r7, #20]
 800109e:	f7ff fa53 	bl	8000548 <__aeabi_f2d>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	1d38      	adds	r0, r7, #4
 80010a8:	4922      	ldr	r1, [pc, #136]	; (8001134 <main+0x1f4>)
 80010aa:	f005 fd71 	bl	8006b90 <siprintf>
    ssd1306_SetCursor(30,12);
 80010ae:	210c      	movs	r1, #12
 80010b0:	201e      	movs	r0, #30
 80010b2:	f000 fc4b 	bl	800194c <ssd1306_SetCursor>
    ssd1306_WriteString(msg, Font_7x10, White);
 80010b6:	4a1e      	ldr	r2, [pc, #120]	; (8001130 <main+0x1f0>)
 80010b8:	1d38      	adds	r0, r7, #4
 80010ba:	2301      	movs	r3, #1
 80010bc:	ca06      	ldmia	r2, {r1, r2}
 80010be:	f000 fc1f 	bl	8001900 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80010c2:	f000 fb0d 	bl	80016e0 <ssd1306_UpdateScreen>
    sprintf(msg, "P:");     // %hu = unsigned short int. Si tu utilises RxData[0] au lieu de raw, remplacer 0 par le numéro de l'octet qui contient l'information à afficher
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	491c      	ldr	r1, [pc, #112]	; (800113c <main+0x1fc>)
 80010ca:	4618      	mov	r0, r3
 80010cc:	f005 fd60 	bl	8006b90 <siprintf>
    ssd1306_SetCursor(0,24);                       	// Placer sur la ligne de son choix
 80010d0:	2118      	movs	r1, #24
 80010d2:	2000      	movs	r0, #0
 80010d4:	f000 fc3a 	bl	800194c <ssd1306_SetCursor>
    ssd1306_WriteString(msg, Font_7x10, White); 	// Choisir la taille et la couleur de la police
 80010d8:	4a15      	ldr	r2, [pc, #84]	; (8001130 <main+0x1f0>)
 80010da:	1d38      	adds	r0, r7, #4
 80010dc:	2301      	movs	r3, #1
 80010de:	ca06      	ldmia	r2, {r1, r2}
 80010e0:	f000 fc0e 	bl	8001900 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80010e4:	f000 fafc 	bl	80016e0 <ssd1306_UpdateScreen>
    sprintf(msg,"%0.3f",power);
 80010e8:	6938      	ldr	r0, [r7, #16]
 80010ea:	f7ff fa2d 	bl	8000548 <__aeabi_f2d>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	1d38      	adds	r0, r7, #4
 80010f4:	490f      	ldr	r1, [pc, #60]	; (8001134 <main+0x1f4>)
 80010f6:	f005 fd4b 	bl	8006b90 <siprintf>
    ssd1306_SetCursor(30,24);
 80010fa:	2118      	movs	r1, #24
 80010fc:	201e      	movs	r0, #30
 80010fe:	f000 fc25 	bl	800194c <ssd1306_SetCursor>
    ssd1306_WriteString(msg, Font_7x10, White);
 8001102:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <main+0x1f0>)
 8001104:	1d38      	adds	r0, r7, #4
 8001106:	2301      	movs	r3, #1
 8001108:	ca06      	ldmia	r2, {r1, r2}
 800110a:	f000 fbf9 	bl	8001900 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800110e:	f000 fae7 	bl	80016e0 <ssd1306_UpdateScreen>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001112:	e738      	b.n	8000f86 <main+0x46>
 8001114:	f3af 8000 	nop.w
 8001118:	e734d9b4 	.word	0xe734d9b4
 800111c:	3f4a680c 	.word	0x3f4a680c
 8001120:	3c23d70a 	.word	0x3c23d70a
 8001124:	2000070c 	.word	0x2000070c
 8001128:	20000660 	.word	0x20000660
 800112c:	08009000 	.word	0x08009000
 8001130:	20000000 	.word	0x20000000
 8001134:	08009004 	.word	0x08009004
 8001138:	0800900c 	.word	0x0800900c
 800113c:	08009010 	.word	0x08009010

08001140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b0ac      	sub	sp, #176	; 0xb0
 8001144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001146:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800114a:	2244      	movs	r2, #68	; 0x44
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f005 f894 	bl	800627c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001154:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2254      	movs	r2, #84	; 0x54
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f005 f886 	bl	800627c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001170:	2302      	movs	r3, #2
 8001172:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001174:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001178:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800117a:	2310      	movs	r3, #16
 800117c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117e:	2302      	movs	r3, #2
 8001180:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001184:	2302      	movs	r3, #2
 8001186:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800118a:	2301      	movs	r3, #1
 800118c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001190:	230a      	movs	r3, #10
 8001192:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001196:	2307      	movs	r3, #7
 8001198:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800119c:	2302      	movs	r3, #2
 800119e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011a2:	2302      	movs	r3, #2
 80011a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 f89f 	bl	80042f0 <HAL_RCC_OscConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80011b8:	f000 f9e0 	bl	800157c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011bc:	230f      	movs	r3, #15
 80011be:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c0:	2303      	movs	r3, #3
 80011c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011d4:	2104      	movs	r1, #4
 80011d6:	4618      	mov	r0, r3
 80011d8:	f003 fcaa 	bl	8004b30 <HAL_RCC_ClockConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80011e2:	f000 f9cb 	bl	800157c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80011e6:	f244 0342 	movw	r3, #16450	; 0x4042
 80011ea:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80011f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80011fa:	2302      	movs	r3, #2
 80011fc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80011fe:	2301      	movs	r3, #1
 8001200:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001202:	2308      	movs	r3, #8
 8001204:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001206:	2307      	movs	r3, #7
 8001208:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800120a:	2302      	movs	r3, #2
 800120c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800120e:	2302      	movs	r3, #2
 8001210:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001212:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001216:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	4618      	mov	r0, r3
 800121c:	f003 fe8e 	bl	8004f3c <HAL_RCCEx_PeriphCLKConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8001226:	f000 f9a9 	bl	800157c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800122a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800122e:	f003 f809 	bl	8004244 <HAL_PWREx_ControlVoltageScaling>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001238:	f000 f9a0 	bl	800157c <Error_Handler>
  }
}
 800123c:	bf00      	nop
 800123e:	37b0      	adds	r7, #176	; 0xb0
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800124a:	463b      	mov	r3, r7
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
 8001258:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800125a:	4b31      	ldr	r3, [pc, #196]	; (8001320 <MX_ADC1_Init+0xdc>)
 800125c:	4a31      	ldr	r2, [pc, #196]	; (8001324 <MX_ADC1_Init+0xe0>)
 800125e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001260:	4b2f      	ldr	r3, [pc, #188]	; (8001320 <MX_ADC1_Init+0xdc>)
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001266:	4b2e      	ldr	r3, [pc, #184]	; (8001320 <MX_ADC1_Init+0xdc>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800126c:	4b2c      	ldr	r3, [pc, #176]	; (8001320 <MX_ADC1_Init+0xdc>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001272:	4b2b      	ldr	r3, [pc, #172]	; (8001320 <MX_ADC1_Init+0xdc>)
 8001274:	2201      	movs	r2, #1
 8001276:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001278:	4b29      	ldr	r3, [pc, #164]	; (8001320 <MX_ADC1_Init+0xdc>)
 800127a:	2204      	movs	r2, #4
 800127c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800127e:	4b28      	ldr	r3, [pc, #160]	; (8001320 <MX_ADC1_Init+0xdc>)
 8001280:	2200      	movs	r2, #0
 8001282:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001284:	4b26      	ldr	r3, [pc, #152]	; (8001320 <MX_ADC1_Init+0xdc>)
 8001286:	2200      	movs	r2, #0
 8001288:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 800128a:	4b25      	ldr	r3, [pc, #148]	; (8001320 <MX_ADC1_Init+0xdc>)
 800128c:	2202      	movs	r2, #2
 800128e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001290:	4b23      	ldr	r3, [pc, #140]	; (8001320 <MX_ADC1_Init+0xdc>)
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001298:	4b21      	ldr	r3, [pc, #132]	; (8001320 <MX_ADC1_Init+0xdc>)
 800129a:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 800129e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80012a0:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <MX_ADC1_Init+0xdc>)
 80012a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012a8:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <MX_ADC1_Init+0xdc>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012b0:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <MX_ADC1_Init+0xdc>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012b6:	4b1a      	ldr	r3, [pc, #104]	; (8001320 <MX_ADC1_Init+0xdc>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012be:	4818      	ldr	r0, [pc, #96]	; (8001320 <MX_ADC1_Init+0xdc>)
 80012c0:	f001 f848 	bl	8002354 <HAL_ADC_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80012ca:	f000 f957 	bl	800157c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012ce:	4b16      	ldr	r3, [pc, #88]	; (8001328 <MX_ADC1_Init+0xe4>)
 80012d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012d2:	2306      	movs	r3, #6
 80012d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80012d6:	2302      	movs	r3, #2
 80012d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012da:	237f      	movs	r3, #127	; 0x7f
 80012dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012de:	2304      	movs	r3, #4
 80012e0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012e6:	463b      	mov	r3, r7
 80012e8:	4619      	mov	r1, r3
 80012ea:	480d      	ldr	r0, [pc, #52]	; (8001320 <MX_ADC1_Init+0xdc>)
 80012ec:	f001 fa1c 	bl	8002728 <HAL_ADC_ConfigChannel>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80012f6:	f000 f941 	bl	800157c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_ADC1_Init+0xe8>)
 80012fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80012fe:	230c      	movs	r3, #12
 8001300:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001302:	463b      	mov	r3, r7
 8001304:	4619      	mov	r1, r3
 8001306:	4806      	ldr	r0, [pc, #24]	; (8001320 <MX_ADC1_Init+0xdc>)
 8001308:	f001 fa0e 	bl	8002728 <HAL_ADC_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001312:	f000 f933 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000660 	.word	0x20000660
 8001324:	50040000 	.word	0x50040000
 8001328:	14f00020 	.word	0x14f00020
 800132c:	19200040 	.word	0x19200040

08001330 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <MX_I2C1_Init+0x74>)
 8001336:	4a1c      	ldr	r2, [pc, #112]	; (80013a8 <MX_I2C1_Init+0x78>)
 8001338:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <MX_I2C1_Init+0x74>)
 800133c:	4a1b      	ldr	r2, [pc, #108]	; (80013ac <MX_I2C1_Init+0x7c>)
 800133e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <MX_I2C1_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <MX_I2C1_Init+0x74>)
 8001348:	2201      	movs	r2, #1
 800134a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800134c:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <MX_I2C1_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <MX_I2C1_Init+0x74>)
 8001354:	2200      	movs	r2, #0
 8001356:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <MX_I2C1_Init+0x74>)
 800135a:	2200      	movs	r2, #0
 800135c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_I2C1_Init+0x74>)
 8001360:	2200      	movs	r2, #0
 8001362:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <MX_I2C1_Init+0x74>)
 8001366:	2200      	movs	r2, #0
 8001368:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800136a:	480e      	ldr	r0, [pc, #56]	; (80013a4 <MX_I2C1_Init+0x74>)
 800136c:	f002 fb58 	bl	8003a20 <HAL_I2C_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001376:	f000 f901 	bl	800157c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800137a:	2100      	movs	r1, #0
 800137c:	4809      	ldr	r0, [pc, #36]	; (80013a4 <MX_I2C1_Init+0x74>)
 800137e:	f002 febb 	bl	80040f8 <HAL_I2CEx_ConfigAnalogFilter>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001388:	f000 f8f8 	bl	800157c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800138c:	2100      	movs	r1, #0
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_I2C1_Init+0x74>)
 8001390:	f002 fefd 	bl	800418e <HAL_I2CEx_ConfigDigitalFilter>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800139a:	f000 f8ef 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20000614 	.word	0x20000614
 80013a8:	40005400 	.word	0x40005400
 80013ac:	10909cec 	.word	0x10909cec

080013b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b6:	f107 0310 	add.w	r3, r7, #16
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ce:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <MX_TIM2_Init+0x98>)
 80013d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 80013d6:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <MX_TIM2_Init+0x98>)
 80013d8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80013dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013de:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <MX_TIM2_Init+0x98>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <MX_TIM2_Init+0x98>)
 80013e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ec:	4b16      	ldr	r3, [pc, #88]	; (8001448 <MX_TIM2_Init+0x98>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <MX_TIM2_Init+0x98>)
 80013f4:	2280      	movs	r2, #128	; 0x80
 80013f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013f8:	4813      	ldr	r0, [pc, #76]	; (8001448 <MX_TIM2_Init+0x98>)
 80013fa:	f004 f885 	bl	8005508 <HAL_TIM_Base_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001404:	f000 f8ba 	bl	800157c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	4619      	mov	r1, r3
 8001414:	480c      	ldr	r0, [pc, #48]	; (8001448 <MX_TIM2_Init+0x98>)
 8001416:	f004 f91b 	bl	8005650 <HAL_TIM_ConfigClockSource>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001420:	f000 f8ac 	bl	800157c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001424:	2320      	movs	r3, #32
 8001426:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	4619      	mov	r1, r3
 8001430:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_TIM2_Init+0x98>)
 8001432:	f004 fad1 	bl	80059d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800143c:	f000 f89e 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	3720      	adds	r7, #32
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	2000070c 	.word	0x2000070c

0800144c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001452:	4a15      	ldr	r2, [pc, #84]	; (80014a8 <MX_USART2_UART_Init+0x5c>)
 8001454:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001456:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800145c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001472:	220c      	movs	r2, #12
 8001474:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001484:	2200      	movs	r2, #0
 8001486:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 800148a:	2200      	movs	r2, #0
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001490:	f004 fb08 	bl	8005aa4 <HAL_UART_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800149a:	f000 f86f 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000758 	.word	0x20000758
 80014a8:	40004400 	.word	0x40004400

080014ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014b2:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <MX_DMA_Init+0x38>)
 80014b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b6:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <MX_DMA_Init+0x38>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6493      	str	r3, [r2, #72]	; 0x48
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <MX_DMA_Init+0x38>)
 80014c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	200b      	movs	r0, #11
 80014d0:	f001 fedb 	bl	800328a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014d4:	200b      	movs	r0, #11
 80014d6:	f001 fef4 	bl	80032c2 <HAL_NVIC_EnableIRQ>

}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000

080014e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ee:	f107 030c 	add.w	r3, r7, #12
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
 80014fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <MX_GPIO_Init+0x8c>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	4a1c      	ldr	r2, [pc, #112]	; (8001574 <MX_GPIO_Init+0x8c>)
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150a:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <MX_GPIO_Init+0x8c>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	4b17      	ldr	r3, [pc, #92]	; (8001574 <MX_GPIO_Init+0x8c>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	4a16      	ldr	r2, [pc, #88]	; (8001574 <MX_GPIO_Init+0x8c>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001522:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_GPIO_Init+0x8c>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	607b      	str	r3, [r7, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_GPIO_Init+0x8c>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	4a10      	ldr	r2, [pc, #64]	; (8001574 <MX_GPIO_Init+0x8c>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_GPIO_Init+0x8c>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	603b      	str	r3, [r7, #0]
 8001544:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	2108      	movs	r1, #8
 800154a:	480b      	ldr	r0, [pc, #44]	; (8001578 <MX_GPIO_Init+0x90>)
 800154c:	f002 fa36 	bl	80039bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8001550:	2308      	movs	r3, #8
 8001552:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001554:	2301      	movs	r3, #1
 8001556:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	4619      	mov	r1, r3
 8001566:	4804      	ldr	r0, [pc, #16]	; (8001578 <MX_GPIO_Init+0x90>)
 8001568:	f002 f8be 	bl	80036e8 <HAL_GPIO_Init>

}
 800156c:	bf00      	nop
 800156e:	3720      	adds	r7, #32
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40021000 	.word	0x40021000
 8001578:	48000400 	.word	0x48000400

0800157c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001580:	b672      	cpsid	i
}
 8001582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    printf("Error");
 8001584:	4801      	ldr	r0, [pc, #4]	; (800158c <Error_Handler+0x10>)
 8001586:	f005 faeb 	bl	8006b60 <iprintf>
 800158a:	e7fb      	b.n	8001584 <Error_Handler+0x8>
 800158c:	08009014 	.word	0x08009014

08001590 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af04      	add	r7, sp, #16
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800159a:	230a      	movs	r3, #10
 800159c:	9302      	str	r3, [sp, #8]
 800159e:	2301      	movs	r3, #1
 80015a0:	9301      	str	r3, [sp, #4]
 80015a2:	1dfb      	adds	r3, r7, #7
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	2301      	movs	r3, #1
 80015a8:	2200      	movs	r2, #0
 80015aa:	2178      	movs	r1, #120	; 0x78
 80015ac:	4803      	ldr	r0, [pc, #12]	; (80015bc <ssd1306_WriteCommand+0x2c>)
 80015ae:	f002 fac7 	bl	8003b40 <HAL_I2C_Mem_Write>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000614 	.word	0x20000614

080015c0 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{	
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 80015c4:	2064      	movs	r0, #100	; 0x64
 80015c6:	f000 fcd9 	bl	8001f7c <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 80015ca:	20ae      	movs	r0, #174	; 0xae
 80015cc:	f7ff ffe0 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 80015d0:	2020      	movs	r0, #32
 80015d2:	f7ff ffdd 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80015d6:	2010      	movs	r0, #16
 80015d8:	f7ff ffda 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80015dc:	20b0      	movs	r0, #176	; 0xb0
 80015de:	f7ff ffd7 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80015e2:	20c8      	movs	r0, #200	; 0xc8
 80015e4:	f7ff ffd4 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 80015e8:	2000      	movs	r0, #0
 80015ea:	f7ff ffd1 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 80015ee:	2010      	movs	r0, #16
 80015f0:	f7ff ffce 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 80015f4:	2040      	movs	r0, #64	; 0x40
 80015f6:	f7ff ffcb 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 80015fa:	2081      	movs	r0, #129	; 0x81
 80015fc:	f7ff ffc8 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8001600:	20ff      	movs	r0, #255	; 0xff
 8001602:	f7ff ffc5 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8001606:	20a1      	movs	r0, #161	; 0xa1
 8001608:	f7ff ffc2 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 800160c:	20a6      	movs	r0, #166	; 0xa6
 800160e:	f7ff ffbf 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8001612:	20a8      	movs	r0, #168	; 0xa8
 8001614:	f7ff ffbc 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8001618:	203f      	movs	r0, #63	; 0x3f
 800161a:	f7ff ffb9 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800161e:	20a4      	movs	r0, #164	; 0xa4
 8001620:	f7ff ffb6 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8001624:	20d3      	movs	r0, #211	; 0xd3
 8001626:	f7ff ffb3 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 800162a:	2000      	movs	r0, #0
 800162c:	f7ff ffb0 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001630:	20d5      	movs	r0, #213	; 0xd5
 8001632:	f7ff ffad 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001636:	20f0      	movs	r0, #240	; 0xf0
 8001638:	f7ff ffaa 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800163c:	20d9      	movs	r0, #217	; 0xd9
 800163e:	f7ff ffa7 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8001642:	2022      	movs	r0, #34	; 0x22
 8001644:	f7ff ffa4 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8001648:	20da      	movs	r0, #218	; 0xda
 800164a:	f7ff ffa1 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 800164e:	2012      	movs	r0, #18
 8001650:	f7ff ff9e 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8001654:	20db      	movs	r0, #219	; 0xdb
 8001656:	f7ff ff9b 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800165a:	2020      	movs	r0, #32
 800165c:	f7ff ff98 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001660:	208d      	movs	r0, #141	; 0x8d
 8001662:	f7ff ff95 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8001666:	2014      	movs	r0, #20
 8001668:	f7ff ff92 	bl	8001590 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800166c:	20af      	movs	r0, #175	; 0xaf
 800166e:	f7ff ff8f 	bl	8001590 <ssd1306_WriteCommand>
	
	// Clear screen
	ssd1306_Fill(Black);
 8001672:	2000      	movs	r0, #0
 8001674:	f000 f810 	bl	8001698 <ssd1306_Fill>
	
	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8001678:	f000 f832 	bl	80016e0 <ssd1306_UpdateScreen>
	
	// Set default values for screen object
	SSD1306.CurrentX = 0;
 800167c:	4b05      	ldr	r3, [pc, #20]	; (8001694 <ssd1306_Init+0xd4>)
 800167e:	2200      	movs	r2, #0
 8001680:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001682:	4b04      	ldr	r3, [pc, #16]	; (8001694 <ssd1306_Init+0xd4>)
 8001684:	2200      	movs	r2, #0
 8001686:	805a      	strh	r2, [r3, #2]
	
	SSD1306.Initialized = 1;
 8001688:	4b02      	ldr	r3, [pc, #8]	; (8001694 <ssd1306_Init+0xd4>)
 800168a:	2201      	movs	r2, #1
 800168c:	715a      	strb	r2, [r3, #5]
	
	return 1;
 800168e:	2301      	movs	r3, #1
}
 8001690:	4618      	mov	r0, r3
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000600 	.word	0x20000600

08001698 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color) 
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	e00d      	b.n	80016c4 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <ssd1306_Fill+0x1a>
 80016ae:	2100      	movs	r1, #0
 80016b0:	e000      	b.n	80016b4 <ssd1306_Fill+0x1c>
 80016b2:	21ff      	movs	r1, #255	; 0xff
 80016b4:	4a09      	ldr	r2, [pc, #36]	; (80016dc <ssd1306_Fill+0x44>)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4413      	add	r3, r2
 80016ba:	460a      	mov	r2, r1
 80016bc:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	3301      	adds	r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ca:	d3ed      	bcc.n	80016a8 <ssd1306_Fill+0x10>
	}
}
 80016cc:	bf00      	nop
 80016ce:	bf00      	nop
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000200 	.word	0x20000200

080016e0 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void) 
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 80016e6:	2300      	movs	r3, #0
 80016e8:	71fb      	strb	r3, [r7, #7]
 80016ea:	e01d      	b.n	8001728 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	3b50      	subs	r3, #80	; 0x50
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ff4c 	bl	8001590 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 80016f8:	2000      	movs	r0, #0
 80016fa:	f7ff ff49 	bl	8001590 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 80016fe:	2010      	movs	r0, #16
 8001700:	f7ff ff46 	bl	8001590 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	01db      	lsls	r3, r3, #7
 8001708:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <ssd1306_UpdateScreen+0x58>)
 800170a:	4413      	add	r3, r2
 800170c:	2264      	movs	r2, #100	; 0x64
 800170e:	9202      	str	r2, [sp, #8]
 8001710:	2280      	movs	r2, #128	; 0x80
 8001712:	9201      	str	r2, [sp, #4]
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	2301      	movs	r3, #1
 8001718:	2240      	movs	r2, #64	; 0x40
 800171a:	2178      	movs	r1, #120	; 0x78
 800171c:	4807      	ldr	r0, [pc, #28]	; (800173c <ssd1306_UpdateScreen+0x5c>)
 800171e:	f002 fa0f 	bl	8003b40 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	3301      	adds	r3, #1
 8001726:	71fb      	strb	r3, [r7, #7]
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	2b07      	cmp	r3, #7
 800172c:	d9de      	bls.n	80016ec <ssd1306_UpdateScreen+0xc>
	}
}
 800172e:	bf00      	nop
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000200 	.word	0x20000200
 800173c:	20000614 	.word	0x20000614

08001740 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
 800174a:	460b      	mov	r3, r1
 800174c:	71bb      	strb	r3, [r7, #6]
 800174e:	4613      	mov	r3, r2
 8001750:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	2b00      	cmp	r3, #0
 8001758:	db48      	blt.n	80017ec <ssd1306_DrawPixel+0xac>
 800175a:	79bb      	ldrb	r3, [r7, #6]
 800175c:	2b3f      	cmp	r3, #63	; 0x3f
 800175e:	d845      	bhi.n	80017ec <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}
	
	// Check if pixel should be inverted
	if (SSD1306.Inverted) 
 8001760:	4b25      	ldr	r3, [pc, #148]	; (80017f8 <ssd1306_DrawPixel+0xb8>)
 8001762:	791b      	ldrb	r3, [r3, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d006      	beq.n	8001776 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8001768:	797b      	ldrb	r3, [r7, #5]
 800176a:	2b00      	cmp	r3, #0
 800176c:	bf0c      	ite	eq
 800176e:	2301      	moveq	r3, #1
 8001770:	2300      	movne	r3, #0
 8001772:	b2db      	uxtb	r3, r3
 8001774:	717b      	strb	r3, [r7, #5]
	}
	
	// Draw in the right color
	if (color == White)
 8001776:	797b      	ldrb	r3, [r7, #5]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d11a      	bne.n	80017b2 <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800177c:	79fa      	ldrb	r2, [r7, #7]
 800177e:	79bb      	ldrb	r3, [r7, #6]
 8001780:	08db      	lsrs	r3, r3, #3
 8001782:	b2d8      	uxtb	r0, r3
 8001784:	4603      	mov	r3, r0
 8001786:	01db      	lsls	r3, r3, #7
 8001788:	4413      	add	r3, r2
 800178a:	4a1c      	ldr	r2, [pc, #112]	; (80017fc <ssd1306_DrawPixel+0xbc>)
 800178c:	5cd3      	ldrb	r3, [r2, r3]
 800178e:	b25a      	sxtb	r2, r3
 8001790:	79bb      	ldrb	r3, [r7, #6]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	2101      	movs	r1, #1
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	b25b      	sxtb	r3, r3
 800179e:	4313      	orrs	r3, r2
 80017a0:	b259      	sxtb	r1, r3
 80017a2:	79fa      	ldrb	r2, [r7, #7]
 80017a4:	4603      	mov	r3, r0
 80017a6:	01db      	lsls	r3, r3, #7
 80017a8:	4413      	add	r3, r2
 80017aa:	b2c9      	uxtb	r1, r1
 80017ac:	4a13      	ldr	r2, [pc, #76]	; (80017fc <ssd1306_DrawPixel+0xbc>)
 80017ae:	54d1      	strb	r1, [r2, r3]
 80017b0:	e01d      	b.n	80017ee <ssd1306_DrawPixel+0xae>
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80017b2:	79fa      	ldrb	r2, [r7, #7]
 80017b4:	79bb      	ldrb	r3, [r7, #6]
 80017b6:	08db      	lsrs	r3, r3, #3
 80017b8:	b2d8      	uxtb	r0, r3
 80017ba:	4603      	mov	r3, r0
 80017bc:	01db      	lsls	r3, r3, #7
 80017be:	4413      	add	r3, r2
 80017c0:	4a0e      	ldr	r2, [pc, #56]	; (80017fc <ssd1306_DrawPixel+0xbc>)
 80017c2:	5cd3      	ldrb	r3, [r2, r3]
 80017c4:	b25a      	sxtb	r2, r3
 80017c6:	79bb      	ldrb	r3, [r7, #6]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	2101      	movs	r1, #1
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	b25b      	sxtb	r3, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	b25b      	sxtb	r3, r3
 80017d8:	4013      	ands	r3, r2
 80017da:	b259      	sxtb	r1, r3
 80017dc:	79fa      	ldrb	r2, [r7, #7]
 80017de:	4603      	mov	r3, r0
 80017e0:	01db      	lsls	r3, r3, #7
 80017e2:	4413      	add	r3, r2
 80017e4:	b2c9      	uxtb	r1, r1
 80017e6:	4a05      	ldr	r2, [pc, #20]	; (80017fc <ssd1306_DrawPixel+0xbc>)
 80017e8:	54d1      	strb	r1, [r2, r3]
 80017ea:	e000      	b.n	80017ee <ssd1306_DrawPixel+0xae>
		return;
 80017ec:	bf00      	nop
	}
}
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	20000600 	.word	0x20000600
 80017fc:	20000200 	.word	0x20000200

08001800 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	4604      	mov	r4, r0
 8001808:	1d38      	adds	r0, r7, #4
 800180a:	e880 0006 	stmia.w	r0, {r1, r2}
 800180e:	461a      	mov	r2, r3
 8001810:	4623      	mov	r3, r4
 8001812:	73fb      	strb	r3, [r7, #15]
 8001814:	4613      	mov	r3, r2
 8001816:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;
	
	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001818:	4b38      	ldr	r3, [pc, #224]	; (80018fc <ssd1306_WriteChar+0xfc>)
 800181a:	881b      	ldrh	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	793b      	ldrb	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	2b7f      	cmp	r3, #127	; 0x7f
 8001824:	dc06      	bgt.n	8001834 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8001826:	4b35      	ldr	r3, [pc, #212]	; (80018fc <ssd1306_WriteChar+0xfc>)
 8001828:	885b      	ldrh	r3, [r3, #2]
 800182a:	461a      	mov	r2, r3
 800182c:	797b      	ldrb	r3, [r7, #5]
 800182e:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001830:	2b3f      	cmp	r3, #63	; 0x3f
 8001832:	dd01      	ble.n	8001838 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8001834:	2300      	movs	r3, #0
 8001836:	e05d      	b.n	80018f4 <ssd1306_WriteChar+0xf4>
	}
	
	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8001838:	2300      	movs	r3, #0
 800183a:	61fb      	str	r3, [r7, #28]
 800183c:	e04c      	b.n	80018d8 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	7bfb      	ldrb	r3, [r7, #15]
 8001842:	3b20      	subs	r3, #32
 8001844:	7979      	ldrb	r1, [r7, #5]
 8001846:	fb01 f303 	mul.w	r3, r1, r3
 800184a:	4619      	mov	r1, r3
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	440b      	add	r3, r1
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4413      	add	r3, r2
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8001858:	2300      	movs	r3, #0
 800185a:	61bb      	str	r3, [r7, #24]
 800185c:	e034      	b.n	80018c8 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000) 
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d012      	beq.n	8001894 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800186e:	4b23      	ldr	r3, [pc, #140]	; (80018fc <ssd1306_WriteChar+0xfc>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	b2da      	uxtb	r2, r3
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	4413      	add	r3, r2
 800187a:	b2d8      	uxtb	r0, r3
 800187c:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <ssd1306_WriteChar+0xfc>)
 800187e:	885b      	ldrh	r3, [r3, #2]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	4413      	add	r3, r2
 8001888:	b2db      	uxtb	r3, r3
 800188a:	7bba      	ldrb	r2, [r7, #14]
 800188c:	4619      	mov	r1, r3
 800188e:	f7ff ff57 	bl	8001740 <ssd1306_DrawPixel>
 8001892:	e016      	b.n	80018c2 <ssd1306_WriteChar+0xc2>
			} 
			else 
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <ssd1306_WriteChar+0xfc>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	4413      	add	r3, r2
 80018a0:	b2d8      	uxtb	r0, r3
 80018a2:	4b16      	ldr	r3, [pc, #88]	; (80018fc <ssd1306_WriteChar+0xfc>)
 80018a4:	885b      	ldrh	r3, [r3, #2]
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	b2db      	uxtb	r3, r3
 80018ac:	4413      	add	r3, r2
 80018ae:	b2d9      	uxtb	r1, r3
 80018b0:	7bbb      	ldrb	r3, [r7, #14]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	bf0c      	ite	eq
 80018b6:	2301      	moveq	r3, #1
 80018b8:	2300      	movne	r3, #0
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	461a      	mov	r2, r3
 80018be:	f7ff ff3f 	bl	8001740 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	3301      	adds	r3, #1
 80018c6:	61bb      	str	r3, [r7, #24]
 80018c8:	793b      	ldrb	r3, [r7, #4]
 80018ca:	461a      	mov	r2, r3
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d3c5      	bcc.n	800185e <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3301      	adds	r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	797b      	ldrb	r3, [r7, #5]
 80018da:	461a      	mov	r2, r3
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	4293      	cmp	r3, r2
 80018e0:	d3ad      	bcc.n	800183e <ssd1306_WriteChar+0x3e>
			}
		}
	}
	
	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <ssd1306_WriteChar+0xfc>)
 80018e4:	881a      	ldrh	r2, [r3, #0]
 80018e6:	793b      	ldrb	r3, [r7, #4]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	4413      	add	r3, r2
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	4b03      	ldr	r3, [pc, #12]	; (80018fc <ssd1306_WriteChar+0xfc>)
 80018f0:	801a      	strh	r2, [r3, #0]
	
	// Return written char for validation
	return ch;
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3724      	adds	r7, #36	; 0x24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd90      	pop	{r4, r7, pc}
 80018fc:	20000600 	.word	0x20000600

08001900 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	1d38      	adds	r0, r7, #4
 800190a:	e880 0006 	stmia.w	r0, {r1, r2}
 800190e:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str) 
 8001910:	e012      	b.n	8001938 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	7818      	ldrb	r0, [r3, #0]
 8001916:	78fb      	ldrb	r3, [r7, #3]
 8001918:	1d3a      	adds	r2, r7, #4
 800191a:	ca06      	ldmia	r2, {r1, r2}
 800191c:	f7ff ff70 	bl	8001800 <ssd1306_WriteChar>
 8001920:	4603      	mov	r3, r0
 8001922:	461a      	mov	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d002      	beq.n	8001932 <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	e008      	b.n	8001944 <ssd1306_WriteString+0x44>
		}
		
		// Next char
		str++;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	3301      	adds	r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
	while (*str) 
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1e8      	bne.n	8001912 <ssd1306_WriteString+0x12>
	}
	
	// Everything ok
	return *str;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	781b      	ldrb	r3, [r3, #0]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	460a      	mov	r2, r1
 8001956:	71fb      	strb	r3, [r7, #7]
 8001958:	4613      	mov	r3, r2
 800195a:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	b29a      	uxth	r2, r3
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <ssd1306_SetCursor+0x2c>)
 8001962:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001964:	79bb      	ldrb	r3, [r7, #6]
 8001966:	b29a      	uxth	r2, r3
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <ssd1306_SetCursor+0x2c>)
 800196a:	805a      	strh	r2, [r3, #2]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	20000600 	.word	0x20000600

0800197c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <HAL_MspInit+0x44>)
 8001984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001986:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <HAL_MspInit+0x44>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6613      	str	r3, [r2, #96]	; 0x60
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <HAL_MspInit+0x44>)
 8001990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_MspInit+0x44>)
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <HAL_MspInit+0x44>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a4:	6593      	str	r3, [r2, #88]	; 0x58
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_MspInit+0x44>)
 80019a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b2:	bf00      	nop
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000

080019c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	; 0x28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a2b      	ldr	r2, [pc, #172]	; (8001a90 <HAL_ADC_MspInit+0xcc>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d14f      	bne.n	8001a86 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019e6:	4b2b      	ldr	r3, [pc, #172]	; (8001a94 <HAL_ADC_MspInit+0xd0>)
 80019e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ea:	4a2a      	ldr	r2, [pc, #168]	; (8001a94 <HAL_ADC_MspInit+0xd0>)
 80019ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f2:	4b28      	ldr	r3, [pc, #160]	; (8001a94 <HAL_ADC_MspInit+0xd0>)
 80019f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	4b25      	ldr	r3, [pc, #148]	; (8001a94 <HAL_ADC_MspInit+0xd0>)
 8001a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a02:	4a24      	ldr	r2, [pc, #144]	; (8001a94 <HAL_ADC_MspInit+0xd0>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a0a:	4b22      	ldr	r3, [pc, #136]	; (8001a94 <HAL_ADC_MspInit+0xd0>)
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a16:	2303      	movs	r3, #3
 8001a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a1a:	230b      	movs	r3, #11
 8001a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2c:	f001 fe5c 	bl	80036e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a30:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <HAL_ADC_MspInit+0xd4>)
 8001a32:	4a1a      	ldr	r2, [pc, #104]	; (8001a9c <HAL_ADC_MspInit+0xd8>)
 8001a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001a36:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <HAL_ADC_MspInit+0xd4>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <HAL_ADC_MspInit+0xd4>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_ADC_MspInit+0xd4>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <HAL_ADC_MspInit+0xd4>)
 8001a4a:	2280      	movs	r2, #128	; 0x80
 8001a4c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a4e:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_ADC_MspInit+0xd4>)
 8001a50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a54:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <HAL_ADC_MspInit+0xd4>)
 8001a58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a5c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <HAL_ADC_MspInit+0xd4>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <HAL_ADC_MspInit+0xd4>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a6a:	480b      	ldr	r0, [pc, #44]	; (8001a98 <HAL_ADC_MspInit+0xd4>)
 8001a6c:	f001 fc44 	bl	80032f8 <HAL_DMA_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8001a76:	f7ff fd81 	bl	800157c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a06      	ldr	r2, [pc, #24]	; (8001a98 <HAL_ADC_MspInit+0xd4>)
 8001a7e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a80:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <HAL_ADC_MspInit+0xd4>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a86:	bf00      	nop
 8001a88:	3728      	adds	r7, #40	; 0x28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	50040000 	.word	0x50040000
 8001a94:	40021000 	.word	0x40021000
 8001a98:	200006c4 	.word	0x200006c4
 8001a9c:	40020008 	.word	0x40020008

08001aa0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 0314 	add.w	r3, r7, #20
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a18      	ldr	r2, [pc, #96]	; (8001b20 <HAL_I2C_MspInit+0x80>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d129      	bne.n	8001b16 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <HAL_I2C_MspInit+0x84>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	4a17      	ldr	r2, [pc, #92]	; (8001b24 <HAL_I2C_MspInit+0x84>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <HAL_I2C_MspInit+0x84>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ada:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ade:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ae0:	2312      	movs	r3, #18
 8001ae2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aec:	2304      	movs	r3, #4
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	4619      	mov	r1, r3
 8001af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001afa:	f001 fdf5 	bl	80036e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001afe:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_I2C_MspInit+0x84>)
 8001b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b02:	4a08      	ldr	r2, [pc, #32]	; (8001b24 <HAL_I2C_MspInit+0x84>)
 8001b04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b08:	6593      	str	r3, [r2, #88]	; 0x58
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_I2C_MspInit+0x84>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b16:	bf00      	nop
 8001b18:	3728      	adds	r7, #40	; 0x28
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40005400 	.word	0x40005400
 8001b24:	40021000 	.word	0x40021000

08001b28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b38:	d10b      	bne.n	8001b52 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_TIM_Base_MspInit+0x38>)
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3e:	4a08      	ldr	r2, [pc, #32]	; (8001b60 <HAL_TIM_Base_MspInit+0x38>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6593      	str	r3, [r2, #88]	; 0x58
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_TIM_Base_MspInit+0x38>)
 8001b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000

08001b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a17      	ldr	r2, [pc, #92]	; (8001be0 <HAL_UART_MspInit+0x7c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d128      	bne.n	8001bd8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b86:	4b17      	ldr	r3, [pc, #92]	; (8001be4 <HAL_UART_MspInit+0x80>)
 8001b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8a:	4a16      	ldr	r2, [pc, #88]	; (8001be4 <HAL_UART_MspInit+0x80>)
 8001b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b90:	6593      	str	r3, [r2, #88]	; 0x58
 8001b92:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <HAL_UART_MspInit+0x80>)
 8001b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <HAL_UART_MspInit+0x80>)
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba2:	4a10      	ldr	r2, [pc, #64]	; (8001be4 <HAL_UART_MspInit+0x80>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <HAL_UART_MspInit+0x80>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bb6:	230c      	movs	r3, #12
 8001bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bc6:	2307      	movs	r3, #7
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bd4:	f001 fd88 	bl	80036e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bd8:	bf00      	nop
 8001bda:	3728      	adds	r7, #40	; 0x28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40004400 	.word	0x40004400
 8001be4:	40021000 	.word	0x40021000

08001be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bec:	e7fe      	b.n	8001bec <NMI_Handler+0x4>

08001bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <HardFault_Handler+0x4>

08001bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <MemManage_Handler+0x4>

08001bfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfe:	e7fe      	b.n	8001bfe <BusFault_Handler+0x4>

08001c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <UsageFault_Handler+0x4>

08001c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c34:	f000 f982 	bl	8001f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <DMA1_Channel1_IRQHandler+0x10>)
 8001c42:	f001 fc71 	bl	8003528 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200006c4 	.word	0x200006c4

08001c50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
	return 1;
 8001c54:	2301      	movs	r3, #1
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <_kill>:

int _kill(int pid, int sig)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c6a:	f004 fadd 	bl	8006228 <__errno>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2216      	movs	r2, #22
 8001c72:	601a      	str	r2, [r3, #0]
	return -1;
 8001c74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <_exit>:

void _exit (int status)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c88:	f04f 31ff 	mov.w	r1, #4294967295
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ffe7 	bl	8001c60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c92:	e7fe      	b.n	8001c92 <_exit+0x12>

08001c94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	e00a      	b.n	8001cbc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ca6:	f3af 8000 	nop.w
 8001caa:	4601      	mov	r1, r0
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	60ba      	str	r2, [r7, #8]
 8001cb2:	b2ca      	uxtb	r2, r1
 8001cb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	dbf0      	blt.n	8001ca6 <_read+0x12>
	}

return len;
 8001cc4:	687b      	ldr	r3, [r7, #4]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	e009      	b.n	8001cf4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	60ba      	str	r2, [r7, #8]
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	dbf1      	blt.n	8001ce0 <_write+0x12>
	}
	return len;
 8001cfc:	687b      	ldr	r3, [r7, #4]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <_close>:

int _close(int file)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
	return -1;
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d2e:	605a      	str	r2, [r3, #4]
	return 0;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <_isatty>:

int _isatty(int file)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
	return 1;
 8001d46:	2301      	movs	r3, #1
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
	return 0;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d78:	4a14      	ldr	r2, [pc, #80]	; (8001dcc <_sbrk+0x5c>)
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <_sbrk+0x60>)
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d84:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <_sbrk+0x64>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d102      	bne.n	8001d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <_sbrk+0x64>)
 8001d8e:	4a12      	ldr	r2, [pc, #72]	; (8001dd8 <_sbrk+0x68>)
 8001d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <_sbrk+0x64>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d207      	bcs.n	8001db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da0:	f004 fa42 	bl	8006228 <__errno>
 8001da4:	4603      	mov	r3, r0
 8001da6:	220c      	movs	r2, #12
 8001da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dae:	e009      	b.n	8001dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db0:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <_sbrk+0x64>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001db6:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <_sbrk+0x64>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	4a05      	ldr	r2, [pc, #20]	; (8001dd4 <_sbrk+0x64>)
 8001dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20010000 	.word	0x20010000
 8001dd0:	00000400 	.word	0x00000400
 8001dd4:	20000608 	.word	0x20000608
 8001dd8:	200007f0 	.word	0x200007f0

08001ddc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001de0:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <SystemInit+0x5c>)
 8001de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de6:	4a14      	ldr	r2, [pc, #80]	; (8001e38 <SystemInit+0x5c>)
 8001de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001df0:	4b12      	ldr	r3, [pc, #72]	; (8001e3c <SystemInit+0x60>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a11      	ldr	r2, [pc, #68]	; (8001e3c <SystemInit+0x60>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	; (8001e3c <SystemInit+0x60>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001e02:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <SystemInit+0x60>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a0d      	ldr	r2, [pc, #52]	; (8001e3c <SystemInit+0x60>)
 8001e08:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001e0c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001e10:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <SystemInit+0x60>)
 8001e14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e18:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e1a:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <SystemInit+0x60>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a07      	ldr	r2, [pc, #28]	; (8001e3c <SystemInit+0x60>)
 8001e20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e24:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <SystemInit+0x60>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000ed00 	.word	0xe000ed00
 8001e3c:	40021000 	.word	0x40021000

08001e40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e44:	f7ff ffca 	bl	8001ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e48:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e4a:	e003      	b.n	8001e54 <LoopCopyDataInit>

08001e4c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	; (8001e7c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e4e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e50:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e52:	3104      	adds	r1, #4

08001e54 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e54:	480a      	ldr	r0, [pc, #40]	; (8001e80 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e56:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e58:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e5a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001e5c:	d3f6      	bcc.n	8001e4c <CopyDataInit>
	ldr	r2, =_sbss
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001e60:	e002      	b.n	8001e68 <LoopFillZerobss>

08001e62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001e62:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001e64:	f842 3b04 	str.w	r3, [r2], #4

08001e68 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <LoopForever+0x16>)
	cmp	r2, r3
 8001e6a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001e6c:	d3f9      	bcc.n	8001e62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e6e:	f004 f9e1 	bl	8006234 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e72:	f7ff f865 	bl	8000f40 <main>

08001e76 <LoopForever>:

LoopForever:
    b LoopForever
 8001e76:	e7fe      	b.n	8001e76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e78:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001e7c:	08009bc4 	.word	0x08009bc4
	ldr	r0, =_sdata
 8001e80:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e84:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 8001e88:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8001e8c:	200007f0 	.word	0x200007f0

08001e90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e90:	e7fe      	b.n	8001e90 <ADC1_IRQHandler>

08001e92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e9c:	2003      	movs	r0, #3
 8001e9e:	f001 f9e9 	bl	8003274 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f000 f80e 	bl	8001ec4 <HAL_InitTick>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d002      	beq.n	8001eb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	71fb      	strb	r3, [r7, #7]
 8001eb2:	e001      	b.n	8001eb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001eb4:	f7ff fd62 	bl	800197c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ed0:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <HAL_InitTick+0x6c>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d023      	beq.n	8001f20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ed8:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <HAL_InitTick+0x70>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_InitTick+0x6c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f001 f9f5 	bl	80032de <HAL_SYSTICK_Config>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10f      	bne.n	8001f1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b0f      	cmp	r3, #15
 8001efe:	d809      	bhi.n	8001f14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f00:	2200      	movs	r2, #0
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295
 8001f08:	f001 f9bf 	bl	800328a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f0c:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <HAL_InitTick+0x74>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e007      	b.n	8001f24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
 8001f18:	e004      	b.n	8001f24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	73fb      	strb	r3, [r7, #15]
 8001f1e:	e001      	b.n	8001f24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000010 	.word	0x20000010
 8001f34:	20000008 	.word	0x20000008
 8001f38:	2000000c 	.word	0x2000000c

08001f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <HAL_IncTick+0x20>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_IncTick+0x24>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	4a04      	ldr	r2, [pc, #16]	; (8001f60 <HAL_IncTick+0x24>)
 8001f4e:	6013      	str	r3, [r2, #0]
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20000010 	.word	0x20000010
 8001f60:	200007dc 	.word	0x200007dc

08001f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return uwTick;
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <HAL_GetTick+0x14>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	200007dc 	.word	0x200007dc

08001f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f84:	f7ff ffee 	bl	8001f64 <HAL_GetTick>
 8001f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f94:	d005      	beq.n	8001fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_Delay+0x44>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fa2:	bf00      	nop
 8001fa4:	f7ff ffde 	bl	8001f64 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d8f7      	bhi.n	8001fa4 <HAL_Delay+0x28>
  {
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000010 	.word	0x20000010

08001fc4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	609a      	str	r2, [r3, #8]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	3360      	adds	r3, #96	; 0x60
 800203e:	461a      	mov	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b08      	ldr	r3, [pc, #32]	; (8002070 <LL_ADC_SetOffset+0x44>)
 800204e:	4013      	ands	r3, r2
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	430a      	orrs	r2, r1
 800205a:	4313      	orrs	r3, r2
 800205c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002064:	bf00      	nop
 8002066:	371c      	adds	r7, #28
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	03fff000 	.word	0x03fff000

08002074 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3360      	adds	r3, #96	; 0x60
 8002082:	461a      	mov	r2, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002094:	4618      	mov	r0, r3
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b087      	sub	sp, #28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	3360      	adds	r3, #96	; 0x60
 80020b0:	461a      	mov	r2, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	431a      	orrs	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020ca:	bf00      	nop
 80020cc:	371c      	adds	r7, #28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3330      	adds	r3, #48	; 0x30
 800210c:	461a      	mov	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	f003 030c 	and.w	r3, r3, #12
 8002118:	4413      	add	r3, r2
 800211a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f003 031f 	and.w	r3, r3, #31
 8002126:	211f      	movs	r1, #31
 8002128:	fa01 f303 	lsl.w	r3, r1, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	401a      	ands	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	0e9b      	lsrs	r3, r3, #26
 8002134:	f003 011f 	and.w	r1, r3, #31
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	431a      	orrs	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002148:	bf00      	nop
 800214a:	371c      	adds	r7, #28
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3314      	adds	r3, #20
 8002164:	461a      	mov	r2, r3
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	0e5b      	lsrs	r3, r3, #25
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	4413      	add	r3, r2
 8002172:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	0d1b      	lsrs	r3, r3, #20
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	2107      	movs	r1, #7
 8002182:	fa01 f303 	lsl.w	r3, r1, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	401a      	ands	r2, r3
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	0d1b      	lsrs	r3, r3, #20
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	fa01 f303 	lsl.w	r3, r1, r3
 8002198:	431a      	orrs	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800219e:	bf00      	nop
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c4:	43db      	mvns	r3, r3
 80021c6:	401a      	ands	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f003 0318 	and.w	r3, r3, #24
 80021ce:	4908      	ldr	r1, [pc, #32]	; (80021f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80021d0:	40d9      	lsrs	r1, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	400b      	ands	r3, r1
 80021d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021da:	431a      	orrs	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80021e2:	bf00      	nop
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	0007ffff 	.word	0x0007ffff

080021f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002204:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6093      	str	r3, [r2, #8]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002228:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800222c:	d101      	bne.n	8002232 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002232:	2300      	movs	r3, #0
}
 8002234:	4618      	mov	r0, r3
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002250:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002254:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002278:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800227c:	d101      	bne.n	8002282 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022a4:	f043 0201 	orr.w	r2, r3, #1
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <LL_ADC_IsEnabled+0x18>
 80022cc:	2301      	movs	r3, #1
 80022ce:	e000      	b.n	80022d2 <LL_ADC_IsEnabled+0x1a>
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022f2:	f043 0204 	orr.w	r2, r3, #4
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	2b04      	cmp	r3, #4
 8002318:	d101      	bne.n	800231e <LL_ADC_REG_IsConversionOngoing+0x18>
 800231a:	2301      	movs	r3, #1
 800231c:	e000      	b.n	8002320 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b08      	cmp	r3, #8
 800233e:	d101      	bne.n	8002344 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002360:	2300      	movs	r3, #0
 8002362:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e12c      	b.n	80025c8 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002378:	2b00      	cmp	r3, #0
 800237a:	d109      	bne.n	8002390 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff fb21 	bl	80019c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff ff3f 	bl	8002218 <LL_ADC_IsDeepPowerDownEnabled>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d004      	beq.n	80023aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff25 	bl	80021f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff ff5a 	bl	8002268 <LL_ADC_IsInternalRegulatorEnabled>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d115      	bne.n	80023e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ff3e 	bl	8002240 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023c4:	4b82      	ldr	r3, [pc, #520]	; (80025d0 <HAL_ADC_Init+0x27c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	099b      	lsrs	r3, r3, #6
 80023ca:	4a82      	ldr	r2, [pc, #520]	; (80025d4 <HAL_ADC_Init+0x280>)
 80023cc:	fba2 2303 	umull	r2, r3, r2, r3
 80023d0:	099b      	lsrs	r3, r3, #6
 80023d2:	3301      	adds	r3, #1
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023d8:	e002      	b.n	80023e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	3b01      	subs	r3, #1
 80023de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f9      	bne.n	80023da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff ff3c 	bl	8002268 <LL_ADC_IsInternalRegulatorEnabled>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10d      	bne.n	8002412 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fa:	f043 0210 	orr.w	r2, r3, #16
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002406:	f043 0201 	orr.w	r2, r3, #1
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff ff75 	bl	8002306 <LL_ADC_REG_IsConversionOngoing>
 800241c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b00      	cmp	r3, #0
 8002428:	f040 80c5 	bne.w	80025b6 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	2b00      	cmp	r3, #0
 8002430:	f040 80c1 	bne.w	80025b6 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002438:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800243c:	f043 0202 	orr.w	r2, r3, #2
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff35 	bl	80022b8 <LL_ADC_IsEnabled>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d10b      	bne.n	800246c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002454:	4860      	ldr	r0, [pc, #384]	; (80025d8 <HAL_ADC_Init+0x284>)
 8002456:	f7ff ff2f 	bl	80022b8 <LL_ADC_IsEnabled>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d105      	bne.n	800246c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	4619      	mov	r1, r3
 8002466:	485d      	ldr	r0, [pc, #372]	; (80025dc <HAL_ADC_Init+0x288>)
 8002468:	f7ff fdac 	bl	8001fc4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	7e5b      	ldrb	r3, [r3, #25]
 8002470:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002476:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800247c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002482:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f893 3020 	ldrb.w	r3, [r3, #32]
 800248a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d106      	bne.n	80024a8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	3b01      	subs	r3, #1
 80024a0:	045b      	lsls	r3, r3, #17
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d009      	beq.n	80024c4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	4b45      	ldr	r3, [pc, #276]	; (80025e0 <HAL_ADC_Init+0x28c>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	69b9      	ldr	r1, [r7, #24]
 80024d4:	430b      	orrs	r3, r1
 80024d6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff ff12 	bl	8002306 <LL_ADC_REG_IsConversionOngoing>
 80024e2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff1f 	bl	800232c <LL_ADC_INJ_IsConversionOngoing>
 80024ee:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d13d      	bne.n	8002572 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d13a      	bne.n	8002572 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002500:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002508:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002518:	f023 0302 	bic.w	r3, r3, #2
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	69b9      	ldr	r1, [r7, #24]
 8002522:	430b      	orrs	r3, r1
 8002524:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800252c:	2b01      	cmp	r3, #1
 800252e:	d118      	bne.n	8002562 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800253a:	f023 0304 	bic.w	r3, r3, #4
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002546:	4311      	orrs	r1, r2
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800254c:	4311      	orrs	r1, r2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002552:	430a      	orrs	r2, r1
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f042 0201 	orr.w	r2, r2, #1
 800255e:	611a      	str	r2, [r3, #16]
 8002560:	e007      	b.n	8002572 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691a      	ldr	r2, [r3, #16]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 0201 	bic.w	r2, r2, #1
 8002570:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d10c      	bne.n	8002594 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002580:	f023 010f 	bic.w	r1, r3, #15
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	1e5a      	subs	r2, r3, #1
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	631a      	str	r2, [r3, #48]	; 0x30
 8002592:	e007      	b.n	80025a4 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 020f 	bic.w	r2, r2, #15
 80025a2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a8:	f023 0303 	bic.w	r3, r3, #3
 80025ac:	f043 0201 	orr.w	r2, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54
 80025b4:	e007      	b.n	80025c6 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ba:	f043 0210 	orr.w	r2, r3, #16
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3720      	adds	r7, #32
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20000008 	.word	0x20000008
 80025d4:	053e2d63 	.word	0x053e2d63
 80025d8:	50040000 	.word	0x50040000
 80025dc:	50040300 	.word	0x50040300
 80025e0:	fff0c007 	.word	0xfff0c007

080025e4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff fe86 	bl	8002306 <LL_ADC_REG_IsConversionOngoing>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d167      	bne.n	80026d0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_ADC_Start_DMA+0x2a>
 800260a:	2302      	movs	r3, #2
 800260c:	e063      	b.n	80026d6 <HAL_ADC_Start_DMA+0xf2>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 fc66 	bl	8002ee8 <ADC_Enable>
 800261c:	4603      	mov	r3, r0
 800261e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002620:	7dfb      	ldrb	r3, [r7, #23]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d14f      	bne.n	80026c6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800262e:	f023 0301 	bic.w	r3, r3, #1
 8002632:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d006      	beq.n	8002654 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264a:	f023 0206 	bic.w	r2, r3, #6
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	659a      	str	r2, [r3, #88]	; 0x58
 8002652:	e002      	b.n	800265a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265e:	4a20      	ldr	r2, [pc, #128]	; (80026e0 <HAL_ADC_Start_DMA+0xfc>)
 8002660:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002666:	4a1f      	ldr	r2, [pc, #124]	; (80026e4 <HAL_ADC_Start_DMA+0x100>)
 8002668:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266e:	4a1e      	ldr	r2, [pc, #120]	; (80026e8 <HAL_ADC_Start_DMA+0x104>)
 8002670:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	221c      	movs	r2, #28
 8002678:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 0210 	orr.w	r2, r2, #16
 8002690:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f042 0201 	orr.w	r2, r2, #1
 80026a0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	3340      	adds	r3, #64	; 0x40
 80026ac:	4619      	mov	r1, r3
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f000 fed9 	bl	8003468 <HAL_DMA_Start_IT>
 80026b6:	4603      	mov	r3, r0
 80026b8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fe0d 	bl	80022de <LL_ADC_REG_StartConversion>
 80026c4:	e006      	b.n	80026d4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80026ce:	e001      	b.n	80026d4 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026d0:	2302      	movs	r3, #2
 80026d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	08002fad 	.word	0x08002fad
 80026e4:	08003085 	.word	0x08003085
 80026e8:	080030a1 	.word	0x080030a1

080026ec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b0b6      	sub	sp, #216	; 0xd8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <HAL_ADC_ConfigChannel+0x22>
 8002746:	2302      	movs	r3, #2
 8002748:	e3b9      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x796>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fdd5 	bl	8002306 <LL_ADC_REG_IsConversionOngoing>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	f040 839e 	bne.w	8002ea0 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b05      	cmp	r3, #5
 800276a:	d824      	bhi.n	80027b6 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	3b02      	subs	r3, #2
 8002772:	2b03      	cmp	r3, #3
 8002774:	d81b      	bhi.n	80027ae <HAL_ADC_ConfigChannel+0x86>
 8002776:	a201      	add	r2, pc, #4	; (adr r2, 800277c <HAL_ADC_ConfigChannel+0x54>)
 8002778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277c:	0800278d 	.word	0x0800278d
 8002780:	08002795 	.word	0x08002795
 8002784:	0800279d 	.word	0x0800279d
 8002788:	080027a5 	.word	0x080027a5
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	220c      	movs	r2, #12
 8002790:	605a      	str	r2, [r3, #4]
          break;
 8002792:	e011      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	2212      	movs	r2, #18
 8002798:	605a      	str	r2, [r3, #4]
          break;
 800279a:	e00d      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	2218      	movs	r2, #24
 80027a0:	605a      	str	r2, [r3, #4]
          break;
 80027a2:	e009      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027aa:	605a      	str	r2, [r3, #4]
          break;
 80027ac:	e004      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2206      	movs	r2, #6
 80027b2:	605a      	str	r2, [r3, #4]
          break;
 80027b4:	e000      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80027b6:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	f7ff fc99 	bl	80020fc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fd99 	bl	8002306 <LL_ADC_REG_IsConversionOngoing>
 80027d4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff fda5 	bl	800232c <LL_ADC_INJ_IsConversionOngoing>
 80027e2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f040 81a6 	bne.w	8002b3c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f040 81a1 	bne.w	8002b3c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	6819      	ldr	r1, [r3, #0]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	461a      	mov	r2, r3
 8002808:	f7ff fca4 	bl	8002154 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	695a      	ldr	r2, [r3, #20]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	08db      	lsrs	r3, r3, #3
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	2b04      	cmp	r3, #4
 800282c:	d00a      	beq.n	8002844 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	6919      	ldr	r1, [r3, #16]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800283e:	f7ff fbf5 	bl	800202c <LL_ADC_SetOffset>
 8002842:	e17b      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2100      	movs	r1, #0
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fc12 	bl	8002074 <LL_ADC_GetOffsetChannel>
 8002850:	4603      	mov	r3, r0
 8002852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10a      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x148>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2100      	movs	r1, #0
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fc07 	bl	8002074 <LL_ADC_GetOffsetChannel>
 8002866:	4603      	mov	r3, r0
 8002868:	0e9b      	lsrs	r3, r3, #26
 800286a:	f003 021f 	and.w	r2, r3, #31
 800286e:	e01e      	b.n	80028ae <HAL_ADC_ConfigChannel+0x186>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2100      	movs	r1, #0
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff fbfc 	bl	8002074 <LL_ADC_GetOffsetChannel>
 800287c:	4603      	mov	r3, r0
 800287e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002886:	fa93 f3a3 	rbit	r3, r3
 800288a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800288e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002892:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002896:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800289e:	2320      	movs	r3, #32
 80028a0:	e004      	b.n	80028ac <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80028a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d105      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x19e>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	0e9b      	lsrs	r3, r3, #26
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	e018      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x1d0>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80028da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80028e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80028ea:	2320      	movs	r3, #32
 80028ec:	e004      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80028ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d106      	bne.n	800290a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2200      	movs	r2, #0
 8002902:	2100      	movs	r1, #0
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fbcb 	bl	80020a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2101      	movs	r1, #1
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff fbaf 	bl	8002074 <LL_ADC_GetOffsetChannel>
 8002916:	4603      	mov	r3, r0
 8002918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10a      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x20e>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2101      	movs	r1, #1
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff fba4 	bl	8002074 <LL_ADC_GetOffsetChannel>
 800292c:	4603      	mov	r3, r0
 800292e:	0e9b      	lsrs	r3, r3, #26
 8002930:	f003 021f 	and.w	r2, r3, #31
 8002934:	e01e      	b.n	8002974 <HAL_ADC_ConfigChannel+0x24c>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2101      	movs	r1, #1
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fb99 	bl	8002074 <LL_ADC_GetOffsetChannel>
 8002942:	4603      	mov	r3, r0
 8002944:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800294c:	fa93 f3a3 	rbit	r3, r3
 8002950:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002954:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002958:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800295c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002964:	2320      	movs	r3, #32
 8002966:	e004      	b.n	8002972 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002968:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800296c:	fab3 f383 	clz	r3, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297c:	2b00      	cmp	r3, #0
 800297e:	d105      	bne.n	800298c <HAL_ADC_ConfigChannel+0x264>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	0e9b      	lsrs	r3, r3, #26
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	e018      	b.n	80029be <HAL_ADC_ConfigChannel+0x296>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002998:	fa93 f3a3 	rbit	r3, r3
 800299c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80029a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80029a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80029b0:	2320      	movs	r3, #32
 80029b2:	e004      	b.n	80029be <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80029b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029b8:	fab3 f383 	clz	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029be:	429a      	cmp	r2, r3
 80029c0:	d106      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2200      	movs	r2, #0
 80029c8:	2101      	movs	r1, #1
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fb68 	bl	80020a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2102      	movs	r1, #2
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff fb4c 	bl	8002074 <LL_ADC_GetOffsetChannel>
 80029dc:	4603      	mov	r3, r0
 80029de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10a      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x2d4>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2102      	movs	r1, #2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff fb41 	bl	8002074 <LL_ADC_GetOffsetChannel>
 80029f2:	4603      	mov	r3, r0
 80029f4:	0e9b      	lsrs	r3, r3, #26
 80029f6:	f003 021f 	and.w	r2, r3, #31
 80029fa:	e01e      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x312>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2102      	movs	r1, #2
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff fb36 	bl	8002074 <LL_ADC_GetOffsetChannel>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002a1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002a22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002a2a:	2320      	movs	r3, #32
 8002a2c:	e004      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002a2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a32:	fab3 f383 	clz	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d105      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x32a>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	0e9b      	lsrs	r3, r3, #26
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	e016      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x358>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002a64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002a6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002a72:	2320      	movs	r3, #32
 8002a74:	e004      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002a76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d106      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2102      	movs	r1, #2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fb07 	bl	80020a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2103      	movs	r1, #3
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff faeb 	bl	8002074 <LL_ADC_GetOffsetChannel>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10a      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x396>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2103      	movs	r1, #3
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff fae0 	bl	8002074 <LL_ADC_GetOffsetChannel>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	0e9b      	lsrs	r3, r3, #26
 8002ab8:	f003 021f 	and.w	r2, r3, #31
 8002abc:	e017      	b.n	8002aee <HAL_ADC_ConfigChannel+0x3c6>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2103      	movs	r1, #3
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff fad5 	bl	8002074 <LL_ADC_GetOffsetChannel>
 8002aca:	4603      	mov	r3, r0
 8002acc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002ad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ad8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002ada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002ae0:	2320      	movs	r3, #32
 8002ae2:	e003      	b.n	8002aec <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002ae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d105      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x3de>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	0e9b      	lsrs	r3, r3, #26
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	e011      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x402>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002b14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b16:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002b1e:	2320      	movs	r3, #32
 8002b20:	e003      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b24:	fab3 f383 	clz	r3, r3
 8002b28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d106      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2200      	movs	r2, #0
 8002b34:	2103      	movs	r1, #3
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff fab2 	bl	80020a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fbb9 	bl	80022b8 <LL_ADC_IsEnabled>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f040 813f 	bne.w	8002dcc <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6819      	ldr	r1, [r3, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f7ff fb26 	bl	80021ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4a8e      	ldr	r2, [pc, #568]	; (8002da0 <HAL_ADC_ConfigChannel+0x678>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	f040 8130 	bne.w	8002dcc <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10b      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x46c>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	0e9b      	lsrs	r3, r3, #26
 8002b82:	3301      	adds	r3, #1
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	2b09      	cmp	r3, #9
 8002b8a:	bf94      	ite	ls
 8002b8c:	2301      	movls	r3, #1
 8002b8e:	2300      	movhi	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	e019      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x4a0>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ba4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ba6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002bac:	2320      	movs	r3, #32
 8002bae:	e003      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002bb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bb2:	fab3 f383 	clz	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	3301      	adds	r3, #1
 8002bba:	f003 031f 	and.w	r3, r3, #31
 8002bbe:	2b09      	cmp	r3, #9
 8002bc0:	bf94      	ite	ls
 8002bc2:	2301      	movls	r3, #1
 8002bc4:	2300      	movhi	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d079      	beq.n	8002cc0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d107      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x4c0>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	0e9b      	lsrs	r3, r3, #26
 8002bde:	3301      	adds	r3, #1
 8002be0:	069b      	lsls	r3, r3, #26
 8002be2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002be6:	e015      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x4ec>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002c00:	2320      	movs	r3, #32
 8002c02:	e003      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	069b      	lsls	r3, r3, #26
 8002c10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d109      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x50c>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	0e9b      	lsrs	r3, r3, #26
 8002c26:	3301      	adds	r3, #1
 8002c28:	f003 031f 	and.w	r3, r3, #31
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c32:	e017      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x53c>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c3c:	fa93 f3a3 	rbit	r3, r3
 8002c40:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c44:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002c4c:	2320      	movs	r3, #32
 8002c4e:	e003      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	3301      	adds	r3, #1
 8002c5a:	f003 031f 	and.w	r3, r3, #31
 8002c5e:	2101      	movs	r1, #1
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	ea42 0103 	orr.w	r1, r2, r3
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10a      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x562>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	0e9b      	lsrs	r3, r3, #26
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	f003 021f 	and.w	r2, r3, #31
 8002c80:	4613      	mov	r3, r2
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4413      	add	r3, r2
 8002c86:	051b      	lsls	r3, r3, #20
 8002c88:	e018      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x594>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002ca2:	2320      	movs	r3, #32
 8002ca4:	e003      	b.n	8002cae <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca8:	fab3 f383 	clz	r3, r3
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	f003 021f 	and.w	r2, r3, #31
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	e080      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d107      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x5b4>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	0e9b      	lsrs	r3, r3, #26
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	069b      	lsls	r3, r3, #26
 8002cd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cda:	e015      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x5e0>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cec:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002cf4:	2320      	movs	r3, #32
 8002cf6:	e003      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfa:	fab3 f383 	clz	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	3301      	adds	r3, #1
 8002d02:	069b      	lsls	r3, r3, #26
 8002d04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d109      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x600>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	0e9b      	lsrs	r3, r3, #26
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	2101      	movs	r1, #1
 8002d22:	fa01 f303 	lsl.w	r3, r1, r3
 8002d26:	e017      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x630>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	fa93 f3a3 	rbit	r3, r3
 8002d34:	61fb      	str	r3, [r7, #28]
  return result;
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002d40:	2320      	movs	r3, #32
 8002d42:	e003      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	f003 031f 	and.w	r3, r3, #31
 8002d52:	2101      	movs	r1, #1
 8002d54:	fa01 f303 	lsl.w	r3, r1, r3
 8002d58:	ea42 0103 	orr.w	r1, r2, r3
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10d      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x65c>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	0e9b      	lsrs	r3, r3, #26
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f003 021f 	and.w	r2, r3, #31
 8002d74:	4613      	mov	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4413      	add	r3, r2
 8002d7a:	3b1e      	subs	r3, #30
 8002d7c:	051b      	lsls	r3, r3, #20
 8002d7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d82:	e01d      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x698>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	fa93 f3a3 	rbit	r3, r3
 8002d90:	613b      	str	r3, [r7, #16]
  return result;
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d103      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002d9c:	2320      	movs	r3, #32
 8002d9e:	e005      	b.n	8002dac <HAL_ADC_ConfigChannel+0x684>
 8002da0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	fab3 f383 	clz	r3, r3
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	3301      	adds	r3, #1
 8002dae:	f003 021f 	and.w	r2, r3, #31
 8002db2:	4613      	mov	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4413      	add	r3, r2
 8002db8:	3b1e      	subs	r3, #30
 8002dba:	051b      	lsls	r3, r3, #20
 8002dbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	6892      	ldr	r2, [r2, #8]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	f7ff f9c4 	bl	8002154 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	4b3d      	ldr	r3, [pc, #244]	; (8002ec8 <HAL_ADC_ConfigChannel+0x7a0>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d06c      	beq.n	8002eb2 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dd8:	483c      	ldr	r0, [pc, #240]	; (8002ecc <HAL_ADC_ConfigChannel+0x7a4>)
 8002dda:	f7ff f919 	bl	8002010 <LL_ADC_GetCommonPathInternalCh>
 8002dde:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a3a      	ldr	r2, [pc, #232]	; (8002ed0 <HAL_ADC_ConfigChannel+0x7a8>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d127      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002dec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002df0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d121      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a35      	ldr	r2, [pc, #212]	; (8002ed4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d157      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	482f      	ldr	r0, [pc, #188]	; (8002ecc <HAL_ADC_ConfigChannel+0x7a4>)
 8002e0e:	f7ff f8ec 	bl	8001fea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e12:	4b31      	ldr	r3, [pc, #196]	; (8002ed8 <HAL_ADC_ConfigChannel+0x7b0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	099b      	lsrs	r3, r3, #6
 8002e18:	4a30      	ldr	r2, [pc, #192]	; (8002edc <HAL_ADC_ConfigChannel+0x7b4>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	099b      	lsrs	r3, r3, #6
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	4613      	mov	r3, r2
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e2c:	e002      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f9      	bne.n	8002e2e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e3a:	e03a      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a27      	ldr	r2, [pc, #156]	; (8002ee0 <HAL_ADC_ConfigChannel+0x7b8>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d113      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x746>
 8002e46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10d      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a1f      	ldr	r2, [pc, #124]	; (8002ed4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d12a      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e64:	4619      	mov	r1, r3
 8002e66:	4819      	ldr	r0, [pc, #100]	; (8002ecc <HAL_ADC_ConfigChannel+0x7a4>)
 8002e68:	f7ff f8bf 	bl	8001fea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e6c:	e021      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a1c      	ldr	r2, [pc, #112]	; (8002ee4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d11c      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d116      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a12      	ldr	r2, [pc, #72]	; (8002ed4 <HAL_ADC_ConfigChannel+0x7ac>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d111      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e96:	4619      	mov	r1, r3
 8002e98:	480c      	ldr	r0, [pc, #48]	; (8002ecc <HAL_ADC_ConfigChannel+0x7a4>)
 8002e9a:	f7ff f8a6 	bl	8001fea <LL_ADC_SetCommonPathInternalCh>
 8002e9e:	e008      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea4:	f043 0220 	orr.w	r2, r3, #32
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002eba:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	37d8      	adds	r7, #216	; 0xd8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	80080000 	.word	0x80080000
 8002ecc:	50040300 	.word	0x50040300
 8002ed0:	c7520000 	.word	0xc7520000
 8002ed4:	50040000 	.word	0x50040000
 8002ed8:	20000008 	.word	0x20000008
 8002edc:	053e2d63 	.word	0x053e2d63
 8002ee0:	cb840000 	.word	0xcb840000
 8002ee4:	80000001 	.word	0x80000001

08002ee8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff f9df 	bl	80022b8 <LL_ADC_IsEnabled>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d14d      	bne.n	8002f9c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	4b28      	ldr	r3, [pc, #160]	; (8002fa8 <ADC_Enable+0xc0>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00d      	beq.n	8002f2a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f12:	f043 0210 	orr.w	r2, r3, #16
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f1e:	f043 0201 	orr.w	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e039      	b.n	8002f9e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff f9ae 	bl	8002290 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002f34:	f7ff f816 	bl	8001f64 <HAL_GetTick>
 8002f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f3a:	e028      	b.n	8002f8e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff f9b9 	bl	80022b8 <LL_ADC_IsEnabled>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d104      	bne.n	8002f56 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff f99d 	bl	8002290 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f56:	f7ff f805 	bl	8001f64 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d914      	bls.n	8002f8e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d00d      	beq.n	8002f8e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f76:	f043 0210 	orr.w	r2, r3, #16
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f82:	f043 0201 	orr.w	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e007      	b.n	8002f9e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d1cf      	bne.n	8002f3c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	8000003f 	.word	0x8000003f

08002fac <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d14b      	bne.n	800305e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0308 	and.w	r3, r3, #8
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d021      	beq.n	8003024 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff f876 	bl	80020d6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d032      	beq.n	8003056 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d12b      	bne.n	8003056 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003002:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d11f      	bne.n	8003056 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301a:	f043 0201 	orr.w	r2, r3, #1
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	655a      	str	r2, [r3, #84]	; 0x54
 8003022:	e018      	b.n	8003056 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d111      	bne.n	8003056 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003036:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d105      	bne.n	8003056 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304e:	f043 0201 	orr.w	r2, r3, #1
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f7ff fb48 	bl	80026ec <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800305c:	e00e      	b.n	800307c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f7ff fb52 	bl	8002714 <HAL_ADC_ErrorCallback>
}
 8003070:	e004      	b.n	800307c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	4798      	blx	r3
}
 800307c:	bf00      	nop
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f7ff fb34 	bl	8002700 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003098:	bf00      	nop
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ac:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030be:	f043 0204 	orr.w	r2, r3, #4
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f7ff fb24 	bl	8002714 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030cc:	bf00      	nop
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030e4:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <__NVIC_SetPriorityGrouping+0x44>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030f0:	4013      	ands	r3, r2
 80030f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003106:	4a04      	ldr	r2, [pc, #16]	; (8003118 <__NVIC_SetPriorityGrouping+0x44>)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	60d3      	str	r3, [r2, #12]
}
 800310c:	bf00      	nop
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	e000ed00 	.word	0xe000ed00

0800311c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003120:	4b04      	ldr	r3, [pc, #16]	; (8003134 <__NVIC_GetPriorityGrouping+0x18>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	0a1b      	lsrs	r3, r3, #8
 8003126:	f003 0307 	and.w	r3, r3, #7
}
 800312a:	4618      	mov	r0, r3
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	e000ed00 	.word	0xe000ed00

08003138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003146:	2b00      	cmp	r3, #0
 8003148:	db0b      	blt.n	8003162 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	f003 021f 	and.w	r2, r3, #31
 8003150:	4907      	ldr	r1, [pc, #28]	; (8003170 <__NVIC_EnableIRQ+0x38>)
 8003152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003156:	095b      	lsrs	r3, r3, #5
 8003158:	2001      	movs	r0, #1
 800315a:	fa00 f202 	lsl.w	r2, r0, r2
 800315e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	e000e100 	.word	0xe000e100

08003174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	6039      	str	r1, [r7, #0]
 800317e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003184:	2b00      	cmp	r3, #0
 8003186:	db0a      	blt.n	800319e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	b2da      	uxtb	r2, r3
 800318c:	490c      	ldr	r1, [pc, #48]	; (80031c0 <__NVIC_SetPriority+0x4c>)
 800318e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003192:	0112      	lsls	r2, r2, #4
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	440b      	add	r3, r1
 8003198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800319c:	e00a      	b.n	80031b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	4908      	ldr	r1, [pc, #32]	; (80031c4 <__NVIC_SetPriority+0x50>)
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	3b04      	subs	r3, #4
 80031ac:	0112      	lsls	r2, r2, #4
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	440b      	add	r3, r1
 80031b2:	761a      	strb	r2, [r3, #24]
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	e000e100 	.word	0xe000e100
 80031c4:	e000ed00 	.word	0xe000ed00

080031c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b089      	sub	sp, #36	; 0x24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f1c3 0307 	rsb	r3, r3, #7
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	bf28      	it	cs
 80031e6:	2304      	movcs	r3, #4
 80031e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	3304      	adds	r3, #4
 80031ee:	2b06      	cmp	r3, #6
 80031f0:	d902      	bls.n	80031f8 <NVIC_EncodePriority+0x30>
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	3b03      	subs	r3, #3
 80031f6:	e000      	b.n	80031fa <NVIC_EncodePriority+0x32>
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43da      	mvns	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	401a      	ands	r2, r3
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003210:	f04f 31ff 	mov.w	r1, #4294967295
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	fa01 f303 	lsl.w	r3, r1, r3
 800321a:	43d9      	mvns	r1, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003220:	4313      	orrs	r3, r2
         );
}
 8003222:	4618      	mov	r0, r3
 8003224:	3724      	adds	r7, #36	; 0x24
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
	...

08003230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3b01      	subs	r3, #1
 800323c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003240:	d301      	bcc.n	8003246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003242:	2301      	movs	r3, #1
 8003244:	e00f      	b.n	8003266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003246:	4a0a      	ldr	r2, [pc, #40]	; (8003270 <SysTick_Config+0x40>)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3b01      	subs	r3, #1
 800324c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800324e:	210f      	movs	r1, #15
 8003250:	f04f 30ff 	mov.w	r0, #4294967295
 8003254:	f7ff ff8e 	bl	8003174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003258:	4b05      	ldr	r3, [pc, #20]	; (8003270 <SysTick_Config+0x40>)
 800325a:	2200      	movs	r2, #0
 800325c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800325e:	4b04      	ldr	r3, [pc, #16]	; (8003270 <SysTick_Config+0x40>)
 8003260:	2207      	movs	r2, #7
 8003262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	e000e010 	.word	0xe000e010

08003274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7ff ff29 	bl	80030d4 <__NVIC_SetPriorityGrouping>
}
 8003282:	bf00      	nop
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b086      	sub	sp, #24
 800328e:	af00      	add	r7, sp, #0
 8003290:	4603      	mov	r3, r0
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
 8003296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800329c:	f7ff ff3e 	bl	800311c <__NVIC_GetPriorityGrouping>
 80032a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	68b9      	ldr	r1, [r7, #8]
 80032a6:	6978      	ldr	r0, [r7, #20]
 80032a8:	f7ff ff8e 	bl	80031c8 <NVIC_EncodePriority>
 80032ac:	4602      	mov	r2, r0
 80032ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b2:	4611      	mov	r1, r2
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ff5d 	bl	8003174 <__NVIC_SetPriority>
}
 80032ba:	bf00      	nop
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	4603      	mov	r3, r0
 80032ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff ff31 	bl	8003138 <__NVIC_EnableIRQ>
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7ff ffa2 	bl	8003230 <SysTick_Config>
 80032ec:	4603      	mov	r3, r0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e098      	b.n	800343c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	4b4d      	ldr	r3, [pc, #308]	; (8003448 <HAL_DMA_Init+0x150>)
 8003312:	429a      	cmp	r2, r3
 8003314:	d80f      	bhi.n	8003336 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	4b4b      	ldr	r3, [pc, #300]	; (800344c <HAL_DMA_Init+0x154>)
 800331e:	4413      	add	r3, r2
 8003320:	4a4b      	ldr	r2, [pc, #300]	; (8003450 <HAL_DMA_Init+0x158>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	009a      	lsls	r2, r3, #2
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a48      	ldr	r2, [pc, #288]	; (8003454 <HAL_DMA_Init+0x15c>)
 8003332:	641a      	str	r2, [r3, #64]	; 0x40
 8003334:	e00e      	b.n	8003354 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	4b46      	ldr	r3, [pc, #280]	; (8003458 <HAL_DMA_Init+0x160>)
 800333e:	4413      	add	r3, r2
 8003340:	4a43      	ldr	r2, [pc, #268]	; (8003450 <HAL_DMA_Init+0x158>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	091b      	lsrs	r3, r3, #4
 8003348:	009a      	lsls	r2, r3, #2
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a42      	ldr	r2, [pc, #264]	; (800345c <HAL_DMA_Init+0x164>)
 8003352:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800336a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800336e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003378:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003384:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003390:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033ae:	d039      	beq.n	8003424 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	4a27      	ldr	r2, [pc, #156]	; (8003454 <HAL_DMA_Init+0x15c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d11a      	bne.n	80033f0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80033ba:	4b29      	ldr	r3, [pc, #164]	; (8003460 <HAL_DMA_Init+0x168>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	f003 031c 	and.w	r3, r3, #28
 80033c6:	210f      	movs	r1, #15
 80033c8:	fa01 f303 	lsl.w	r3, r1, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	4924      	ldr	r1, [pc, #144]	; (8003460 <HAL_DMA_Init+0x168>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80033d4:	4b22      	ldr	r3, [pc, #136]	; (8003460 <HAL_DMA_Init+0x168>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6859      	ldr	r1, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e0:	f003 031c 	and.w	r3, r3, #28
 80033e4:	fa01 f303 	lsl.w	r3, r1, r3
 80033e8:	491d      	ldr	r1, [pc, #116]	; (8003460 <HAL_DMA_Init+0x168>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]
 80033ee:	e019      	b.n	8003424 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80033f0:	4b1c      	ldr	r3, [pc, #112]	; (8003464 <HAL_DMA_Init+0x16c>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f8:	f003 031c 	and.w	r3, r3, #28
 80033fc:	210f      	movs	r1, #15
 80033fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	4917      	ldr	r1, [pc, #92]	; (8003464 <HAL_DMA_Init+0x16c>)
 8003406:	4013      	ands	r3, r2
 8003408:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800340a:	4b16      	ldr	r3, [pc, #88]	; (8003464 <HAL_DMA_Init+0x16c>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6859      	ldr	r1, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003416:	f003 031c 	and.w	r3, r3, #28
 800341a:	fa01 f303 	lsl.w	r3, r1, r3
 800341e:	4911      	ldr	r1, [pc, #68]	; (8003464 <HAL_DMA_Init+0x16c>)
 8003420:	4313      	orrs	r3, r2
 8003422:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	40020407 	.word	0x40020407
 800344c:	bffdfff8 	.word	0xbffdfff8
 8003450:	cccccccd 	.word	0xcccccccd
 8003454:	40020000 	.word	0x40020000
 8003458:	bffdfbf8 	.word	0xbffdfbf8
 800345c:	40020400 	.word	0x40020400
 8003460:	400200a8 	.word	0x400200a8
 8003464:	400204a8 	.word	0x400204a8

08003468 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_DMA_Start_IT+0x20>
 8003484:	2302      	movs	r3, #2
 8003486:	e04b      	b.n	8003520 <HAL_DMA_Start_IT+0xb8>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b01      	cmp	r3, #1
 800349a:	d13a      	bne.n	8003512 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0201 	bic.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	68b9      	ldr	r1, [r7, #8]
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 f8e0 	bl	8003686 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d008      	beq.n	80034e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 020e 	orr.w	r2, r2, #14
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	e00f      	b.n	8003500 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0204 	bic.w	r2, r2, #4
 80034ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 020a 	orr.w	r2, r2, #10
 80034fe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0201 	orr.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	e005      	b.n	800351e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800351a:	2302      	movs	r3, #2
 800351c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800351e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003544:	f003 031c 	and.w	r3, r3, #28
 8003548:	2204      	movs	r2, #4
 800354a:	409a      	lsls	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4013      	ands	r3, r2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d026      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x7a>
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b00      	cmp	r3, #0
 800355c:	d021      	beq.n	80035a2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0320 	and.w	r3, r3, #32
 8003568:	2b00      	cmp	r3, #0
 800356a:	d107      	bne.n	800357c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 0204 	bic.w	r2, r2, #4
 800357a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003580:	f003 021c 	and.w	r2, r3, #28
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	2104      	movs	r1, #4
 800358a:	fa01 f202 	lsl.w	r2, r1, r2
 800358e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	2b00      	cmp	r3, #0
 8003596:	d071      	beq.n	800367c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80035a0:	e06c      	b.n	800367c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a6:	f003 031c 	and.w	r3, r3, #28
 80035aa:	2202      	movs	r2, #2
 80035ac:	409a      	lsls	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d02e      	beq.n	8003614 <HAL_DMA_IRQHandler+0xec>
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d029      	beq.n	8003614 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10b      	bne.n	80035e6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 020a 	bic.w	r2, r2, #10
 80035dc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	f003 021c 	and.w	r2, r3, #28
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	2102      	movs	r1, #2
 80035f4:	fa01 f202 	lsl.w	r2, r1, r2
 80035f8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003606:	2b00      	cmp	r3, #0
 8003608:	d038      	beq.n	800367c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003612:	e033      	b.n	800367c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003618:	f003 031c 	and.w	r3, r3, #28
 800361c:	2208      	movs	r2, #8
 800361e:	409a      	lsls	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4013      	ands	r3, r2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d02a      	beq.n	800367e <HAL_DMA_IRQHandler+0x156>
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d025      	beq.n	800367e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 020e 	bic.w	r2, r2, #14
 8003640:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003646:	f003 021c 	and.w	r2, r3, #28
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	2101      	movs	r1, #1
 8003650:	fa01 f202 	lsl.w	r2, r1, r2
 8003654:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003670:	2b00      	cmp	r3, #0
 8003672:	d004      	beq.n	800367e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800367c:	bf00      	nop
 800367e:	bf00      	nop
}
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003686:	b480      	push	{r7}
 8003688:	b085      	sub	sp, #20
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	607a      	str	r2, [r7, #4]
 8003692:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003698:	f003 021c 	and.w	r2, r3, #28
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	2101      	movs	r1, #1
 80036a2:	fa01 f202 	lsl.w	r2, r1, r2
 80036a6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2b10      	cmp	r3, #16
 80036b6:	d108      	bne.n	80036ca <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68ba      	ldr	r2, [r7, #8]
 80036c6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036c8:	e007      	b.n	80036da <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	60da      	str	r2, [r3, #12]
}
 80036da:	bf00      	nop
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
	...

080036e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036f2:	2300      	movs	r3, #0
 80036f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036f6:	e148      	b.n	800398a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	2101      	movs	r1, #1
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	fa01 f303 	lsl.w	r3, r1, r3
 8003704:	4013      	ands	r3, r2
 8003706:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 813a 	beq.w	8003984 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d00b      	beq.n	8003730 <HAL_GPIO_Init+0x48>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b02      	cmp	r3, #2
 800371e:	d007      	beq.n	8003730 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003724:	2b11      	cmp	r3, #17
 8003726:	d003      	beq.n	8003730 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b12      	cmp	r3, #18
 800372e:	d130      	bne.n	8003792 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	2203      	movs	r2, #3
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4013      	ands	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003766:	2201      	movs	r2, #1
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43db      	mvns	r3, r3
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4013      	ands	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	f003 0201 	and.w	r2, r3, #1
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4313      	orrs	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	2203      	movs	r2, #3
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43db      	mvns	r3, r3
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	4013      	ands	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d003      	beq.n	80037d2 <HAL_GPIO_Init+0xea>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b12      	cmp	r3, #18
 80037d0:	d123      	bne.n	800381a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	08da      	lsrs	r2, r3, #3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3208      	adds	r2, #8
 80037da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	220f      	movs	r2, #15
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	43db      	mvns	r3, r3
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4013      	ands	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4313      	orrs	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	08da      	lsrs	r2, r3, #3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3208      	adds	r2, #8
 8003814:	6939      	ldr	r1, [r7, #16]
 8003816:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	2203      	movs	r2, #3
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43db      	mvns	r3, r3
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4013      	ands	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f003 0203 	and.w	r2, r3, #3
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 8094 	beq.w	8003984 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800385c:	4b52      	ldr	r3, [pc, #328]	; (80039a8 <HAL_GPIO_Init+0x2c0>)
 800385e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003860:	4a51      	ldr	r2, [pc, #324]	; (80039a8 <HAL_GPIO_Init+0x2c0>)
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	6613      	str	r3, [r2, #96]	; 0x60
 8003868:	4b4f      	ldr	r3, [pc, #316]	; (80039a8 <HAL_GPIO_Init+0x2c0>)
 800386a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003874:	4a4d      	ldr	r2, [pc, #308]	; (80039ac <HAL_GPIO_Init+0x2c4>)
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	089b      	lsrs	r3, r3, #2
 800387a:	3302      	adds	r3, #2
 800387c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003880:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f003 0303 	and.w	r3, r3, #3
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	220f      	movs	r2, #15
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43db      	mvns	r3, r3
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4013      	ands	r3, r2
 8003896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800389e:	d00d      	beq.n	80038bc <HAL_GPIO_Init+0x1d4>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a43      	ldr	r2, [pc, #268]	; (80039b0 <HAL_GPIO_Init+0x2c8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d007      	beq.n	80038b8 <HAL_GPIO_Init+0x1d0>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a42      	ldr	r2, [pc, #264]	; (80039b4 <HAL_GPIO_Init+0x2cc>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d101      	bne.n	80038b4 <HAL_GPIO_Init+0x1cc>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e004      	b.n	80038be <HAL_GPIO_Init+0x1d6>
 80038b4:	2307      	movs	r3, #7
 80038b6:	e002      	b.n	80038be <HAL_GPIO_Init+0x1d6>
 80038b8:	2301      	movs	r3, #1
 80038ba:	e000      	b.n	80038be <HAL_GPIO_Init+0x1d6>
 80038bc:	2300      	movs	r3, #0
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	f002 0203 	and.w	r2, r2, #3
 80038c4:	0092      	lsls	r2, r2, #2
 80038c6:	4093      	lsls	r3, r2
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038ce:	4937      	ldr	r1, [pc, #220]	; (80039ac <HAL_GPIO_Init+0x2c4>)
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	089b      	lsrs	r3, r3, #2
 80038d4:	3302      	adds	r3, #2
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80038dc:	4b36      	ldr	r3, [pc, #216]	; (80039b8 <HAL_GPIO_Init+0x2d0>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	43db      	mvns	r3, r3
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4013      	ands	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003900:	4a2d      	ldr	r2, [pc, #180]	; (80039b8 <HAL_GPIO_Init+0x2d0>)
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003906:	4b2c      	ldr	r3, [pc, #176]	; (80039b8 <HAL_GPIO_Init+0x2d0>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	43db      	mvns	r3, r3
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4013      	ands	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4313      	orrs	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800392a:	4a23      	ldr	r2, [pc, #140]	; (80039b8 <HAL_GPIO_Init+0x2d0>)
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003930:	4b21      	ldr	r3, [pc, #132]	; (80039b8 <HAL_GPIO_Init+0x2d0>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	43db      	mvns	r3, r3
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	4013      	ands	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003954:	4a18      	ldr	r2, [pc, #96]	; (80039b8 <HAL_GPIO_Init+0x2d0>)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800395a:	4b17      	ldr	r3, [pc, #92]	; (80039b8 <HAL_GPIO_Init+0x2d0>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	43db      	mvns	r3, r3
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4013      	ands	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4313      	orrs	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800397e:	4a0e      	ldr	r2, [pc, #56]	; (80039b8 <HAL_GPIO_Init+0x2d0>)
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	3301      	adds	r3, #1
 8003988:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	fa22 f303 	lsr.w	r3, r2, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	f47f aeaf 	bne.w	80036f8 <HAL_GPIO_Init+0x10>
  }
}
 800399a:	bf00      	nop
 800399c:	bf00      	nop
 800399e:	371c      	adds	r7, #28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40010000 	.word	0x40010000
 80039b0:	48000400 	.word	0x48000400
 80039b4:	48000800 	.word	0x48000800
 80039b8:	40010400 	.word	0x40010400

080039bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	807b      	strh	r3, [r7, #2]
 80039c8:	4613      	mov	r3, r2
 80039ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039cc:	787b      	ldrb	r3, [r7, #1]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039d2:	887a      	ldrh	r2, [r7, #2]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039d8:	e002      	b.n	80039e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039da:	887a      	ldrh	r2, [r7, #2]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039fe:	887a      	ldrh	r2, [r7, #2]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4013      	ands	r3, r2
 8003a04:	041a      	lsls	r2, r3, #16
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	43d9      	mvns	r1, r3
 8003a0a:	887b      	ldrh	r3, [r7, #2]
 8003a0c:	400b      	ands	r3, r1
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	619a      	str	r2, [r3, #24]
}
 8003a14:	bf00      	nop
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e081      	b.n	8003b36 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d106      	bne.n	8003a4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7fe f82a 	bl	8001aa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2224      	movs	r2, #36	; 0x24
 8003a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0201 	bic.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d107      	bne.n	8003a9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	e006      	b.n	8003aa8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003aa6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d104      	bne.n	8003aba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ab8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6812      	ldr	r2, [r2, #0]
 8003ac4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ac8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003acc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003adc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691a      	ldr	r2, [r3, #16]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	ea42 0103 	orr.w	r1, r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	021a      	lsls	r2, r3, #8
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	69d9      	ldr	r1, [r3, #28]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1a      	ldr	r2, [r3, #32]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 0201 	orr.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
	...

08003b40 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af02      	add	r7, sp, #8
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	4608      	mov	r0, r1
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	4603      	mov	r3, r0
 8003b50:	817b      	strh	r3, [r7, #10]
 8003b52:	460b      	mov	r3, r1
 8003b54:	813b      	strh	r3, [r7, #8]
 8003b56:	4613      	mov	r3, r2
 8003b58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b20      	cmp	r3, #32
 8003b64:	f040 80f9 	bne.w	8003d5a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <HAL_I2C_Mem_Write+0x34>
 8003b6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d105      	bne.n	8003b80 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b7a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0ed      	b.n	8003d5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <HAL_I2C_Mem_Write+0x4e>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	e0e6      	b.n	8003d5c <HAL_I2C_Mem_Write+0x21c>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b96:	f7fe f9e5 	bl	8001f64 <HAL_GetTick>
 8003b9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	2319      	movs	r3, #25
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 f955 	bl	8003e58 <I2C_WaitOnFlagUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e0d1      	b.n	8003d5c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2221      	movs	r2, #33	; 0x21
 8003bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2240      	movs	r2, #64	; 0x40
 8003bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a3a      	ldr	r2, [r7, #32]
 8003bd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003be0:	88f8      	ldrh	r0, [r7, #6]
 8003be2:	893a      	ldrh	r2, [r7, #8]
 8003be4:	8979      	ldrh	r1, [r7, #10]
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	9301      	str	r3, [sp, #4]
 8003bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	4603      	mov	r3, r0
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 f8b9 	bl	8003d68 <I2C_RequestMemoryWrite>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e0a9      	b.n	8003d5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	2bff      	cmp	r3, #255	; 0xff
 8003c10:	d90e      	bls.n	8003c30 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	22ff      	movs	r2, #255	; 0xff
 8003c16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1c:	b2da      	uxtb	r2, r3
 8003c1e:	8979      	ldrh	r1, [r7, #10]
 8003c20:	2300      	movs	r3, #0
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f000 fa37 	bl	800409c <I2C_TransferConfig>
 8003c2e:	e00f      	b.n	8003c50 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	8979      	ldrh	r1, [r7, #10]
 8003c42:	2300      	movs	r3, #0
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 fa26 	bl	800409c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 f93f 	bl	8003ed8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e07b      	b.n	8003d5c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	781a      	ldrb	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d034      	beq.n	8003d08 <HAL_I2C_Mem_Write+0x1c8>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d130      	bne.n	8003d08 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cac:	2200      	movs	r2, #0
 8003cae:	2180      	movs	r1, #128	; 0x80
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 f8d1 	bl	8003e58 <I2C_WaitOnFlagUntilTimeout>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e04d      	b.n	8003d5c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2bff      	cmp	r3, #255	; 0xff
 8003cc8:	d90e      	bls.n	8003ce8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	22ff      	movs	r2, #255	; 0xff
 8003cce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	8979      	ldrh	r1, [r7, #10]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 f9db 	bl	800409c <I2C_TransferConfig>
 8003ce6:	e00f      	b.n	8003d08 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	8979      	ldrh	r1, [r7, #10]
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 f9ca 	bl	800409c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d19e      	bne.n	8003c50 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f91e 	bl	8003f58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e01a      	b.n	8003d5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6859      	ldr	r1, [r3, #4]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	4b0a      	ldr	r3, [pc, #40]	; (8003d64 <HAL_I2C_Mem_Write+0x224>)
 8003d3a:	400b      	ands	r3, r1
 8003d3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	e000      	b.n	8003d5c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003d5a:	2302      	movs	r3, #2
  }
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	fe00e800 	.word	0xfe00e800

08003d68 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af02      	add	r7, sp, #8
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	4608      	mov	r0, r1
 8003d72:	4611      	mov	r1, r2
 8003d74:	461a      	mov	r2, r3
 8003d76:	4603      	mov	r3, r0
 8003d78:	817b      	strh	r3, [r7, #10]
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	813b      	strh	r3, [r7, #8]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d82:	88fb      	ldrh	r3, [r7, #6]
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	8979      	ldrh	r1, [r7, #10]
 8003d88:	4b20      	ldr	r3, [pc, #128]	; (8003e0c <I2C_RequestMemoryWrite+0xa4>)
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d90:	68f8      	ldr	r0, [r7, #12]
 8003d92:	f000 f983 	bl	800409c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	69b9      	ldr	r1, [r7, #24]
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 f89c 	bl	8003ed8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e02c      	b.n	8003e04 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003daa:	88fb      	ldrh	r3, [r7, #6]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d105      	bne.n	8003dbc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003db0:	893b      	ldrh	r3, [r7, #8]
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	629a      	str	r2, [r3, #40]	; 0x28
 8003dba:	e015      	b.n	8003de8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003dbc:	893b      	ldrh	r3, [r7, #8]
 8003dbe:	0a1b      	lsrs	r3, r3, #8
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	69b9      	ldr	r1, [r7, #24]
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 f882 	bl	8003ed8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e012      	b.n	8003e04 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dde:	893b      	ldrh	r3, [r7, #8]
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	2200      	movs	r2, #0
 8003df0:	2180      	movs	r1, #128	; 0x80
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 f830 	bl	8003e58 <I2C_WaitOnFlagUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	80002000 	.word	0x80002000

08003e10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d103      	bne.n	8003e2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d007      	beq.n	8003e4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699a      	ldr	r2, [r3, #24]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0201 	orr.w	r2, r2, #1
 8003e4a:	619a      	str	r2, [r3, #24]
  }
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	4613      	mov	r3, r2
 8003e66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e68:	e022      	b.n	8003eb0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e70:	d01e      	beq.n	8003eb0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e72:	f7fe f877 	bl	8001f64 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d302      	bcc.n	8003e88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d113      	bne.n	8003eb0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8c:	f043 0220 	orr.w	r2, r3, #32
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e00f      	b.n	8003ed0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	bf0c      	ite	eq
 8003ec0:	2301      	moveq	r3, #1
 8003ec2:	2300      	movne	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	79fb      	ldrb	r3, [r7, #7]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d0cd      	beq.n	8003e6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ee4:	e02c      	b.n	8003f40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	68b9      	ldr	r1, [r7, #8]
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 f870 	bl	8003fd0 <I2C_IsAcknowledgeFailed>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e02a      	b.n	8003f50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f00:	d01e      	beq.n	8003f40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f02:	f7fe f82f 	bl	8001f64 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d302      	bcc.n	8003f18 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d113      	bne.n	8003f40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1c:	f043 0220 	orr.w	r2, r3, #32
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2220      	movs	r2, #32
 8003f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e007      	b.n	8003f50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d1cb      	bne.n	8003ee6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f64:	e028      	b.n	8003fb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 f830 	bl	8003fd0 <I2C_IsAcknowledgeFailed>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e026      	b.n	8003fc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f7a:	f7fd fff3 	bl	8001f64 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d302      	bcc.n	8003f90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d113      	bne.n	8003fb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f94:	f043 0220 	orr.w	r2, r3, #32
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e007      	b.n	8003fc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f003 0320 	and.w	r3, r3, #32
 8003fc2:	2b20      	cmp	r3, #32
 8003fc4:	d1cf      	bne.n	8003f66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	f003 0310 	and.w	r3, r3, #16
 8003fe6:	2b10      	cmp	r3, #16
 8003fe8:	d151      	bne.n	800408e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fea:	e022      	b.n	8004032 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff2:	d01e      	beq.n	8004032 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff4:	f7fd ffb6 	bl	8001f64 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	429a      	cmp	r2, r3
 8004002:	d302      	bcc.n	800400a <I2C_IsAcknowledgeFailed+0x3a>
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d113      	bne.n	8004032 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400e:	f043 0220 	orr.w	r2, r3, #32
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2220      	movs	r2, #32
 800401a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e02e      	b.n	8004090 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b20      	cmp	r3, #32
 800403e:	d1d5      	bne.n	8003fec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2210      	movs	r2, #16
 8004046:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2220      	movs	r2, #32
 800404e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f7ff fedd 	bl	8003e10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6859      	ldr	r1, [r3, #4]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <I2C_IsAcknowledgeFailed+0xc8>)
 8004062:	400b      	ands	r3, r1
 8004064:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406a:	f043 0204 	orr.w	r2, r3, #4
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e000      	b.n	8004090 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	fe00e800 	.word	0xfe00e800

0800409c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	607b      	str	r3, [r7, #4]
 80040a6:	460b      	mov	r3, r1
 80040a8:	817b      	strh	r3, [r7, #10]
 80040aa:	4613      	mov	r3, r2
 80040ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	0d5b      	lsrs	r3, r3, #21
 80040b8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80040bc:	4b0d      	ldr	r3, [pc, #52]	; (80040f4 <I2C_TransferConfig+0x58>)
 80040be:	430b      	orrs	r3, r1
 80040c0:	43db      	mvns	r3, r3
 80040c2:	ea02 0103 	and.w	r1, r2, r3
 80040c6:	897b      	ldrh	r3, [r7, #10]
 80040c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80040cc:	7a7b      	ldrb	r3, [r7, #9]
 80040ce:	041b      	lsls	r3, r3, #16
 80040d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040d4:	431a      	orrs	r2, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	431a      	orrs	r2, r3
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	431a      	orrs	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80040e6:	bf00      	nop
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	03ff63ff 	.word	0x03ff63ff

080040f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b20      	cmp	r3, #32
 800410c:	d138      	bne.n	8004180 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004118:	2302      	movs	r3, #2
 800411a:	e032      	b.n	8004182 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2224      	movs	r2, #36	; 0x24
 8004128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 0201 	bic.w	r2, r2, #1
 800413a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800414a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6819      	ldr	r1, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800417c:	2300      	movs	r3, #0
 800417e:	e000      	b.n	8004182 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004180:	2302      	movs	r3, #2
  }
}
 8004182:	4618      	mov	r0, r3
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800418e:	b480      	push	{r7}
 8004190:	b085      	sub	sp, #20
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b20      	cmp	r3, #32
 80041a2:	d139      	bne.n	8004218 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e033      	b.n	800421a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2224      	movs	r2, #36	; 0x24
 80041be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0201 	bic.w	r2, r2, #1
 80041d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	021b      	lsls	r3, r3, #8
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0201 	orr.w	r2, r2, #1
 8004202:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004214:	2300      	movs	r3, #0
 8004216:	e000      	b.n	800421a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004218:	2302      	movs	r3, #2
  }
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
	...

08004228 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800422c:	4b04      	ldr	r3, [pc, #16]	; (8004240 <HAL_PWREx_GetVoltageRange+0x18>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004234:	4618      	mov	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40007000 	.word	0x40007000

08004244 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004252:	d130      	bne.n	80042b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004254:	4b23      	ldr	r3, [pc, #140]	; (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800425c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004260:	d038      	beq.n	80042d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004262:	4b20      	ldr	r3, [pc, #128]	; (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800426a:	4a1e      	ldr	r2, [pc, #120]	; (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800426c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004270:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004272:	4b1d      	ldr	r3, [pc, #116]	; (80042e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2232      	movs	r2, #50	; 0x32
 8004278:	fb02 f303 	mul.w	r3, r2, r3
 800427c:	4a1b      	ldr	r2, [pc, #108]	; (80042ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	0c9b      	lsrs	r3, r3, #18
 8004284:	3301      	adds	r3, #1
 8004286:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004288:	e002      	b.n	8004290 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3b01      	subs	r3, #1
 800428e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004290:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800429c:	d102      	bne.n	80042a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1f2      	bne.n	800428a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042a4:	4b0f      	ldr	r3, [pc, #60]	; (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042b0:	d110      	bne.n	80042d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e00f      	b.n	80042d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80042b6:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80042be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042c2:	d007      	beq.n	80042d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042c4:	4b07      	ldr	r3, [pc, #28]	; (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042cc:	4a05      	ldr	r2, [pc, #20]	; (80042e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40007000 	.word	0x40007000
 80042e8:	20000008 	.word	0x20000008
 80042ec:	431bde83 	.word	0x431bde83

080042f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d102      	bne.n	8004304 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	f000 bc11 	b.w	8004b26 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004304:	4ba0      	ldr	r3, [pc, #640]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 030c 	and.w	r3, r3, #12
 800430c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800430e:	4b9e      	ldr	r3, [pc, #632]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80e4 	beq.w	80044ee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d007      	beq.n	800433c <HAL_RCC_OscConfig+0x4c>
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	2b0c      	cmp	r3, #12
 8004330:	f040 808b 	bne.w	800444a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	2b01      	cmp	r3, #1
 8004338:	f040 8087 	bne.w	800444a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800433c:	4b92      	ldr	r3, [pc, #584]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d005      	beq.n	8004354 <HAL_RCC_OscConfig+0x64>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e3e8      	b.n	8004b26 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1a      	ldr	r2, [r3, #32]
 8004358:	4b8b      	ldr	r3, [pc, #556]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b00      	cmp	r3, #0
 8004362:	d004      	beq.n	800436e <HAL_RCC_OscConfig+0x7e>
 8004364:	4b88      	ldr	r3, [pc, #544]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800436c:	e005      	b.n	800437a <HAL_RCC_OscConfig+0x8a>
 800436e:	4b86      	ldr	r3, [pc, #536]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 8004370:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004374:	091b      	lsrs	r3, r3, #4
 8004376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800437a:	4293      	cmp	r3, r2
 800437c:	d223      	bcs.n	80043c6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fd7a 	bl	8004e7c <RCC_SetFlashLatencyFromMSIRange>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e3c9      	b.n	8004b26 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004392:	4b7d      	ldr	r3, [pc, #500]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a7c      	ldr	r2, [pc, #496]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 8004398:	f043 0308 	orr.w	r3, r3, #8
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	4b7a      	ldr	r3, [pc, #488]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	4977      	ldr	r1, [pc, #476]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043b0:	4b75      	ldr	r3, [pc, #468]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	4972      	ldr	r1, [pc, #456]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	604b      	str	r3, [r1, #4]
 80043c4:	e025      	b.n	8004412 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043c6:	4b70      	ldr	r3, [pc, #448]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a6f      	ldr	r2, [pc, #444]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 80043cc:	f043 0308 	orr.w	r3, r3, #8
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	4b6d      	ldr	r3, [pc, #436]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	496a      	ldr	r1, [pc, #424]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043e4:	4b68      	ldr	r3, [pc, #416]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	021b      	lsls	r3, r3, #8
 80043f2:	4965      	ldr	r1, [pc, #404]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d109      	bne.n	8004412 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fd3a 	bl	8004e7c <RCC_SetFlashLatencyFromMSIRange>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e389      	b.n	8004b26 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004412:	f000 fc6f 	bl	8004cf4 <HAL_RCC_GetSysClockFreq>
 8004416:	4602      	mov	r2, r0
 8004418:	4b5b      	ldr	r3, [pc, #364]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	091b      	lsrs	r3, r3, #4
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	495a      	ldr	r1, [pc, #360]	; (800458c <HAL_RCC_OscConfig+0x29c>)
 8004424:	5ccb      	ldrb	r3, [r1, r3]
 8004426:	f003 031f 	and.w	r3, r3, #31
 800442a:	fa22 f303 	lsr.w	r3, r2, r3
 800442e:	4a58      	ldr	r2, [pc, #352]	; (8004590 <HAL_RCC_OscConfig+0x2a0>)
 8004430:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004432:	4b58      	ldr	r3, [pc, #352]	; (8004594 <HAL_RCC_OscConfig+0x2a4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fd fd44 	bl	8001ec4 <HAL_InitTick>
 800443c:	4603      	mov	r3, r0
 800443e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004440:	7bfb      	ldrb	r3, [r7, #15]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d052      	beq.n	80044ec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	e36d      	b.n	8004b26 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d032      	beq.n	80044b8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004452:	4b4d      	ldr	r3, [pc, #308]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a4c      	ldr	r2, [pc, #304]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 8004458:	f043 0301 	orr.w	r3, r3, #1
 800445c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800445e:	f7fd fd81 	bl	8001f64 <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004466:	f7fd fd7d 	bl	8001f64 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e356      	b.n	8004b26 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004478:	4b43      	ldr	r3, [pc, #268]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0f0      	beq.n	8004466 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004484:	4b40      	ldr	r3, [pc, #256]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a3f      	ldr	r2, [pc, #252]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 800448a:	f043 0308 	orr.w	r3, r3, #8
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	4b3d      	ldr	r3, [pc, #244]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	493a      	ldr	r1, [pc, #232]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044a2:	4b39      	ldr	r3, [pc, #228]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	021b      	lsls	r3, r3, #8
 80044b0:	4935      	ldr	r1, [pc, #212]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	604b      	str	r3, [r1, #4]
 80044b6:	e01a      	b.n	80044ee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80044b8:	4b33      	ldr	r3, [pc, #204]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a32      	ldr	r2, [pc, #200]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 80044be:	f023 0301 	bic.w	r3, r3, #1
 80044c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044c4:	f7fd fd4e 	bl	8001f64 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044cc:	f7fd fd4a 	bl	8001f64 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e323      	b.n	8004b26 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044de:	4b2a      	ldr	r3, [pc, #168]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1f0      	bne.n	80044cc <HAL_RCC_OscConfig+0x1dc>
 80044ea:	e000      	b.n	80044ee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d073      	beq.n	80045e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	2b08      	cmp	r3, #8
 80044fe:	d005      	beq.n	800450c <HAL_RCC_OscConfig+0x21c>
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	2b0c      	cmp	r3, #12
 8004504:	d10e      	bne.n	8004524 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2b03      	cmp	r3, #3
 800450a:	d10b      	bne.n	8004524 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800450c:	4b1e      	ldr	r3, [pc, #120]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d063      	beq.n	80045e0 <HAL_RCC_OscConfig+0x2f0>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d15f      	bne.n	80045e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e300      	b.n	8004b26 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800452c:	d106      	bne.n	800453c <HAL_RCC_OscConfig+0x24c>
 800452e:	4b16      	ldr	r3, [pc, #88]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a15      	ldr	r2, [pc, #84]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 8004534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	e01d      	b.n	8004578 <HAL_RCC_OscConfig+0x288>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004544:	d10c      	bne.n	8004560 <HAL_RCC_OscConfig+0x270>
 8004546:	4b10      	ldr	r3, [pc, #64]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a0f      	ldr	r2, [pc, #60]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 800454c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	4b0d      	ldr	r3, [pc, #52]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a0c      	ldr	r2, [pc, #48]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 8004558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	e00b      	b.n	8004578 <HAL_RCC_OscConfig+0x288>
 8004560:	4b09      	ldr	r3, [pc, #36]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a08      	ldr	r2, [pc, #32]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 8004566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	4b06      	ldr	r3, [pc, #24]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a05      	ldr	r2, [pc, #20]	; (8004588 <HAL_RCC_OscConfig+0x298>)
 8004572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01b      	beq.n	80045b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004580:	f7fd fcf0 	bl	8001f64 <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004586:	e010      	b.n	80045aa <HAL_RCC_OscConfig+0x2ba>
 8004588:	40021000 	.word	0x40021000
 800458c:	08009788 	.word	0x08009788
 8004590:	20000008 	.word	0x20000008
 8004594:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004598:	f7fd fce4 	bl	8001f64 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b64      	cmp	r3, #100	; 0x64
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e2bd      	b.n	8004b26 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045aa:	4baf      	ldr	r3, [pc, #700]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f0      	beq.n	8004598 <HAL_RCC_OscConfig+0x2a8>
 80045b6:	e014      	b.n	80045e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b8:	f7fd fcd4 	bl	8001f64 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c0:	f7fd fcd0 	bl	8001f64 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b64      	cmp	r3, #100	; 0x64
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e2a9      	b.n	8004b26 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045d2:	4ba5      	ldr	r3, [pc, #660]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f0      	bne.n	80045c0 <HAL_RCC_OscConfig+0x2d0>
 80045de:	e000      	b.n	80045e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d060      	beq.n	80046b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d005      	beq.n	8004600 <HAL_RCC_OscConfig+0x310>
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	2b0c      	cmp	r3, #12
 80045f8:	d119      	bne.n	800462e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d116      	bne.n	800462e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004600:	4b99      	ldr	r3, [pc, #612]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004608:	2b00      	cmp	r3, #0
 800460a:	d005      	beq.n	8004618 <HAL_RCC_OscConfig+0x328>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e286      	b.n	8004b26 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004618:	4b93      	ldr	r3, [pc, #588]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	061b      	lsls	r3, r3, #24
 8004626:	4990      	ldr	r1, [pc, #576]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 8004628:	4313      	orrs	r3, r2
 800462a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800462c:	e040      	b.n	80046b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d023      	beq.n	800467e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004636:	4b8c      	ldr	r3, [pc, #560]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a8b      	ldr	r2, [pc, #556]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 800463c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004642:	f7fd fc8f 	bl	8001f64 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800464a:	f7fd fc8b 	bl	8001f64 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e264      	b.n	8004b26 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800465c:	4b82      	ldr	r3, [pc, #520]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0f0      	beq.n	800464a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004668:	4b7f      	ldr	r3, [pc, #508]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	061b      	lsls	r3, r3, #24
 8004676:	497c      	ldr	r1, [pc, #496]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 8004678:	4313      	orrs	r3, r2
 800467a:	604b      	str	r3, [r1, #4]
 800467c:	e018      	b.n	80046b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800467e:	4b7a      	ldr	r3, [pc, #488]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a79      	ldr	r2, [pc, #484]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 8004684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468a:	f7fd fc6b 	bl	8001f64 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004692:	f7fd fc67 	bl	8001f64 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e240      	b.n	8004b26 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80046a4:	4b70      	ldr	r3, [pc, #448]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1f0      	bne.n	8004692 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0308 	and.w	r3, r3, #8
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d03c      	beq.n	8004736 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d01c      	beq.n	80046fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046c4:	4b68      	ldr	r3, [pc, #416]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 80046c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ca:	4a67      	ldr	r2, [pc, #412]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 80046cc:	f043 0301 	orr.w	r3, r3, #1
 80046d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d4:	f7fd fc46 	bl	8001f64 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046dc:	f7fd fc42 	bl	8001f64 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e21b      	b.n	8004b26 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046ee:	4b5e      	ldr	r3, [pc, #376]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 80046f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0ef      	beq.n	80046dc <HAL_RCC_OscConfig+0x3ec>
 80046fc:	e01b      	b.n	8004736 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046fe:	4b5a      	ldr	r3, [pc, #360]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 8004700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004704:	4a58      	ldr	r2, [pc, #352]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 8004706:	f023 0301 	bic.w	r3, r3, #1
 800470a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470e:	f7fd fc29 	bl	8001f64 <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004714:	e008      	b.n	8004728 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004716:	f7fd fc25 	bl	8001f64 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e1fe      	b.n	8004b26 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004728:	4b4f      	ldr	r3, [pc, #316]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 800472a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1ef      	bne.n	8004716 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0304 	and.w	r3, r3, #4
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 80a6 	beq.w	8004890 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004744:	2300      	movs	r3, #0
 8004746:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004748:	4b47      	ldr	r3, [pc, #284]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 800474a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10d      	bne.n	8004770 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004754:	4b44      	ldr	r3, [pc, #272]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 8004756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004758:	4a43      	ldr	r2, [pc, #268]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 800475a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800475e:	6593      	str	r3, [r2, #88]	; 0x58
 8004760:	4b41      	ldr	r3, [pc, #260]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 8004762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004768:	60bb      	str	r3, [r7, #8]
 800476a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800476c:	2301      	movs	r3, #1
 800476e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004770:	4b3e      	ldr	r3, [pc, #248]	; (800486c <HAL_RCC_OscConfig+0x57c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004778:	2b00      	cmp	r3, #0
 800477a:	d118      	bne.n	80047ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800477c:	4b3b      	ldr	r3, [pc, #236]	; (800486c <HAL_RCC_OscConfig+0x57c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a3a      	ldr	r2, [pc, #232]	; (800486c <HAL_RCC_OscConfig+0x57c>)
 8004782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004786:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004788:	f7fd fbec 	bl	8001f64 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004790:	f7fd fbe8 	bl	8001f64 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e1c1      	b.n	8004b26 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047a2:	4b32      	ldr	r3, [pc, #200]	; (800486c <HAL_RCC_OscConfig+0x57c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0f0      	beq.n	8004790 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d108      	bne.n	80047c8 <HAL_RCC_OscConfig+0x4d8>
 80047b6:	4b2c      	ldr	r3, [pc, #176]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 80047b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047bc:	4a2a      	ldr	r2, [pc, #168]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 80047be:	f043 0301 	orr.w	r3, r3, #1
 80047c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047c6:	e024      	b.n	8004812 <HAL_RCC_OscConfig+0x522>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	2b05      	cmp	r3, #5
 80047ce:	d110      	bne.n	80047f2 <HAL_RCC_OscConfig+0x502>
 80047d0:	4b25      	ldr	r3, [pc, #148]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d6:	4a24      	ldr	r2, [pc, #144]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 80047d8:	f043 0304 	orr.w	r3, r3, #4
 80047dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047e0:	4b21      	ldr	r3, [pc, #132]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 80047e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e6:	4a20      	ldr	r2, [pc, #128]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 80047e8:	f043 0301 	orr.w	r3, r3, #1
 80047ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047f0:	e00f      	b.n	8004812 <HAL_RCC_OscConfig+0x522>
 80047f2:	4b1d      	ldr	r3, [pc, #116]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 80047f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f8:	4a1b      	ldr	r2, [pc, #108]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 80047fa:	f023 0301 	bic.w	r3, r3, #1
 80047fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004802:	4b19      	ldr	r3, [pc, #100]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 8004804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004808:	4a17      	ldr	r2, [pc, #92]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 800480a:	f023 0304 	bic.w	r3, r3, #4
 800480e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d016      	beq.n	8004848 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481a:	f7fd fba3 	bl	8001f64 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004820:	e00a      	b.n	8004838 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004822:	f7fd fb9f 	bl	8001f64 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004830:	4293      	cmp	r3, r2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e176      	b.n	8004b26 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004838:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <HAL_RCC_OscConfig+0x578>)
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0ed      	beq.n	8004822 <HAL_RCC_OscConfig+0x532>
 8004846:	e01a      	b.n	800487e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004848:	f7fd fb8c 	bl	8001f64 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800484e:	e00f      	b.n	8004870 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004850:	f7fd fb88 	bl	8001f64 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	f241 3288 	movw	r2, #5000	; 0x1388
 800485e:	4293      	cmp	r3, r2
 8004860:	d906      	bls.n	8004870 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e15f      	b.n	8004b26 <HAL_RCC_OscConfig+0x836>
 8004866:	bf00      	nop
 8004868:	40021000 	.word	0x40021000
 800486c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004870:	4baa      	ldr	r3, [pc, #680]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 8004872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1e8      	bne.n	8004850 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800487e:	7ffb      	ldrb	r3, [r7, #31]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d105      	bne.n	8004890 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004884:	4ba5      	ldr	r3, [pc, #660]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 8004886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004888:	4aa4      	ldr	r2, [pc, #656]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 800488a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800488e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0320 	and.w	r3, r3, #32
 8004898:	2b00      	cmp	r3, #0
 800489a:	d03c      	beq.n	8004916 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d01c      	beq.n	80048de <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048a4:	4b9d      	ldr	r3, [pc, #628]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 80048a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048aa:	4a9c      	ldr	r2, [pc, #624]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 80048ac:	f043 0301 	orr.w	r3, r3, #1
 80048b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b4:	f7fd fb56 	bl	8001f64 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048bc:	f7fd fb52 	bl	8001f64 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e12b      	b.n	8004b26 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80048ce:	4b93      	ldr	r3, [pc, #588]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 80048d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0ef      	beq.n	80048bc <HAL_RCC_OscConfig+0x5cc>
 80048dc:	e01b      	b.n	8004916 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048de:	4b8f      	ldr	r3, [pc, #572]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 80048e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048e4:	4a8d      	ldr	r2, [pc, #564]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 80048e6:	f023 0301 	bic.w	r3, r3, #1
 80048ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ee:	f7fd fb39 	bl	8001f64 <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048f6:	f7fd fb35 	bl	8001f64 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e10e      	b.n	8004b26 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004908:	4b84      	ldr	r3, [pc, #528]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 800490a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1ef      	bne.n	80048f6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 8102 	beq.w	8004b24 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004924:	2b02      	cmp	r3, #2
 8004926:	f040 80c5 	bne.w	8004ab4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800492a:	4b7c      	ldr	r3, [pc, #496]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f003 0203 	and.w	r2, r3, #3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493a:	429a      	cmp	r2, r3
 800493c:	d12c      	bne.n	8004998 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004948:	3b01      	subs	r3, #1
 800494a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800494c:	429a      	cmp	r2, r3
 800494e:	d123      	bne.n	8004998 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800495c:	429a      	cmp	r2, r3
 800495e:	d11b      	bne.n	8004998 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800496c:	429a      	cmp	r2, r3
 800496e:	d113      	bne.n	8004998 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497a:	085b      	lsrs	r3, r3, #1
 800497c:	3b01      	subs	r3, #1
 800497e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004980:	429a      	cmp	r2, r3
 8004982:	d109      	bne.n	8004998 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	085b      	lsrs	r3, r3, #1
 8004990:	3b01      	subs	r3, #1
 8004992:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004994:	429a      	cmp	r2, r3
 8004996:	d067      	beq.n	8004a68 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	2b0c      	cmp	r3, #12
 800499c:	d062      	beq.n	8004a64 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800499e:	4b5f      	ldr	r3, [pc, #380]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e0bb      	b.n	8004b26 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80049ae:	4b5b      	ldr	r3, [pc, #364]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a5a      	ldr	r2, [pc, #360]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 80049b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049b8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049ba:	f7fd fad3 	bl	8001f64 <HAL_GetTick>
 80049be:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c0:	e008      	b.n	80049d4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c2:	f7fd facf 	bl	8001f64 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e0a8      	b.n	8004b26 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049d4:	4b51      	ldr	r3, [pc, #324]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1f0      	bne.n	80049c2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049e0:	4b4e      	ldr	r3, [pc, #312]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 80049e2:	68da      	ldr	r2, [r3, #12]
 80049e4:	4b4e      	ldr	r3, [pc, #312]	; (8004b20 <HAL_RCC_OscConfig+0x830>)
 80049e6:	4013      	ands	r3, r2
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049f0:	3a01      	subs	r2, #1
 80049f2:	0112      	lsls	r2, r2, #4
 80049f4:	4311      	orrs	r1, r2
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049fa:	0212      	lsls	r2, r2, #8
 80049fc:	4311      	orrs	r1, r2
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a02:	0852      	lsrs	r2, r2, #1
 8004a04:	3a01      	subs	r2, #1
 8004a06:	0552      	lsls	r2, r2, #21
 8004a08:	4311      	orrs	r1, r2
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a0e:	0852      	lsrs	r2, r2, #1
 8004a10:	3a01      	subs	r2, #1
 8004a12:	0652      	lsls	r2, r2, #25
 8004a14:	4311      	orrs	r1, r2
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a1a:	06d2      	lsls	r2, r2, #27
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	493f      	ldr	r1, [pc, #252]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a24:	4b3d      	ldr	r3, [pc, #244]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a3c      	ldr	r2, [pc, #240]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 8004a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a2e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a30:	4b3a      	ldr	r3, [pc, #232]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	4a39      	ldr	r2, [pc, #228]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 8004a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a3a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a3c:	f7fd fa92 	bl	8001f64 <HAL_GetTick>
 8004a40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a44:	f7fd fa8e 	bl	8001f64 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e067      	b.n	8004b26 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a56:	4b31      	ldr	r3, [pc, #196]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d0f0      	beq.n	8004a44 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a62:	e05f      	b.n	8004b24 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e05e      	b.n	8004b26 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a68:	4b2c      	ldr	r3, [pc, #176]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d157      	bne.n	8004b24 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a74:	4b29      	ldr	r3, [pc, #164]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a28      	ldr	r2, [pc, #160]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 8004a7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a7e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a80:	4b26      	ldr	r3, [pc, #152]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4a25      	ldr	r2, [pc, #148]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 8004a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a8a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a8c:	f7fd fa6a 	bl	8001f64 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a94:	f7fd fa66 	bl	8001f64 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e03f      	b.n	8004b26 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aa6:	4b1d      	ldr	r3, [pc, #116]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f0      	beq.n	8004a94 <HAL_RCC_OscConfig+0x7a4>
 8004ab2:	e037      	b.n	8004b24 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	2b0c      	cmp	r3, #12
 8004ab8:	d02d      	beq.n	8004b16 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aba:	4b18      	ldr	r3, [pc, #96]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a17      	ldr	r2, [pc, #92]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 8004ac0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ac4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ac6:	4b15      	ldr	r3, [pc, #84]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d105      	bne.n	8004ade <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004ad2:	4b12      	ldr	r3, [pc, #72]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	4a11      	ldr	r2, [pc, #68]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 8004ad8:	f023 0303 	bic.w	r3, r3, #3
 8004adc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004ade:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	4a0e      	ldr	r2, [pc, #56]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 8004ae4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aee:	f7fd fa39 	bl	8001f64 <HAL_GetTick>
 8004af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004af4:	e008      	b.n	8004b08 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af6:	f7fd fa35 	bl	8001f64 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d901      	bls.n	8004b08 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e00e      	b.n	8004b26 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b08:	4b04      	ldr	r3, [pc, #16]	; (8004b1c <HAL_RCC_OscConfig+0x82c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1f0      	bne.n	8004af6 <HAL_RCC_OscConfig+0x806>
 8004b14:	e006      	b.n	8004b24 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e005      	b.n	8004b26 <HAL_RCC_OscConfig+0x836>
 8004b1a:	bf00      	nop
 8004b1c:	40021000 	.word	0x40021000
 8004b20:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3720      	adds	r7, #32
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop

08004b30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e0c8      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b44:	4b66      	ldr	r3, [pc, #408]	; (8004ce0 <HAL_RCC_ClockConfig+0x1b0>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d910      	bls.n	8004b74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b52:	4b63      	ldr	r3, [pc, #396]	; (8004ce0 <HAL_RCC_ClockConfig+0x1b0>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f023 0207 	bic.w	r2, r3, #7
 8004b5a:	4961      	ldr	r1, [pc, #388]	; (8004ce0 <HAL_RCC_ClockConfig+0x1b0>)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b62:	4b5f      	ldr	r3, [pc, #380]	; (8004ce0 <HAL_RCC_ClockConfig+0x1b0>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0307 	and.w	r3, r3, #7
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d001      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e0b0      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d04c      	beq.n	8004c1a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d107      	bne.n	8004b98 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b88:	4b56      	ldr	r3, [pc, #344]	; (8004ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d121      	bne.n	8004bd8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e09e      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d107      	bne.n	8004bb0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ba0:	4b50      	ldr	r3, [pc, #320]	; (8004ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d115      	bne.n	8004bd8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e092      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d107      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bb8:	4b4a      	ldr	r3, [pc, #296]	; (8004ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d109      	bne.n	8004bd8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e086      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bc8:	4b46      	ldr	r3, [pc, #280]	; (8004ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e07e      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bd8:	4b42      	ldr	r3, [pc, #264]	; (8004ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f023 0203 	bic.w	r2, r3, #3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	493f      	ldr	r1, [pc, #252]	; (8004ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bea:	f7fd f9bb 	bl	8001f64 <HAL_GetTick>
 8004bee:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bf0:	e00a      	b.n	8004c08 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf2:	f7fd f9b7 	bl	8001f64 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e066      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c08:	4b36      	ldr	r3, [pc, #216]	; (8004ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f003 020c 	and.w	r2, r3, #12
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d1eb      	bne.n	8004bf2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d008      	beq.n	8004c38 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c26:	4b2f      	ldr	r3, [pc, #188]	; (8004ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	492c      	ldr	r1, [pc, #176]	; (8004ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c38:	4b29      	ldr	r3, [pc, #164]	; (8004ce0 <HAL_RCC_ClockConfig+0x1b0>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0307 	and.w	r3, r3, #7
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d210      	bcs.n	8004c68 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c46:	4b26      	ldr	r3, [pc, #152]	; (8004ce0 <HAL_RCC_ClockConfig+0x1b0>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f023 0207 	bic.w	r2, r3, #7
 8004c4e:	4924      	ldr	r1, [pc, #144]	; (8004ce0 <HAL_RCC_ClockConfig+0x1b0>)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c56:	4b22      	ldr	r3, [pc, #136]	; (8004ce0 <HAL_RCC_ClockConfig+0x1b0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d001      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e036      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d008      	beq.n	8004c86 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c74:	4b1b      	ldr	r3, [pc, #108]	; (8004ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	4918      	ldr	r1, [pc, #96]	; (8004ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0308 	and.w	r3, r3, #8
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d009      	beq.n	8004ca6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c92:	4b14      	ldr	r3, [pc, #80]	; (8004ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	4910      	ldr	r1, [pc, #64]	; (8004ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ca6:	f000 f825 	bl	8004cf4 <HAL_RCC_GetSysClockFreq>
 8004caa:	4602      	mov	r2, r0
 8004cac:	4b0d      	ldr	r3, [pc, #52]	; (8004ce4 <HAL_RCC_ClockConfig+0x1b4>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	091b      	lsrs	r3, r3, #4
 8004cb2:	f003 030f 	and.w	r3, r3, #15
 8004cb6:	490c      	ldr	r1, [pc, #48]	; (8004ce8 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb8:	5ccb      	ldrb	r3, [r1, r3]
 8004cba:	f003 031f 	and.w	r3, r3, #31
 8004cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc2:	4a0a      	ldr	r2, [pc, #40]	; (8004cec <HAL_RCC_ClockConfig+0x1bc>)
 8004cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004cc6:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <HAL_RCC_ClockConfig+0x1c0>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fd f8fa 	bl	8001ec4 <HAL_InitTick>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	72fb      	strb	r3, [r7, #11]

  return status;
 8004cd4:	7afb      	ldrb	r3, [r7, #11]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	40022000 	.word	0x40022000
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	08009788 	.word	0x08009788
 8004cec:	20000008 	.word	0x20000008
 8004cf0:	2000000c 	.word	0x2000000c

08004cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b089      	sub	sp, #36	; 0x24
 8004cf8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	61fb      	str	r3, [r7, #28]
 8004cfe:	2300      	movs	r3, #0
 8004d00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d02:	4b3e      	ldr	r3, [pc, #248]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 030c 	and.w	r3, r3, #12
 8004d0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d0c:	4b3b      	ldr	r3, [pc, #236]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0303 	and.w	r3, r3, #3
 8004d14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d005      	beq.n	8004d28 <HAL_RCC_GetSysClockFreq+0x34>
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	2b0c      	cmp	r3, #12
 8004d20:	d121      	bne.n	8004d66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d11e      	bne.n	8004d66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d28:	4b34      	ldr	r3, [pc, #208]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0308 	and.w	r3, r3, #8
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d107      	bne.n	8004d44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d34:	4b31      	ldr	r3, [pc, #196]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004d36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d3a:	0a1b      	lsrs	r3, r3, #8
 8004d3c:	f003 030f 	and.w	r3, r3, #15
 8004d40:	61fb      	str	r3, [r7, #28]
 8004d42:	e005      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d44:	4b2d      	ldr	r3, [pc, #180]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	091b      	lsrs	r3, r3, #4
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d50:	4a2b      	ldr	r2, [pc, #172]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10d      	bne.n	8004d7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d64:	e00a      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d102      	bne.n	8004d72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d6c:	4b25      	ldr	r3, [pc, #148]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d6e:	61bb      	str	r3, [r7, #24]
 8004d70:	e004      	b.n	8004d7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d101      	bne.n	8004d7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d78:	4b23      	ldr	r3, [pc, #140]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	2b0c      	cmp	r3, #12
 8004d80:	d134      	bne.n	8004dec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d82:	4b1e      	ldr	r3, [pc, #120]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d003      	beq.n	8004d9a <HAL_RCC_GetSysClockFreq+0xa6>
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d003      	beq.n	8004da0 <HAL_RCC_GetSysClockFreq+0xac>
 8004d98:	e005      	b.n	8004da6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d9a:	4b1a      	ldr	r3, [pc, #104]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d9c:	617b      	str	r3, [r7, #20]
      break;
 8004d9e:	e005      	b.n	8004dac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004da0:	4b19      	ldr	r3, [pc, #100]	; (8004e08 <HAL_RCC_GetSysClockFreq+0x114>)
 8004da2:	617b      	str	r3, [r7, #20]
      break;
 8004da4:	e002      	b.n	8004dac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	617b      	str	r3, [r7, #20]
      break;
 8004daa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dac:	4b13      	ldr	r3, [pc, #76]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	091b      	lsrs	r3, r3, #4
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	3301      	adds	r3, #1
 8004db8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004dba:	4b10      	ldr	r3, [pc, #64]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	0a1b      	lsrs	r3, r3, #8
 8004dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	fb02 f203 	mul.w	r2, r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dd2:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	0e5b      	lsrs	r3, r3, #25
 8004dd8:	f003 0303 	and.w	r3, r3, #3
 8004ddc:	3301      	adds	r3, #1
 8004dde:	005b      	lsls	r3, r3, #1
 8004de0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004dec:	69bb      	ldr	r3, [r7, #24]
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3724      	adds	r7, #36	; 0x24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	080097a0 	.word	0x080097a0
 8004e04:	00f42400 	.word	0x00f42400
 8004e08:	007a1200 	.word	0x007a1200

08004e0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e10:	4b03      	ldr	r3, [pc, #12]	; (8004e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e12:	681b      	ldr	r3, [r3, #0]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	20000008 	.word	0x20000008

08004e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e28:	f7ff fff0 	bl	8004e0c <HAL_RCC_GetHCLKFreq>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	0a1b      	lsrs	r3, r3, #8
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	4904      	ldr	r1, [pc, #16]	; (8004e4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e3a:	5ccb      	ldrb	r3, [r1, r3]
 8004e3c:	f003 031f 	and.w	r3, r3, #31
 8004e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	08009798 	.word	0x08009798

08004e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e54:	f7ff ffda 	bl	8004e0c <HAL_RCC_GetHCLKFreq>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	0adb      	lsrs	r3, r3, #11
 8004e60:	f003 0307 	and.w	r3, r3, #7
 8004e64:	4904      	ldr	r1, [pc, #16]	; (8004e78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e66:	5ccb      	ldrb	r3, [r1, r3]
 8004e68:	f003 031f 	and.w	r3, r3, #31
 8004e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	40021000 	.word	0x40021000
 8004e78:	08009798 	.word	0x08009798

08004e7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e84:	2300      	movs	r3, #0
 8004e86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e88:	4b2a      	ldr	r3, [pc, #168]	; (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e94:	f7ff f9c8 	bl	8004228 <HAL_PWREx_GetVoltageRange>
 8004e98:	6178      	str	r0, [r7, #20]
 8004e9a:	e014      	b.n	8004ec6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e9c:	4b25      	ldr	r3, [pc, #148]	; (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea0:	4a24      	ldr	r2, [pc, #144]	; (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ea8:	4b22      	ldr	r3, [pc, #136]	; (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004eb4:	f7ff f9b8 	bl	8004228 <HAL_PWREx_GetVoltageRange>
 8004eb8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004eba:	4b1e      	ldr	r3, [pc, #120]	; (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ebe:	4a1d      	ldr	r2, [pc, #116]	; (8004f34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ec4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ecc:	d10b      	bne.n	8004ee6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b80      	cmp	r3, #128	; 0x80
 8004ed2:	d919      	bls.n	8004f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2ba0      	cmp	r3, #160	; 0xa0
 8004ed8:	d902      	bls.n	8004ee0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004eda:	2302      	movs	r3, #2
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	e013      	b.n	8004f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	613b      	str	r3, [r7, #16]
 8004ee4:	e010      	b.n	8004f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b80      	cmp	r3, #128	; 0x80
 8004eea:	d902      	bls.n	8004ef2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004eec:	2303      	movs	r3, #3
 8004eee:	613b      	str	r3, [r7, #16]
 8004ef0:	e00a      	b.n	8004f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b80      	cmp	r3, #128	; 0x80
 8004ef6:	d102      	bne.n	8004efe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ef8:	2302      	movs	r3, #2
 8004efa:	613b      	str	r3, [r7, #16]
 8004efc:	e004      	b.n	8004f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b70      	cmp	r3, #112	; 0x70
 8004f02:	d101      	bne.n	8004f08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f04:	2301      	movs	r3, #1
 8004f06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f08:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f023 0207 	bic.w	r2, r3, #7
 8004f10:	4909      	ldr	r1, [pc, #36]	; (8004f38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f18:	4b07      	ldr	r3, [pc, #28]	; (8004f38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d001      	beq.n	8004f2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e000      	b.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	40021000 	.word	0x40021000
 8004f38:	40022000 	.word	0x40022000

08004f3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004f44:	2300      	movs	r3, #0
 8004f46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004f48:	2300      	movs	r3, #0
 8004f4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d031      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f60:	d01a      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004f62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f66:	d814      	bhi.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d009      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004f6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f70:	d10f      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004f72:	4bac      	ldr	r3, [pc, #688]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	4aab      	ldr	r2, [pc, #684]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f7c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f7e:	e00c      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3304      	adds	r3, #4
 8004f84:	2100      	movs	r1, #0
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 f9cc 	bl	8005324 <RCCEx_PLLSAI1_Config>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f90:	e003      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	74fb      	strb	r3, [r7, #19]
      break;
 8004f96:	e000      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f9a:	7cfb      	ldrb	r3, [r7, #19]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10b      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004fa0:	4ba0      	ldr	r3, [pc, #640]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fa6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fae:	499d      	ldr	r1, [pc, #628]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004fb6:	e001      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb8:	7cfb      	ldrb	r3, [r7, #19]
 8004fba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 8099 	beq.w	80050fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fce:	4b95      	ldr	r3, [pc, #596]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00d      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fe4:	4b8f      	ldr	r3, [pc, #572]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe8:	4a8e      	ldr	r2, [pc, #568]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fee:	6593      	str	r3, [r2, #88]	; 0x58
 8004ff0:	4b8c      	ldr	r3, [pc, #560]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff8:	60bb      	str	r3, [r7, #8]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005000:	4b89      	ldr	r3, [pc, #548]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a88      	ldr	r2, [pc, #544]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800500a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800500c:	f7fc ffaa 	bl	8001f64 <HAL_GetTick>
 8005010:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005012:	e009      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005014:	f7fc ffa6 	bl	8001f64 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d902      	bls.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	74fb      	strb	r3, [r7, #19]
        break;
 8005026:	e005      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005028:	4b7f      	ldr	r3, [pc, #508]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0ef      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005034:	7cfb      	ldrb	r3, [r7, #19]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d155      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800503a:	4b7a      	ldr	r3, [pc, #488]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800503c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005044:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01e      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	429a      	cmp	r2, r3
 8005054:	d019      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005056:	4b73      	ldr	r3, [pc, #460]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005060:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005062:	4b70      	ldr	r3, [pc, #448]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005068:	4a6e      	ldr	r2, [pc, #440]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800506a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800506e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005072:	4b6c      	ldr	r3, [pc, #432]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005078:	4a6a      	ldr	r2, [pc, #424]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800507a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800507e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005082:	4a68      	ldr	r2, [pc, #416]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	d016      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005094:	f7fc ff66 	bl	8001f64 <HAL_GetTick>
 8005098:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800509a:	e00b      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509c:	f7fc ff62 	bl	8001f64 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d902      	bls.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	74fb      	strb	r3, [r7, #19]
            break;
 80050b2:	e006      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050b4:	4b5b      	ldr	r3, [pc, #364]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0ec      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80050c2:	7cfb      	ldrb	r3, [r7, #19]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10b      	bne.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050c8:	4b56      	ldr	r3, [pc, #344]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d6:	4953      	ldr	r1, [pc, #332]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050de:	e004      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050e0:	7cfb      	ldrb	r3, [r7, #19]
 80050e2:	74bb      	strb	r3, [r7, #18]
 80050e4:	e001      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e6:	7cfb      	ldrb	r3, [r7, #19]
 80050e8:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050ea:	7c7b      	ldrb	r3, [r7, #17]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d105      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050f0:	4b4c      	ldr	r3, [pc, #304]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f4:	4a4b      	ldr	r2, [pc, #300]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80050f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00a      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005108:	4b46      	ldr	r3, [pc, #280]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800510a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510e:	f023 0203 	bic.w	r2, r3, #3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	4943      	ldr	r1, [pc, #268]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005118:	4313      	orrs	r3, r2
 800511a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800512a:	4b3e      	ldr	r3, [pc, #248]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800512c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005130:	f023 020c 	bic.w	r2, r3, #12
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	493a      	ldr	r1, [pc, #232]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800513a:	4313      	orrs	r3, r2
 800513c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00a      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800514c:	4b35      	ldr	r3, [pc, #212]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800514e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005152:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515a:	4932      	ldr	r1, [pc, #200]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800515c:	4313      	orrs	r3, r2
 800515e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800516e:	4b2d      	ldr	r3, [pc, #180]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005174:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517c:	4929      	ldr	r1, [pc, #164]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800517e:	4313      	orrs	r3, r2
 8005180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00a      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005190:	4b24      	ldr	r3, [pc, #144]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005196:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519e:	4921      	ldr	r1, [pc, #132]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051b2:	4b1c      	ldr	r3, [pc, #112]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c0:	4918      	ldr	r1, [pc, #96]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051d4:	4b13      	ldr	r3, [pc, #76]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e2:	4910      	ldr	r1, [pc, #64]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d02c      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051f6:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80051f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005204:	4907      	ldr	r1, [pc, #28]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005206:	4313      	orrs	r3, r2
 8005208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005214:	d10a      	bne.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005216:	4b03      	ldr	r3, [pc, #12]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	4a02      	ldr	r2, [pc, #8]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800521c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005220:	60d3      	str	r3, [r2, #12]
 8005222:	e015      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005224:	40021000 	.word	0x40021000
 8005228:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005234:	d10c      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	3304      	adds	r3, #4
 800523a:	2101      	movs	r1, #1
 800523c:	4618      	mov	r0, r3
 800523e:	f000 f871 	bl	8005324 <RCCEx_PLLSAI1_Config>
 8005242:	4603      	mov	r3, r0
 8005244:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005246:	7cfb      	ldrb	r3, [r7, #19]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 800524c:	7cfb      	ldrb	r3, [r7, #19]
 800524e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d028      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800525c:	4b30      	ldr	r3, [pc, #192]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800525e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005262:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526a:	492d      	ldr	r1, [pc, #180]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800526c:	4313      	orrs	r3, r2
 800526e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005276:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800527a:	d106      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800527c:	4b28      	ldr	r3, [pc, #160]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	4a27      	ldr	r2, [pc, #156]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005286:	60d3      	str	r3, [r2, #12]
 8005288:	e011      	b.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005292:	d10c      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3304      	adds	r3, #4
 8005298:	2101      	movs	r1, #1
 800529a:	4618      	mov	r0, r3
 800529c:	f000 f842 	bl	8005324 <RCCEx_PLLSAI1_Config>
 80052a0:	4603      	mov	r3, r0
 80052a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052a4:	7cfb      	ldrb	r3, [r7, #19]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 80052aa:	7cfb      	ldrb	r3, [r7, #19]
 80052ac:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d01c      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80052ba:	4b19      	ldr	r3, [pc, #100]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052c8:	4915      	ldr	r1, [pc, #84]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052d8:	d10c      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	3304      	adds	r3, #4
 80052de:	2102      	movs	r1, #2
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 f81f 	bl	8005324 <RCCEx_PLLSAI1_Config>
 80052e6:	4603      	mov	r3, r0
 80052e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052ea:	7cfb      	ldrb	r3, [r7, #19]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80052f0:	7cfb      	ldrb	r3, [r7, #19]
 80052f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00a      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005300:	4b07      	ldr	r3, [pc, #28]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005306:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530e:	4904      	ldr	r1, [pc, #16]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005310:	4313      	orrs	r3, r2
 8005312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005316:	7cbb      	ldrb	r3, [r7, #18]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3718      	adds	r7, #24
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40021000 	.word	0x40021000

08005324 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005332:	4b74      	ldr	r3, [pc, #464]	; (8005504 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f003 0303 	and.w	r3, r3, #3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d018      	beq.n	8005370 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800533e:	4b71      	ldr	r3, [pc, #452]	; (8005504 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	f003 0203 	and.w	r2, r3, #3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	429a      	cmp	r2, r3
 800534c:	d10d      	bne.n	800536a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
       ||
 8005352:	2b00      	cmp	r3, #0
 8005354:	d009      	beq.n	800536a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005356:	4b6b      	ldr	r3, [pc, #428]	; (8005504 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	091b      	lsrs	r3, r3, #4
 800535c:	f003 0307 	and.w	r3, r3, #7
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
       ||
 8005366:	429a      	cmp	r2, r3
 8005368:	d047      	beq.n	80053fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	73fb      	strb	r3, [r7, #15]
 800536e:	e044      	b.n	80053fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b03      	cmp	r3, #3
 8005376:	d018      	beq.n	80053aa <RCCEx_PLLSAI1_Config+0x86>
 8005378:	2b03      	cmp	r3, #3
 800537a:	d825      	bhi.n	80053c8 <RCCEx_PLLSAI1_Config+0xa4>
 800537c:	2b01      	cmp	r3, #1
 800537e:	d002      	beq.n	8005386 <RCCEx_PLLSAI1_Config+0x62>
 8005380:	2b02      	cmp	r3, #2
 8005382:	d009      	beq.n	8005398 <RCCEx_PLLSAI1_Config+0x74>
 8005384:	e020      	b.n	80053c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005386:	4b5f      	ldr	r3, [pc, #380]	; (8005504 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d11d      	bne.n	80053ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005396:	e01a      	b.n	80053ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005398:	4b5a      	ldr	r3, [pc, #360]	; (8005504 <RCCEx_PLLSAI1_Config+0x1e0>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d116      	bne.n	80053d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053a8:	e013      	b.n	80053d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80053aa:	4b56      	ldr	r3, [pc, #344]	; (8005504 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10f      	bne.n	80053d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053b6:	4b53      	ldr	r3, [pc, #332]	; (8005504 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d109      	bne.n	80053d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053c6:	e006      	b.n	80053d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	73fb      	strb	r3, [r7, #15]
      break;
 80053cc:	e004      	b.n	80053d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053ce:	bf00      	nop
 80053d0:	e002      	b.n	80053d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053d2:	bf00      	nop
 80053d4:	e000      	b.n	80053d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80053d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80053d8:	7bfb      	ldrb	r3, [r7, #15]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10d      	bne.n	80053fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053de:	4b49      	ldr	r3, [pc, #292]	; (8005504 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6819      	ldr	r1, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	3b01      	subs	r3, #1
 80053f0:	011b      	lsls	r3, r3, #4
 80053f2:	430b      	orrs	r3, r1
 80053f4:	4943      	ldr	r1, [pc, #268]	; (8005504 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053fa:	7bfb      	ldrb	r3, [r7, #15]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d17c      	bne.n	80054fa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005400:	4b40      	ldr	r3, [pc, #256]	; (8005504 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a3f      	ldr	r2, [pc, #252]	; (8005504 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005406:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800540a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800540c:	f7fc fdaa 	bl	8001f64 <HAL_GetTick>
 8005410:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005412:	e009      	b.n	8005428 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005414:	f7fc fda6 	bl	8001f64 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d902      	bls.n	8005428 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	73fb      	strb	r3, [r7, #15]
        break;
 8005426:	e005      	b.n	8005434 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005428:	4b36      	ldr	r3, [pc, #216]	; (8005504 <RCCEx_PLLSAI1_Config+0x1e0>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1ef      	bne.n	8005414 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005434:	7bfb      	ldrb	r3, [r7, #15]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d15f      	bne.n	80054fa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d110      	bne.n	8005462 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005440:	4b30      	ldr	r3, [pc, #192]	; (8005504 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005448:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6892      	ldr	r2, [r2, #8]
 8005450:	0211      	lsls	r1, r2, #8
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	68d2      	ldr	r2, [r2, #12]
 8005456:	06d2      	lsls	r2, r2, #27
 8005458:	430a      	orrs	r2, r1
 800545a:	492a      	ldr	r1, [pc, #168]	; (8005504 <RCCEx_PLLSAI1_Config+0x1e0>)
 800545c:	4313      	orrs	r3, r2
 800545e:	610b      	str	r3, [r1, #16]
 8005460:	e027      	b.n	80054b2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d112      	bne.n	800548e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005468:	4b26      	ldr	r3, [pc, #152]	; (8005504 <RCCEx_PLLSAI1_Config+0x1e0>)
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005470:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	6892      	ldr	r2, [r2, #8]
 8005478:	0211      	lsls	r1, r2, #8
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6912      	ldr	r2, [r2, #16]
 800547e:	0852      	lsrs	r2, r2, #1
 8005480:	3a01      	subs	r2, #1
 8005482:	0552      	lsls	r2, r2, #21
 8005484:	430a      	orrs	r2, r1
 8005486:	491f      	ldr	r1, [pc, #124]	; (8005504 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005488:	4313      	orrs	r3, r2
 800548a:	610b      	str	r3, [r1, #16]
 800548c:	e011      	b.n	80054b2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800548e:	4b1d      	ldr	r3, [pc, #116]	; (8005504 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005496:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6892      	ldr	r2, [r2, #8]
 800549e:	0211      	lsls	r1, r2, #8
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	6952      	ldr	r2, [r2, #20]
 80054a4:	0852      	lsrs	r2, r2, #1
 80054a6:	3a01      	subs	r2, #1
 80054a8:	0652      	lsls	r2, r2, #25
 80054aa:	430a      	orrs	r2, r1
 80054ac:	4915      	ldr	r1, [pc, #84]	; (8005504 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80054b2:	4b14      	ldr	r3, [pc, #80]	; (8005504 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a13      	ldr	r2, [pc, #76]	; (8005504 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054bc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054be:	f7fc fd51 	bl	8001f64 <HAL_GetTick>
 80054c2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054c4:	e009      	b.n	80054da <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054c6:	f7fc fd4d 	bl	8001f64 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d902      	bls.n	80054da <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	73fb      	strb	r3, [r7, #15]
          break;
 80054d8:	e005      	b.n	80054e6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054da:	4b0a      	ldr	r3, [pc, #40]	; (8005504 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0ef      	beq.n	80054c6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d106      	bne.n	80054fa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80054ec:	4b05      	ldr	r3, [pc, #20]	; (8005504 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054ee:	691a      	ldr	r2, [r3, #16]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	4903      	ldr	r1, [pc, #12]	; (8005504 <RCCEx_PLLSAI1_Config+0x1e0>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	40021000 	.word	0x40021000

08005508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e049      	b.n	80055ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7fc fafa 	bl	8001b28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3304      	adds	r3, #4
 8005544:	4619      	mov	r1, r3
 8005546:	4610      	mov	r0, r2
 8005548:	f000 f948 	bl	80057dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
	...

080055b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d001      	beq.n	80055d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e033      	b.n	8005638 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a19      	ldr	r2, [pc, #100]	; (8005644 <HAL_TIM_Base_Start+0x8c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d009      	beq.n	80055f6 <HAL_TIM_Base_Start+0x3e>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ea:	d004      	beq.n	80055f6 <HAL_TIM_Base_Start+0x3e>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a15      	ldr	r2, [pc, #84]	; (8005648 <HAL_TIM_Base_Start+0x90>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d115      	bne.n	8005622 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	4b13      	ldr	r3, [pc, #76]	; (800564c <HAL_TIM_Base_Start+0x94>)
 80055fe:	4013      	ands	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b06      	cmp	r3, #6
 8005606:	d015      	beq.n	8005634 <HAL_TIM_Base_Start+0x7c>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800560e:	d011      	beq.n	8005634 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0201 	orr.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005620:	e008      	b.n	8005634 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f042 0201 	orr.w	r2, r2, #1
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	e000      	b.n	8005636 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005634:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3714      	adds	r7, #20
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	40012c00 	.word	0x40012c00
 8005648:	40014000 	.word	0x40014000
 800564c:	00010007 	.word	0x00010007

08005650 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005660:	2b01      	cmp	r3, #1
 8005662:	d101      	bne.n	8005668 <HAL_TIM_ConfigClockSource+0x18>
 8005664:	2302      	movs	r3, #2
 8005666:	e0b5      	b.n	80057d4 <HAL_TIM_ConfigClockSource+0x184>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2202      	movs	r2, #2
 8005674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005686:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800568a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005692:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056a4:	d03e      	beq.n	8005724 <HAL_TIM_ConfigClockSource+0xd4>
 80056a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056aa:	f200 8087 	bhi.w	80057bc <HAL_TIM_ConfigClockSource+0x16c>
 80056ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056b2:	f000 8085 	beq.w	80057c0 <HAL_TIM_ConfigClockSource+0x170>
 80056b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ba:	d87f      	bhi.n	80057bc <HAL_TIM_ConfigClockSource+0x16c>
 80056bc:	2b70      	cmp	r3, #112	; 0x70
 80056be:	d01a      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0xa6>
 80056c0:	2b70      	cmp	r3, #112	; 0x70
 80056c2:	d87b      	bhi.n	80057bc <HAL_TIM_ConfigClockSource+0x16c>
 80056c4:	2b60      	cmp	r3, #96	; 0x60
 80056c6:	d050      	beq.n	800576a <HAL_TIM_ConfigClockSource+0x11a>
 80056c8:	2b60      	cmp	r3, #96	; 0x60
 80056ca:	d877      	bhi.n	80057bc <HAL_TIM_ConfigClockSource+0x16c>
 80056cc:	2b50      	cmp	r3, #80	; 0x50
 80056ce:	d03c      	beq.n	800574a <HAL_TIM_ConfigClockSource+0xfa>
 80056d0:	2b50      	cmp	r3, #80	; 0x50
 80056d2:	d873      	bhi.n	80057bc <HAL_TIM_ConfigClockSource+0x16c>
 80056d4:	2b40      	cmp	r3, #64	; 0x40
 80056d6:	d058      	beq.n	800578a <HAL_TIM_ConfigClockSource+0x13a>
 80056d8:	2b40      	cmp	r3, #64	; 0x40
 80056da:	d86f      	bhi.n	80057bc <HAL_TIM_ConfigClockSource+0x16c>
 80056dc:	2b30      	cmp	r3, #48	; 0x30
 80056de:	d064      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0x15a>
 80056e0:	2b30      	cmp	r3, #48	; 0x30
 80056e2:	d86b      	bhi.n	80057bc <HAL_TIM_ConfigClockSource+0x16c>
 80056e4:	2b20      	cmp	r3, #32
 80056e6:	d060      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0x15a>
 80056e8:	2b20      	cmp	r3, #32
 80056ea:	d867      	bhi.n	80057bc <HAL_TIM_ConfigClockSource+0x16c>
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d05c      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0x15a>
 80056f0:	2b10      	cmp	r3, #16
 80056f2:	d05a      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80056f4:	e062      	b.n	80057bc <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6818      	ldr	r0, [r3, #0]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	6899      	ldr	r1, [r3, #8]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685a      	ldr	r2, [r3, #4]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f000 f947 	bl	8005998 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005718:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	609a      	str	r2, [r3, #8]
      break;
 8005722:	e04e      	b.n	80057c2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6818      	ldr	r0, [r3, #0]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	6899      	ldr	r1, [r3, #8]
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f000 f930 	bl	8005998 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005746:	609a      	str	r2, [r3, #8]
      break;
 8005748:	e03b      	b.n	80057c2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6818      	ldr	r0, [r3, #0]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	6859      	ldr	r1, [r3, #4]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	461a      	mov	r2, r3
 8005758:	f000 f8a4 	bl	80058a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2150      	movs	r1, #80	; 0x50
 8005762:	4618      	mov	r0, r3
 8005764:	f000 f8fd 	bl	8005962 <TIM_ITRx_SetConfig>
      break;
 8005768:	e02b      	b.n	80057c2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6818      	ldr	r0, [r3, #0]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	6859      	ldr	r1, [r3, #4]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	461a      	mov	r2, r3
 8005778:	f000 f8c3 	bl	8005902 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2160      	movs	r1, #96	; 0x60
 8005782:	4618      	mov	r0, r3
 8005784:	f000 f8ed 	bl	8005962 <TIM_ITRx_SetConfig>
      break;
 8005788:	e01b      	b.n	80057c2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6818      	ldr	r0, [r3, #0]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	6859      	ldr	r1, [r3, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	461a      	mov	r2, r3
 8005798:	f000 f884 	bl	80058a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2140      	movs	r1, #64	; 0x40
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 f8dd 	bl	8005962 <TIM_ITRx_SetConfig>
      break;
 80057a8:	e00b      	b.n	80057c2 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4619      	mov	r1, r3
 80057b4:	4610      	mov	r0, r2
 80057b6:	f000 f8d4 	bl	8005962 <TIM_ITRx_SetConfig>
        break;
 80057ba:	e002      	b.n	80057c2 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80057bc:	bf00      	nop
 80057be:	e000      	b.n	80057c2 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80057c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a2a      	ldr	r2, [pc, #168]	; (8005898 <TIM_Base_SetConfig+0xbc>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d003      	beq.n	80057fc <TIM_Base_SetConfig+0x20>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057fa:	d108      	bne.n	800580e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	4313      	orrs	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a21      	ldr	r2, [pc, #132]	; (8005898 <TIM_Base_SetConfig+0xbc>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d00b      	beq.n	800582e <TIM_Base_SetConfig+0x52>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800581c:	d007      	beq.n	800582e <TIM_Base_SetConfig+0x52>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a1e      	ldr	r2, [pc, #120]	; (800589c <TIM_Base_SetConfig+0xc0>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d003      	beq.n	800582e <TIM_Base_SetConfig+0x52>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a1d      	ldr	r2, [pc, #116]	; (80058a0 <TIM_Base_SetConfig+0xc4>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d108      	bne.n	8005840 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	4313      	orrs	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	4313      	orrs	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a0c      	ldr	r2, [pc, #48]	; (8005898 <TIM_Base_SetConfig+0xbc>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d007      	beq.n	800587c <TIM_Base_SetConfig+0xa0>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a0b      	ldr	r2, [pc, #44]	; (800589c <TIM_Base_SetConfig+0xc0>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d003      	beq.n	800587c <TIM_Base_SetConfig+0xa0>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a0a      	ldr	r2, [pc, #40]	; (80058a0 <TIM_Base_SetConfig+0xc4>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d103      	bne.n	8005884 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	691a      	ldr	r2, [r3, #16]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	615a      	str	r2, [r3, #20]
}
 800588a:	bf00      	nop
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	40012c00 	.word	0x40012c00
 800589c:	40014000 	.word	0x40014000
 80058a0:	40014400 	.word	0x40014400

080058a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	f023 0201 	bic.w	r2, r3, #1
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	011b      	lsls	r3, r3, #4
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f023 030a 	bic.w	r3, r3, #10
 80058e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	621a      	str	r2, [r3, #32]
}
 80058f6:	bf00      	nop
 80058f8:	371c      	adds	r7, #28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005902:	b480      	push	{r7}
 8005904:	b087      	sub	sp, #28
 8005906:	af00      	add	r7, sp, #0
 8005908:	60f8      	str	r0, [r7, #12]
 800590a:	60b9      	str	r1, [r7, #8]
 800590c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	f023 0210 	bic.w	r2, r3, #16
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800592c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	031b      	lsls	r3, r3, #12
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	4313      	orrs	r3, r2
 8005936:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800593e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	011b      	lsls	r3, r3, #4
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	4313      	orrs	r3, r2
 8005948:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	621a      	str	r2, [r3, #32]
}
 8005956:	bf00      	nop
 8005958:	371c      	adds	r7, #28
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005962:	b480      	push	{r7}
 8005964:	b085      	sub	sp, #20
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4313      	orrs	r3, r2
 8005980:	f043 0307 	orr.w	r3, r3, #7
 8005984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	609a      	str	r2, [r3, #8]
}
 800598c:	bf00      	nop
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	021a      	lsls	r2, r3, #8
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	431a      	orrs	r2, r3
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	4313      	orrs	r3, r2
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	609a      	str	r2, [r3, #8]
}
 80059cc:	bf00      	nop
 80059ce:	371c      	adds	r7, #28
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d101      	bne.n	80059f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059ec:	2302      	movs	r3, #2
 80059ee:	e04f      	b.n	8005a90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a21      	ldr	r2, [pc, #132]	; (8005a9c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d108      	bne.n	8005a2c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a14      	ldr	r2, [pc, #80]	; (8005a9c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d009      	beq.n	8005a64 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a58:	d004      	beq.n	8005a64 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a10      	ldr	r2, [pc, #64]	; (8005aa0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d10c      	bne.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	40012c00 	.word	0x40012c00
 8005aa0:	40014000 	.word	0x40014000

08005aa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e040      	b.n	8005b38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d106      	bne.n	8005acc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7fc f84c 	bl	8001b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2224      	movs	r2, #36	; 0x24
 8005ad0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 0201 	bic.w	r2, r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f82c 	bl	8005b40 <UART_SetConfig>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e022      	b.n	8005b38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d002      	beq.n	8005b00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 fa2c 	bl	8005f58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689a      	ldr	r2, [r3, #8]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0201 	orr.w	r2, r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fab3 	bl	800609c <UART_CheckIdleState>
 8005b36:	4603      	mov	r3, r0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b40:	b5b0      	push	{r4, r5, r7, lr}
 8005b42:	b088      	sub	sp, #32
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	431a      	orrs	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	4baf      	ldr	r3, [pc, #700]	; (8005e28 <UART_SetConfig+0x2e8>)
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	6812      	ldr	r2, [r2, #0]
 8005b72:	69f9      	ldr	r1, [r7, #28]
 8005b74:	430b      	orrs	r3, r1
 8005b76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68da      	ldr	r2, [r3, #12]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4aa4      	ldr	r2, [pc, #656]	; (8005e2c <UART_SetConfig+0x2ec>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d004      	beq.n	8005ba8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69fa      	ldr	r2, [r7, #28]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a9b      	ldr	r2, [pc, #620]	; (8005e30 <UART_SetConfig+0x2f0>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d121      	bne.n	8005c0a <UART_SetConfig+0xca>
 8005bc6:	4b9b      	ldr	r3, [pc, #620]	; (8005e34 <UART_SetConfig+0x2f4>)
 8005bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bcc:	f003 0303 	and.w	r3, r3, #3
 8005bd0:	2b03      	cmp	r3, #3
 8005bd2:	d817      	bhi.n	8005c04 <UART_SetConfig+0xc4>
 8005bd4:	a201      	add	r2, pc, #4	; (adr r2, 8005bdc <UART_SetConfig+0x9c>)
 8005bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bda:	bf00      	nop
 8005bdc:	08005bed 	.word	0x08005bed
 8005be0:	08005bf9 	.word	0x08005bf9
 8005be4:	08005bf3 	.word	0x08005bf3
 8005be8:	08005bff 	.word	0x08005bff
 8005bec:	2301      	movs	r3, #1
 8005bee:	76fb      	strb	r3, [r7, #27]
 8005bf0:	e070      	b.n	8005cd4 <UART_SetConfig+0x194>
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	76fb      	strb	r3, [r7, #27]
 8005bf6:	e06d      	b.n	8005cd4 <UART_SetConfig+0x194>
 8005bf8:	2304      	movs	r3, #4
 8005bfa:	76fb      	strb	r3, [r7, #27]
 8005bfc:	e06a      	b.n	8005cd4 <UART_SetConfig+0x194>
 8005bfe:	2308      	movs	r3, #8
 8005c00:	76fb      	strb	r3, [r7, #27]
 8005c02:	e067      	b.n	8005cd4 <UART_SetConfig+0x194>
 8005c04:	2310      	movs	r3, #16
 8005c06:	76fb      	strb	r3, [r7, #27]
 8005c08:	e064      	b.n	8005cd4 <UART_SetConfig+0x194>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a8a      	ldr	r2, [pc, #552]	; (8005e38 <UART_SetConfig+0x2f8>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d132      	bne.n	8005c7a <UART_SetConfig+0x13a>
 8005c14:	4b87      	ldr	r3, [pc, #540]	; (8005e34 <UART_SetConfig+0x2f4>)
 8005c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c1a:	f003 030c 	and.w	r3, r3, #12
 8005c1e:	2b0c      	cmp	r3, #12
 8005c20:	d828      	bhi.n	8005c74 <UART_SetConfig+0x134>
 8005c22:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <UART_SetConfig+0xe8>)
 8005c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c28:	08005c5d 	.word	0x08005c5d
 8005c2c:	08005c75 	.word	0x08005c75
 8005c30:	08005c75 	.word	0x08005c75
 8005c34:	08005c75 	.word	0x08005c75
 8005c38:	08005c69 	.word	0x08005c69
 8005c3c:	08005c75 	.word	0x08005c75
 8005c40:	08005c75 	.word	0x08005c75
 8005c44:	08005c75 	.word	0x08005c75
 8005c48:	08005c63 	.word	0x08005c63
 8005c4c:	08005c75 	.word	0x08005c75
 8005c50:	08005c75 	.word	0x08005c75
 8005c54:	08005c75 	.word	0x08005c75
 8005c58:	08005c6f 	.word	0x08005c6f
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	76fb      	strb	r3, [r7, #27]
 8005c60:	e038      	b.n	8005cd4 <UART_SetConfig+0x194>
 8005c62:	2302      	movs	r3, #2
 8005c64:	76fb      	strb	r3, [r7, #27]
 8005c66:	e035      	b.n	8005cd4 <UART_SetConfig+0x194>
 8005c68:	2304      	movs	r3, #4
 8005c6a:	76fb      	strb	r3, [r7, #27]
 8005c6c:	e032      	b.n	8005cd4 <UART_SetConfig+0x194>
 8005c6e:	2308      	movs	r3, #8
 8005c70:	76fb      	strb	r3, [r7, #27]
 8005c72:	e02f      	b.n	8005cd4 <UART_SetConfig+0x194>
 8005c74:	2310      	movs	r3, #16
 8005c76:	76fb      	strb	r3, [r7, #27]
 8005c78:	e02c      	b.n	8005cd4 <UART_SetConfig+0x194>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a6b      	ldr	r2, [pc, #428]	; (8005e2c <UART_SetConfig+0x2ec>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d125      	bne.n	8005cd0 <UART_SetConfig+0x190>
 8005c84:	4b6b      	ldr	r3, [pc, #428]	; (8005e34 <UART_SetConfig+0x2f4>)
 8005c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005c8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c92:	d017      	beq.n	8005cc4 <UART_SetConfig+0x184>
 8005c94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005c98:	d817      	bhi.n	8005cca <UART_SetConfig+0x18a>
 8005c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c9e:	d00b      	beq.n	8005cb8 <UART_SetConfig+0x178>
 8005ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ca4:	d811      	bhi.n	8005cca <UART_SetConfig+0x18a>
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <UART_SetConfig+0x172>
 8005caa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cae:	d006      	beq.n	8005cbe <UART_SetConfig+0x17e>
 8005cb0:	e00b      	b.n	8005cca <UART_SetConfig+0x18a>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	76fb      	strb	r3, [r7, #27]
 8005cb6:	e00d      	b.n	8005cd4 <UART_SetConfig+0x194>
 8005cb8:	2302      	movs	r3, #2
 8005cba:	76fb      	strb	r3, [r7, #27]
 8005cbc:	e00a      	b.n	8005cd4 <UART_SetConfig+0x194>
 8005cbe:	2304      	movs	r3, #4
 8005cc0:	76fb      	strb	r3, [r7, #27]
 8005cc2:	e007      	b.n	8005cd4 <UART_SetConfig+0x194>
 8005cc4:	2308      	movs	r3, #8
 8005cc6:	76fb      	strb	r3, [r7, #27]
 8005cc8:	e004      	b.n	8005cd4 <UART_SetConfig+0x194>
 8005cca:	2310      	movs	r3, #16
 8005ccc:	76fb      	strb	r3, [r7, #27]
 8005cce:	e001      	b.n	8005cd4 <UART_SetConfig+0x194>
 8005cd0:	2310      	movs	r3, #16
 8005cd2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a54      	ldr	r2, [pc, #336]	; (8005e2c <UART_SetConfig+0x2ec>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d173      	bne.n	8005dc6 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cde:	7efb      	ldrb	r3, [r7, #27]
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	d824      	bhi.n	8005d2e <UART_SetConfig+0x1ee>
 8005ce4:	a201      	add	r2, pc, #4	; (adr r2, 8005cec <UART_SetConfig+0x1ac>)
 8005ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cea:	bf00      	nop
 8005cec:	08005d11 	.word	0x08005d11
 8005cf0:	08005d2f 	.word	0x08005d2f
 8005cf4:	08005d19 	.word	0x08005d19
 8005cf8:	08005d2f 	.word	0x08005d2f
 8005cfc:	08005d1f 	.word	0x08005d1f
 8005d00:	08005d2f 	.word	0x08005d2f
 8005d04:	08005d2f 	.word	0x08005d2f
 8005d08:	08005d2f 	.word	0x08005d2f
 8005d0c:	08005d27 	.word	0x08005d27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d10:	f7ff f888 	bl	8004e24 <HAL_RCC_GetPCLK1Freq>
 8005d14:	6178      	str	r0, [r7, #20]
        break;
 8005d16:	e00f      	b.n	8005d38 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d18:	4b48      	ldr	r3, [pc, #288]	; (8005e3c <UART_SetConfig+0x2fc>)
 8005d1a:	617b      	str	r3, [r7, #20]
        break;
 8005d1c:	e00c      	b.n	8005d38 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d1e:	f7fe ffe9 	bl	8004cf4 <HAL_RCC_GetSysClockFreq>
 8005d22:	6178      	str	r0, [r7, #20]
        break;
 8005d24:	e008      	b.n	8005d38 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d2a:	617b      	str	r3, [r7, #20]
        break;
 8005d2c:	e004      	b.n	8005d38 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	76bb      	strb	r3, [r7, #26]
        break;
 8005d36:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 80fe 	beq.w	8005f3c <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	4613      	mov	r3, r2
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	4413      	add	r3, r2
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d305      	bcc.n	8005d5c <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d902      	bls.n	8005d62 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	76bb      	strb	r3, [r7, #26]
 8005d60:	e0ec      	b.n	8005f3c <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f04f 0100 	mov.w	r1, #0
 8005d6a:	f04f 0200 	mov.w	r2, #0
 8005d6e:	f04f 0300 	mov.w	r3, #0
 8005d72:	020b      	lsls	r3, r1, #8
 8005d74:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005d78:	0202      	lsls	r2, r0, #8
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	6849      	ldr	r1, [r1, #4]
 8005d7e:	0849      	lsrs	r1, r1, #1
 8005d80:	4608      	mov	r0, r1
 8005d82:	f04f 0100 	mov.w	r1, #0
 8005d86:	1814      	adds	r4, r2, r0
 8005d88:	eb43 0501 	adc.w	r5, r3, r1
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	461a      	mov	r2, r3
 8005d92:	f04f 0300 	mov.w	r3, #0
 8005d96:	4620      	mov	r0, r4
 8005d98:	4629      	mov	r1, r5
 8005d9a:	f7fa ff55 	bl	8000c48 <__aeabi_uldivmod>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	460b      	mov	r3, r1
 8005da2:	4613      	mov	r3, r2
 8005da4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dac:	d308      	bcc.n	8005dc0 <UART_SetConfig+0x280>
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005db4:	d204      	bcs.n	8005dc0 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	60da      	str	r2, [r3, #12]
 8005dbe:	e0bd      	b.n	8005f3c <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	76bb      	strb	r3, [r7, #26]
 8005dc4:	e0ba      	b.n	8005f3c <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dce:	d168      	bne.n	8005ea2 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8005dd0:	7efb      	ldrb	r3, [r7, #27]
 8005dd2:	2b08      	cmp	r3, #8
 8005dd4:	d834      	bhi.n	8005e40 <UART_SetConfig+0x300>
 8005dd6:	a201      	add	r2, pc, #4	; (adr r2, 8005ddc <UART_SetConfig+0x29c>)
 8005dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ddc:	08005e01 	.word	0x08005e01
 8005de0:	08005e09 	.word	0x08005e09
 8005de4:	08005e11 	.word	0x08005e11
 8005de8:	08005e41 	.word	0x08005e41
 8005dec:	08005e17 	.word	0x08005e17
 8005df0:	08005e41 	.word	0x08005e41
 8005df4:	08005e41 	.word	0x08005e41
 8005df8:	08005e41 	.word	0x08005e41
 8005dfc:	08005e1f 	.word	0x08005e1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e00:	f7ff f810 	bl	8004e24 <HAL_RCC_GetPCLK1Freq>
 8005e04:	6178      	str	r0, [r7, #20]
        break;
 8005e06:	e020      	b.n	8005e4a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e08:	f7ff f822 	bl	8004e50 <HAL_RCC_GetPCLK2Freq>
 8005e0c:	6178      	str	r0, [r7, #20]
        break;
 8005e0e:	e01c      	b.n	8005e4a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e10:	4b0a      	ldr	r3, [pc, #40]	; (8005e3c <UART_SetConfig+0x2fc>)
 8005e12:	617b      	str	r3, [r7, #20]
        break;
 8005e14:	e019      	b.n	8005e4a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e16:	f7fe ff6d 	bl	8004cf4 <HAL_RCC_GetSysClockFreq>
 8005e1a:	6178      	str	r0, [r7, #20]
        break;
 8005e1c:	e015      	b.n	8005e4a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e22:	617b      	str	r3, [r7, #20]
        break;
 8005e24:	e011      	b.n	8005e4a <UART_SetConfig+0x30a>
 8005e26:	bf00      	nop
 8005e28:	efff69f3 	.word	0xefff69f3
 8005e2c:	40008000 	.word	0x40008000
 8005e30:	40013800 	.word	0x40013800
 8005e34:	40021000 	.word	0x40021000
 8005e38:	40004400 	.word	0x40004400
 8005e3c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005e40:	2300      	movs	r3, #0
 8005e42:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	76bb      	strb	r3, [r7, #26]
        break;
 8005e48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d075      	beq.n	8005f3c <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	005a      	lsls	r2, r3, #1
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	085b      	lsrs	r3, r3, #1
 8005e5a:	441a      	add	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	2b0f      	cmp	r3, #15
 8005e6c:	d916      	bls.n	8005e9c <UART_SetConfig+0x35c>
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e74:	d212      	bcs.n	8005e9c <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	f023 030f 	bic.w	r3, r3, #15
 8005e7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	085b      	lsrs	r3, r3, #1
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	f003 0307 	and.w	r3, r3, #7
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	89fb      	ldrh	r3, [r7, #14]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	89fa      	ldrh	r2, [r7, #14]
 8005e98:	60da      	str	r2, [r3, #12]
 8005e9a:	e04f      	b.n	8005f3c <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	76bb      	strb	r3, [r7, #26]
 8005ea0:	e04c      	b.n	8005f3c <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ea2:	7efb      	ldrb	r3, [r7, #27]
 8005ea4:	2b08      	cmp	r3, #8
 8005ea6:	d828      	bhi.n	8005efa <UART_SetConfig+0x3ba>
 8005ea8:	a201      	add	r2, pc, #4	; (adr r2, 8005eb0 <UART_SetConfig+0x370>)
 8005eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eae:	bf00      	nop
 8005eb0:	08005ed5 	.word	0x08005ed5
 8005eb4:	08005edd 	.word	0x08005edd
 8005eb8:	08005ee5 	.word	0x08005ee5
 8005ebc:	08005efb 	.word	0x08005efb
 8005ec0:	08005eeb 	.word	0x08005eeb
 8005ec4:	08005efb 	.word	0x08005efb
 8005ec8:	08005efb 	.word	0x08005efb
 8005ecc:	08005efb 	.word	0x08005efb
 8005ed0:	08005ef3 	.word	0x08005ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ed4:	f7fe ffa6 	bl	8004e24 <HAL_RCC_GetPCLK1Freq>
 8005ed8:	6178      	str	r0, [r7, #20]
        break;
 8005eda:	e013      	b.n	8005f04 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005edc:	f7fe ffb8 	bl	8004e50 <HAL_RCC_GetPCLK2Freq>
 8005ee0:	6178      	str	r0, [r7, #20]
        break;
 8005ee2:	e00f      	b.n	8005f04 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ee4:	4b1b      	ldr	r3, [pc, #108]	; (8005f54 <UART_SetConfig+0x414>)
 8005ee6:	617b      	str	r3, [r7, #20]
        break;
 8005ee8:	e00c      	b.n	8005f04 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eea:	f7fe ff03 	bl	8004cf4 <HAL_RCC_GetSysClockFreq>
 8005eee:	6178      	str	r0, [r7, #20]
        break;
 8005ef0:	e008      	b.n	8005f04 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ef6:	617b      	str	r3, [r7, #20]
        break;
 8005ef8:	e004      	b.n	8005f04 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	76bb      	strb	r3, [r7, #26]
        break;
 8005f02:	bf00      	nop
    }

    if (pclk != 0U)
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d018      	beq.n	8005f3c <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	085a      	lsrs	r2, r3, #1
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	441a      	add	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	2b0f      	cmp	r3, #15
 8005f24:	d908      	bls.n	8005f38 <UART_SetConfig+0x3f8>
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f2c:	d204      	bcs.n	8005f38 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	60da      	str	r2, [r3, #12]
 8005f36:	e001      	b.n	8005f3c <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005f48:	7ebb      	ldrb	r3, [r7, #26]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3720      	adds	r7, #32
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bdb0      	pop	{r4, r5, r7, pc}
 8005f52:	bf00      	nop
 8005f54:	00f42400 	.word	0x00f42400

08005f58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00a      	beq.n	8005f82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00a      	beq.n	8005fa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa8:	f003 0304 	and.w	r3, r3, #4
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00a      	beq.n	8005fc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	430a      	orrs	r2, r1
 8005fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fca:	f003 0308 	and.w	r3, r3, #8
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fec:	f003 0310 	and.w	r3, r3, #16
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00a      	beq.n	800600a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	f003 0320 	and.w	r3, r3, #32
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006034:	2b00      	cmp	r3, #0
 8006036:	d01a      	beq.n	800606e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006056:	d10a      	bne.n	800606e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	430a      	orrs	r2, r1
 800606c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	605a      	str	r2, [r3, #4]
  }
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af02      	add	r7, sp, #8
 80060a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060ac:	f7fb ff5a 	bl	8001f64 <HAL_GetTick>
 80060b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0308 	and.w	r3, r3, #8
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d10e      	bne.n	80060de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f82d 	bl	800612e <UART_WaitOnFlagUntilTimeout>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e023      	b.n	8006126 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b04      	cmp	r3, #4
 80060ea:	d10e      	bne.n	800610a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f817 	bl	800612e <UART_WaitOnFlagUntilTimeout>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e00d      	b.n	8006126 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2220      	movs	r2, #32
 800610e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2220      	movs	r2, #32
 8006114:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b084      	sub	sp, #16
 8006132:	af00      	add	r7, sp, #0
 8006134:	60f8      	str	r0, [r7, #12]
 8006136:	60b9      	str	r1, [r7, #8]
 8006138:	603b      	str	r3, [r7, #0]
 800613a:	4613      	mov	r3, r2
 800613c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800613e:	e05e      	b.n	80061fe <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006146:	d05a      	beq.n	80061fe <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006148:	f7fb ff0c 	bl	8001f64 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	429a      	cmp	r2, r3
 8006156:	d302      	bcc.n	800615e <UART_WaitOnFlagUntilTimeout+0x30>
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d11b      	bne.n	8006196 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800616c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689a      	ldr	r2, [r3, #8]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f022 0201 	bic.w	r2, r2, #1
 800617c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2220      	movs	r2, #32
 8006182:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2220      	movs	r2, #32
 8006188:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e043      	b.n	800621e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d02c      	beq.n	80061fe <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061b2:	d124      	bne.n	80061fe <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061bc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061cc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689a      	ldr	r2, [r3, #8]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f022 0201 	bic.w	r2, r2, #1
 80061dc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2220      	movs	r2, #32
 80061e2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2220      	movs	r2, #32
 80061e8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2220      	movs	r2, #32
 80061ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e00f      	b.n	800621e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69da      	ldr	r2, [r3, #28]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	4013      	ands	r3, r2
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	429a      	cmp	r2, r3
 800620c:	bf0c      	ite	eq
 800620e:	2301      	moveq	r3, #1
 8006210:	2300      	movne	r3, #0
 8006212:	b2db      	uxtb	r3, r3
 8006214:	461a      	mov	r2, r3
 8006216:	79fb      	ldrb	r3, [r7, #7]
 8006218:	429a      	cmp	r2, r3
 800621a:	d091      	beq.n	8006140 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
	...

08006228 <__errno>:
 8006228:	4b01      	ldr	r3, [pc, #4]	; (8006230 <__errno+0x8>)
 800622a:	6818      	ldr	r0, [r3, #0]
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	20000014 	.word	0x20000014

08006234 <__libc_init_array>:
 8006234:	b570      	push	{r4, r5, r6, lr}
 8006236:	4d0d      	ldr	r5, [pc, #52]	; (800626c <__libc_init_array+0x38>)
 8006238:	4c0d      	ldr	r4, [pc, #52]	; (8006270 <__libc_init_array+0x3c>)
 800623a:	1b64      	subs	r4, r4, r5
 800623c:	10a4      	asrs	r4, r4, #2
 800623e:	2600      	movs	r6, #0
 8006240:	42a6      	cmp	r6, r4
 8006242:	d109      	bne.n	8006258 <__libc_init_array+0x24>
 8006244:	4d0b      	ldr	r5, [pc, #44]	; (8006274 <__libc_init_array+0x40>)
 8006246:	4c0c      	ldr	r4, [pc, #48]	; (8006278 <__libc_init_array+0x44>)
 8006248:	f002 fecc 	bl	8008fe4 <_init>
 800624c:	1b64      	subs	r4, r4, r5
 800624e:	10a4      	asrs	r4, r4, #2
 8006250:	2600      	movs	r6, #0
 8006252:	42a6      	cmp	r6, r4
 8006254:	d105      	bne.n	8006262 <__libc_init_array+0x2e>
 8006256:	bd70      	pop	{r4, r5, r6, pc}
 8006258:	f855 3b04 	ldr.w	r3, [r5], #4
 800625c:	4798      	blx	r3
 800625e:	3601      	adds	r6, #1
 8006260:	e7ee      	b.n	8006240 <__libc_init_array+0xc>
 8006262:	f855 3b04 	ldr.w	r3, [r5], #4
 8006266:	4798      	blx	r3
 8006268:	3601      	adds	r6, #1
 800626a:	e7f2      	b.n	8006252 <__libc_init_array+0x1e>
 800626c:	08009bbc 	.word	0x08009bbc
 8006270:	08009bbc 	.word	0x08009bbc
 8006274:	08009bbc 	.word	0x08009bbc
 8006278:	08009bc0 	.word	0x08009bc0

0800627c <memset>:
 800627c:	4402      	add	r2, r0
 800627e:	4603      	mov	r3, r0
 8006280:	4293      	cmp	r3, r2
 8006282:	d100      	bne.n	8006286 <memset+0xa>
 8006284:	4770      	bx	lr
 8006286:	f803 1b01 	strb.w	r1, [r3], #1
 800628a:	e7f9      	b.n	8006280 <memset+0x4>

0800628c <__cvt>:
 800628c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006290:	ec55 4b10 	vmov	r4, r5, d0
 8006294:	2d00      	cmp	r5, #0
 8006296:	460e      	mov	r6, r1
 8006298:	4619      	mov	r1, r3
 800629a:	462b      	mov	r3, r5
 800629c:	bfbb      	ittet	lt
 800629e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80062a2:	461d      	movlt	r5, r3
 80062a4:	2300      	movge	r3, #0
 80062a6:	232d      	movlt	r3, #45	; 0x2d
 80062a8:	700b      	strb	r3, [r1, #0]
 80062aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80062b0:	4691      	mov	r9, r2
 80062b2:	f023 0820 	bic.w	r8, r3, #32
 80062b6:	bfbc      	itt	lt
 80062b8:	4622      	movlt	r2, r4
 80062ba:	4614      	movlt	r4, r2
 80062bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062c0:	d005      	beq.n	80062ce <__cvt+0x42>
 80062c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80062c6:	d100      	bne.n	80062ca <__cvt+0x3e>
 80062c8:	3601      	adds	r6, #1
 80062ca:	2102      	movs	r1, #2
 80062cc:	e000      	b.n	80062d0 <__cvt+0x44>
 80062ce:	2103      	movs	r1, #3
 80062d0:	ab03      	add	r3, sp, #12
 80062d2:	9301      	str	r3, [sp, #4]
 80062d4:	ab02      	add	r3, sp, #8
 80062d6:	9300      	str	r3, [sp, #0]
 80062d8:	ec45 4b10 	vmov	d0, r4, r5
 80062dc:	4653      	mov	r3, sl
 80062de:	4632      	mov	r2, r6
 80062e0:	f000 fd02 	bl	8006ce8 <_dtoa_r>
 80062e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80062e8:	4607      	mov	r7, r0
 80062ea:	d102      	bne.n	80062f2 <__cvt+0x66>
 80062ec:	f019 0f01 	tst.w	r9, #1
 80062f0:	d022      	beq.n	8006338 <__cvt+0xac>
 80062f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062f6:	eb07 0906 	add.w	r9, r7, r6
 80062fa:	d110      	bne.n	800631e <__cvt+0x92>
 80062fc:	783b      	ldrb	r3, [r7, #0]
 80062fe:	2b30      	cmp	r3, #48	; 0x30
 8006300:	d10a      	bne.n	8006318 <__cvt+0x8c>
 8006302:	2200      	movs	r2, #0
 8006304:	2300      	movs	r3, #0
 8006306:	4620      	mov	r0, r4
 8006308:	4629      	mov	r1, r5
 800630a:	f7fa fbdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800630e:	b918      	cbnz	r0, 8006318 <__cvt+0x8c>
 8006310:	f1c6 0601 	rsb	r6, r6, #1
 8006314:	f8ca 6000 	str.w	r6, [sl]
 8006318:	f8da 3000 	ldr.w	r3, [sl]
 800631c:	4499      	add	r9, r3
 800631e:	2200      	movs	r2, #0
 8006320:	2300      	movs	r3, #0
 8006322:	4620      	mov	r0, r4
 8006324:	4629      	mov	r1, r5
 8006326:	f7fa fbcf 	bl	8000ac8 <__aeabi_dcmpeq>
 800632a:	b108      	cbz	r0, 8006330 <__cvt+0xa4>
 800632c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006330:	2230      	movs	r2, #48	; 0x30
 8006332:	9b03      	ldr	r3, [sp, #12]
 8006334:	454b      	cmp	r3, r9
 8006336:	d307      	bcc.n	8006348 <__cvt+0xbc>
 8006338:	9b03      	ldr	r3, [sp, #12]
 800633a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800633c:	1bdb      	subs	r3, r3, r7
 800633e:	4638      	mov	r0, r7
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	b004      	add	sp, #16
 8006344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006348:	1c59      	adds	r1, r3, #1
 800634a:	9103      	str	r1, [sp, #12]
 800634c:	701a      	strb	r2, [r3, #0]
 800634e:	e7f0      	b.n	8006332 <__cvt+0xa6>

08006350 <__exponent>:
 8006350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006352:	4603      	mov	r3, r0
 8006354:	2900      	cmp	r1, #0
 8006356:	bfb8      	it	lt
 8006358:	4249      	neglt	r1, r1
 800635a:	f803 2b02 	strb.w	r2, [r3], #2
 800635e:	bfb4      	ite	lt
 8006360:	222d      	movlt	r2, #45	; 0x2d
 8006362:	222b      	movge	r2, #43	; 0x2b
 8006364:	2909      	cmp	r1, #9
 8006366:	7042      	strb	r2, [r0, #1]
 8006368:	dd2a      	ble.n	80063c0 <__exponent+0x70>
 800636a:	f10d 0407 	add.w	r4, sp, #7
 800636e:	46a4      	mov	ip, r4
 8006370:	270a      	movs	r7, #10
 8006372:	46a6      	mov	lr, r4
 8006374:	460a      	mov	r2, r1
 8006376:	fb91 f6f7 	sdiv	r6, r1, r7
 800637a:	fb07 1516 	mls	r5, r7, r6, r1
 800637e:	3530      	adds	r5, #48	; 0x30
 8006380:	2a63      	cmp	r2, #99	; 0x63
 8006382:	f104 34ff 	add.w	r4, r4, #4294967295
 8006386:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800638a:	4631      	mov	r1, r6
 800638c:	dcf1      	bgt.n	8006372 <__exponent+0x22>
 800638e:	3130      	adds	r1, #48	; 0x30
 8006390:	f1ae 0502 	sub.w	r5, lr, #2
 8006394:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006398:	1c44      	adds	r4, r0, #1
 800639a:	4629      	mov	r1, r5
 800639c:	4561      	cmp	r1, ip
 800639e:	d30a      	bcc.n	80063b6 <__exponent+0x66>
 80063a0:	f10d 0209 	add.w	r2, sp, #9
 80063a4:	eba2 020e 	sub.w	r2, r2, lr
 80063a8:	4565      	cmp	r5, ip
 80063aa:	bf88      	it	hi
 80063ac:	2200      	movhi	r2, #0
 80063ae:	4413      	add	r3, r2
 80063b0:	1a18      	subs	r0, r3, r0
 80063b2:	b003      	add	sp, #12
 80063b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80063be:	e7ed      	b.n	800639c <__exponent+0x4c>
 80063c0:	2330      	movs	r3, #48	; 0x30
 80063c2:	3130      	adds	r1, #48	; 0x30
 80063c4:	7083      	strb	r3, [r0, #2]
 80063c6:	70c1      	strb	r1, [r0, #3]
 80063c8:	1d03      	adds	r3, r0, #4
 80063ca:	e7f1      	b.n	80063b0 <__exponent+0x60>

080063cc <_printf_float>:
 80063cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d0:	ed2d 8b02 	vpush	{d8}
 80063d4:	b08d      	sub	sp, #52	; 0x34
 80063d6:	460c      	mov	r4, r1
 80063d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80063dc:	4616      	mov	r6, r2
 80063de:	461f      	mov	r7, r3
 80063e0:	4605      	mov	r5, r0
 80063e2:	f001 fb63 	bl	8007aac <_localeconv_r>
 80063e6:	f8d0 a000 	ldr.w	sl, [r0]
 80063ea:	4650      	mov	r0, sl
 80063ec:	f7f9 fef0 	bl	80001d0 <strlen>
 80063f0:	2300      	movs	r3, #0
 80063f2:	930a      	str	r3, [sp, #40]	; 0x28
 80063f4:	6823      	ldr	r3, [r4, #0]
 80063f6:	9305      	str	r3, [sp, #20]
 80063f8:	f8d8 3000 	ldr.w	r3, [r8]
 80063fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006400:	3307      	adds	r3, #7
 8006402:	f023 0307 	bic.w	r3, r3, #7
 8006406:	f103 0208 	add.w	r2, r3, #8
 800640a:	f8c8 2000 	str.w	r2, [r8]
 800640e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006412:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006416:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800641a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800641e:	9307      	str	r3, [sp, #28]
 8006420:	f8cd 8018 	str.w	r8, [sp, #24]
 8006424:	ee08 0a10 	vmov	s16, r0
 8006428:	4b9f      	ldr	r3, [pc, #636]	; (80066a8 <_printf_float+0x2dc>)
 800642a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800642e:	f04f 32ff 	mov.w	r2, #4294967295
 8006432:	f7fa fb7b 	bl	8000b2c <__aeabi_dcmpun>
 8006436:	bb88      	cbnz	r0, 800649c <_printf_float+0xd0>
 8006438:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800643c:	4b9a      	ldr	r3, [pc, #616]	; (80066a8 <_printf_float+0x2dc>)
 800643e:	f04f 32ff 	mov.w	r2, #4294967295
 8006442:	f7fa fb55 	bl	8000af0 <__aeabi_dcmple>
 8006446:	bb48      	cbnz	r0, 800649c <_printf_float+0xd0>
 8006448:	2200      	movs	r2, #0
 800644a:	2300      	movs	r3, #0
 800644c:	4640      	mov	r0, r8
 800644e:	4649      	mov	r1, r9
 8006450:	f7fa fb44 	bl	8000adc <__aeabi_dcmplt>
 8006454:	b110      	cbz	r0, 800645c <_printf_float+0x90>
 8006456:	232d      	movs	r3, #45	; 0x2d
 8006458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800645c:	4b93      	ldr	r3, [pc, #588]	; (80066ac <_printf_float+0x2e0>)
 800645e:	4894      	ldr	r0, [pc, #592]	; (80066b0 <_printf_float+0x2e4>)
 8006460:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006464:	bf94      	ite	ls
 8006466:	4698      	movls	r8, r3
 8006468:	4680      	movhi	r8, r0
 800646a:	2303      	movs	r3, #3
 800646c:	6123      	str	r3, [r4, #16]
 800646e:	9b05      	ldr	r3, [sp, #20]
 8006470:	f023 0204 	bic.w	r2, r3, #4
 8006474:	6022      	str	r2, [r4, #0]
 8006476:	f04f 0900 	mov.w	r9, #0
 800647a:	9700      	str	r7, [sp, #0]
 800647c:	4633      	mov	r3, r6
 800647e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006480:	4621      	mov	r1, r4
 8006482:	4628      	mov	r0, r5
 8006484:	f000 f9d8 	bl	8006838 <_printf_common>
 8006488:	3001      	adds	r0, #1
 800648a:	f040 8090 	bne.w	80065ae <_printf_float+0x1e2>
 800648e:	f04f 30ff 	mov.w	r0, #4294967295
 8006492:	b00d      	add	sp, #52	; 0x34
 8006494:	ecbd 8b02 	vpop	{d8}
 8006498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649c:	4642      	mov	r2, r8
 800649e:	464b      	mov	r3, r9
 80064a0:	4640      	mov	r0, r8
 80064a2:	4649      	mov	r1, r9
 80064a4:	f7fa fb42 	bl	8000b2c <__aeabi_dcmpun>
 80064a8:	b140      	cbz	r0, 80064bc <_printf_float+0xf0>
 80064aa:	464b      	mov	r3, r9
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	bfbc      	itt	lt
 80064b0:	232d      	movlt	r3, #45	; 0x2d
 80064b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80064b6:	487f      	ldr	r0, [pc, #508]	; (80066b4 <_printf_float+0x2e8>)
 80064b8:	4b7f      	ldr	r3, [pc, #508]	; (80066b8 <_printf_float+0x2ec>)
 80064ba:	e7d1      	b.n	8006460 <_printf_float+0x94>
 80064bc:	6863      	ldr	r3, [r4, #4]
 80064be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80064c2:	9206      	str	r2, [sp, #24]
 80064c4:	1c5a      	adds	r2, r3, #1
 80064c6:	d13f      	bne.n	8006548 <_printf_float+0x17c>
 80064c8:	2306      	movs	r3, #6
 80064ca:	6063      	str	r3, [r4, #4]
 80064cc:	9b05      	ldr	r3, [sp, #20]
 80064ce:	6861      	ldr	r1, [r4, #4]
 80064d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80064d4:	2300      	movs	r3, #0
 80064d6:	9303      	str	r3, [sp, #12]
 80064d8:	ab0a      	add	r3, sp, #40	; 0x28
 80064da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80064de:	ab09      	add	r3, sp, #36	; 0x24
 80064e0:	ec49 8b10 	vmov	d0, r8, r9
 80064e4:	9300      	str	r3, [sp, #0]
 80064e6:	6022      	str	r2, [r4, #0]
 80064e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80064ec:	4628      	mov	r0, r5
 80064ee:	f7ff fecd 	bl	800628c <__cvt>
 80064f2:	9b06      	ldr	r3, [sp, #24]
 80064f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064f6:	2b47      	cmp	r3, #71	; 0x47
 80064f8:	4680      	mov	r8, r0
 80064fa:	d108      	bne.n	800650e <_printf_float+0x142>
 80064fc:	1cc8      	adds	r0, r1, #3
 80064fe:	db02      	blt.n	8006506 <_printf_float+0x13a>
 8006500:	6863      	ldr	r3, [r4, #4]
 8006502:	4299      	cmp	r1, r3
 8006504:	dd41      	ble.n	800658a <_printf_float+0x1be>
 8006506:	f1ab 0b02 	sub.w	fp, fp, #2
 800650a:	fa5f fb8b 	uxtb.w	fp, fp
 800650e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006512:	d820      	bhi.n	8006556 <_printf_float+0x18a>
 8006514:	3901      	subs	r1, #1
 8006516:	465a      	mov	r2, fp
 8006518:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800651c:	9109      	str	r1, [sp, #36]	; 0x24
 800651e:	f7ff ff17 	bl	8006350 <__exponent>
 8006522:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006524:	1813      	adds	r3, r2, r0
 8006526:	2a01      	cmp	r2, #1
 8006528:	4681      	mov	r9, r0
 800652a:	6123      	str	r3, [r4, #16]
 800652c:	dc02      	bgt.n	8006534 <_printf_float+0x168>
 800652e:	6822      	ldr	r2, [r4, #0]
 8006530:	07d2      	lsls	r2, r2, #31
 8006532:	d501      	bpl.n	8006538 <_printf_float+0x16c>
 8006534:	3301      	adds	r3, #1
 8006536:	6123      	str	r3, [r4, #16]
 8006538:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800653c:	2b00      	cmp	r3, #0
 800653e:	d09c      	beq.n	800647a <_printf_float+0xae>
 8006540:	232d      	movs	r3, #45	; 0x2d
 8006542:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006546:	e798      	b.n	800647a <_printf_float+0xae>
 8006548:	9a06      	ldr	r2, [sp, #24]
 800654a:	2a47      	cmp	r2, #71	; 0x47
 800654c:	d1be      	bne.n	80064cc <_printf_float+0x100>
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1bc      	bne.n	80064cc <_printf_float+0x100>
 8006552:	2301      	movs	r3, #1
 8006554:	e7b9      	b.n	80064ca <_printf_float+0xfe>
 8006556:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800655a:	d118      	bne.n	800658e <_printf_float+0x1c2>
 800655c:	2900      	cmp	r1, #0
 800655e:	6863      	ldr	r3, [r4, #4]
 8006560:	dd0b      	ble.n	800657a <_printf_float+0x1ae>
 8006562:	6121      	str	r1, [r4, #16]
 8006564:	b913      	cbnz	r3, 800656c <_printf_float+0x1a0>
 8006566:	6822      	ldr	r2, [r4, #0]
 8006568:	07d0      	lsls	r0, r2, #31
 800656a:	d502      	bpl.n	8006572 <_printf_float+0x1a6>
 800656c:	3301      	adds	r3, #1
 800656e:	440b      	add	r3, r1
 8006570:	6123      	str	r3, [r4, #16]
 8006572:	65a1      	str	r1, [r4, #88]	; 0x58
 8006574:	f04f 0900 	mov.w	r9, #0
 8006578:	e7de      	b.n	8006538 <_printf_float+0x16c>
 800657a:	b913      	cbnz	r3, 8006582 <_printf_float+0x1b6>
 800657c:	6822      	ldr	r2, [r4, #0]
 800657e:	07d2      	lsls	r2, r2, #31
 8006580:	d501      	bpl.n	8006586 <_printf_float+0x1ba>
 8006582:	3302      	adds	r3, #2
 8006584:	e7f4      	b.n	8006570 <_printf_float+0x1a4>
 8006586:	2301      	movs	r3, #1
 8006588:	e7f2      	b.n	8006570 <_printf_float+0x1a4>
 800658a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800658e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006590:	4299      	cmp	r1, r3
 8006592:	db05      	blt.n	80065a0 <_printf_float+0x1d4>
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	6121      	str	r1, [r4, #16]
 8006598:	07d8      	lsls	r0, r3, #31
 800659a:	d5ea      	bpl.n	8006572 <_printf_float+0x1a6>
 800659c:	1c4b      	adds	r3, r1, #1
 800659e:	e7e7      	b.n	8006570 <_printf_float+0x1a4>
 80065a0:	2900      	cmp	r1, #0
 80065a2:	bfd4      	ite	le
 80065a4:	f1c1 0202 	rsble	r2, r1, #2
 80065a8:	2201      	movgt	r2, #1
 80065aa:	4413      	add	r3, r2
 80065ac:	e7e0      	b.n	8006570 <_printf_float+0x1a4>
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	055a      	lsls	r2, r3, #21
 80065b2:	d407      	bmi.n	80065c4 <_printf_float+0x1f8>
 80065b4:	6923      	ldr	r3, [r4, #16]
 80065b6:	4642      	mov	r2, r8
 80065b8:	4631      	mov	r1, r6
 80065ba:	4628      	mov	r0, r5
 80065bc:	47b8      	blx	r7
 80065be:	3001      	adds	r0, #1
 80065c0:	d12c      	bne.n	800661c <_printf_float+0x250>
 80065c2:	e764      	b.n	800648e <_printf_float+0xc2>
 80065c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80065c8:	f240 80e0 	bls.w	800678c <_printf_float+0x3c0>
 80065cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065d0:	2200      	movs	r2, #0
 80065d2:	2300      	movs	r3, #0
 80065d4:	f7fa fa78 	bl	8000ac8 <__aeabi_dcmpeq>
 80065d8:	2800      	cmp	r0, #0
 80065da:	d034      	beq.n	8006646 <_printf_float+0x27a>
 80065dc:	4a37      	ldr	r2, [pc, #220]	; (80066bc <_printf_float+0x2f0>)
 80065de:	2301      	movs	r3, #1
 80065e0:	4631      	mov	r1, r6
 80065e2:	4628      	mov	r0, r5
 80065e4:	47b8      	blx	r7
 80065e6:	3001      	adds	r0, #1
 80065e8:	f43f af51 	beq.w	800648e <_printf_float+0xc2>
 80065ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065f0:	429a      	cmp	r2, r3
 80065f2:	db02      	blt.n	80065fa <_printf_float+0x22e>
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	07d8      	lsls	r0, r3, #31
 80065f8:	d510      	bpl.n	800661c <_printf_float+0x250>
 80065fa:	ee18 3a10 	vmov	r3, s16
 80065fe:	4652      	mov	r2, sl
 8006600:	4631      	mov	r1, r6
 8006602:	4628      	mov	r0, r5
 8006604:	47b8      	blx	r7
 8006606:	3001      	adds	r0, #1
 8006608:	f43f af41 	beq.w	800648e <_printf_float+0xc2>
 800660c:	f04f 0800 	mov.w	r8, #0
 8006610:	f104 091a 	add.w	r9, r4, #26
 8006614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006616:	3b01      	subs	r3, #1
 8006618:	4543      	cmp	r3, r8
 800661a:	dc09      	bgt.n	8006630 <_printf_float+0x264>
 800661c:	6823      	ldr	r3, [r4, #0]
 800661e:	079b      	lsls	r3, r3, #30
 8006620:	f100 8105 	bmi.w	800682e <_printf_float+0x462>
 8006624:	68e0      	ldr	r0, [r4, #12]
 8006626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006628:	4298      	cmp	r0, r3
 800662a:	bfb8      	it	lt
 800662c:	4618      	movlt	r0, r3
 800662e:	e730      	b.n	8006492 <_printf_float+0xc6>
 8006630:	2301      	movs	r3, #1
 8006632:	464a      	mov	r2, r9
 8006634:	4631      	mov	r1, r6
 8006636:	4628      	mov	r0, r5
 8006638:	47b8      	blx	r7
 800663a:	3001      	adds	r0, #1
 800663c:	f43f af27 	beq.w	800648e <_printf_float+0xc2>
 8006640:	f108 0801 	add.w	r8, r8, #1
 8006644:	e7e6      	b.n	8006614 <_printf_float+0x248>
 8006646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006648:	2b00      	cmp	r3, #0
 800664a:	dc39      	bgt.n	80066c0 <_printf_float+0x2f4>
 800664c:	4a1b      	ldr	r2, [pc, #108]	; (80066bc <_printf_float+0x2f0>)
 800664e:	2301      	movs	r3, #1
 8006650:	4631      	mov	r1, r6
 8006652:	4628      	mov	r0, r5
 8006654:	47b8      	blx	r7
 8006656:	3001      	adds	r0, #1
 8006658:	f43f af19 	beq.w	800648e <_printf_float+0xc2>
 800665c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006660:	4313      	orrs	r3, r2
 8006662:	d102      	bne.n	800666a <_printf_float+0x29e>
 8006664:	6823      	ldr	r3, [r4, #0]
 8006666:	07d9      	lsls	r1, r3, #31
 8006668:	d5d8      	bpl.n	800661c <_printf_float+0x250>
 800666a:	ee18 3a10 	vmov	r3, s16
 800666e:	4652      	mov	r2, sl
 8006670:	4631      	mov	r1, r6
 8006672:	4628      	mov	r0, r5
 8006674:	47b8      	blx	r7
 8006676:	3001      	adds	r0, #1
 8006678:	f43f af09 	beq.w	800648e <_printf_float+0xc2>
 800667c:	f04f 0900 	mov.w	r9, #0
 8006680:	f104 0a1a 	add.w	sl, r4, #26
 8006684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006686:	425b      	negs	r3, r3
 8006688:	454b      	cmp	r3, r9
 800668a:	dc01      	bgt.n	8006690 <_printf_float+0x2c4>
 800668c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800668e:	e792      	b.n	80065b6 <_printf_float+0x1ea>
 8006690:	2301      	movs	r3, #1
 8006692:	4652      	mov	r2, sl
 8006694:	4631      	mov	r1, r6
 8006696:	4628      	mov	r0, r5
 8006698:	47b8      	blx	r7
 800669a:	3001      	adds	r0, #1
 800669c:	f43f aef7 	beq.w	800648e <_printf_float+0xc2>
 80066a0:	f109 0901 	add.w	r9, r9, #1
 80066a4:	e7ee      	b.n	8006684 <_printf_float+0x2b8>
 80066a6:	bf00      	nop
 80066a8:	7fefffff 	.word	0x7fefffff
 80066ac:	080097d4 	.word	0x080097d4
 80066b0:	080097d8 	.word	0x080097d8
 80066b4:	080097e0 	.word	0x080097e0
 80066b8:	080097dc 	.word	0x080097dc
 80066bc:	080097e4 	.word	0x080097e4
 80066c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066c4:	429a      	cmp	r2, r3
 80066c6:	bfa8      	it	ge
 80066c8:	461a      	movge	r2, r3
 80066ca:	2a00      	cmp	r2, #0
 80066cc:	4691      	mov	r9, r2
 80066ce:	dc37      	bgt.n	8006740 <_printf_float+0x374>
 80066d0:	f04f 0b00 	mov.w	fp, #0
 80066d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066d8:	f104 021a 	add.w	r2, r4, #26
 80066dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066de:	9305      	str	r3, [sp, #20]
 80066e0:	eba3 0309 	sub.w	r3, r3, r9
 80066e4:	455b      	cmp	r3, fp
 80066e6:	dc33      	bgt.n	8006750 <_printf_float+0x384>
 80066e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066ec:	429a      	cmp	r2, r3
 80066ee:	db3b      	blt.n	8006768 <_printf_float+0x39c>
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	07da      	lsls	r2, r3, #31
 80066f4:	d438      	bmi.n	8006768 <_printf_float+0x39c>
 80066f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066f8:	9b05      	ldr	r3, [sp, #20]
 80066fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	eba2 0901 	sub.w	r9, r2, r1
 8006702:	4599      	cmp	r9, r3
 8006704:	bfa8      	it	ge
 8006706:	4699      	movge	r9, r3
 8006708:	f1b9 0f00 	cmp.w	r9, #0
 800670c:	dc35      	bgt.n	800677a <_printf_float+0x3ae>
 800670e:	f04f 0800 	mov.w	r8, #0
 8006712:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006716:	f104 0a1a 	add.w	sl, r4, #26
 800671a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800671e:	1a9b      	subs	r3, r3, r2
 8006720:	eba3 0309 	sub.w	r3, r3, r9
 8006724:	4543      	cmp	r3, r8
 8006726:	f77f af79 	ble.w	800661c <_printf_float+0x250>
 800672a:	2301      	movs	r3, #1
 800672c:	4652      	mov	r2, sl
 800672e:	4631      	mov	r1, r6
 8006730:	4628      	mov	r0, r5
 8006732:	47b8      	blx	r7
 8006734:	3001      	adds	r0, #1
 8006736:	f43f aeaa 	beq.w	800648e <_printf_float+0xc2>
 800673a:	f108 0801 	add.w	r8, r8, #1
 800673e:	e7ec      	b.n	800671a <_printf_float+0x34e>
 8006740:	4613      	mov	r3, r2
 8006742:	4631      	mov	r1, r6
 8006744:	4642      	mov	r2, r8
 8006746:	4628      	mov	r0, r5
 8006748:	47b8      	blx	r7
 800674a:	3001      	adds	r0, #1
 800674c:	d1c0      	bne.n	80066d0 <_printf_float+0x304>
 800674e:	e69e      	b.n	800648e <_printf_float+0xc2>
 8006750:	2301      	movs	r3, #1
 8006752:	4631      	mov	r1, r6
 8006754:	4628      	mov	r0, r5
 8006756:	9205      	str	r2, [sp, #20]
 8006758:	47b8      	blx	r7
 800675a:	3001      	adds	r0, #1
 800675c:	f43f ae97 	beq.w	800648e <_printf_float+0xc2>
 8006760:	9a05      	ldr	r2, [sp, #20]
 8006762:	f10b 0b01 	add.w	fp, fp, #1
 8006766:	e7b9      	b.n	80066dc <_printf_float+0x310>
 8006768:	ee18 3a10 	vmov	r3, s16
 800676c:	4652      	mov	r2, sl
 800676e:	4631      	mov	r1, r6
 8006770:	4628      	mov	r0, r5
 8006772:	47b8      	blx	r7
 8006774:	3001      	adds	r0, #1
 8006776:	d1be      	bne.n	80066f6 <_printf_float+0x32a>
 8006778:	e689      	b.n	800648e <_printf_float+0xc2>
 800677a:	9a05      	ldr	r2, [sp, #20]
 800677c:	464b      	mov	r3, r9
 800677e:	4442      	add	r2, r8
 8006780:	4631      	mov	r1, r6
 8006782:	4628      	mov	r0, r5
 8006784:	47b8      	blx	r7
 8006786:	3001      	adds	r0, #1
 8006788:	d1c1      	bne.n	800670e <_printf_float+0x342>
 800678a:	e680      	b.n	800648e <_printf_float+0xc2>
 800678c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800678e:	2a01      	cmp	r2, #1
 8006790:	dc01      	bgt.n	8006796 <_printf_float+0x3ca>
 8006792:	07db      	lsls	r3, r3, #31
 8006794:	d538      	bpl.n	8006808 <_printf_float+0x43c>
 8006796:	2301      	movs	r3, #1
 8006798:	4642      	mov	r2, r8
 800679a:	4631      	mov	r1, r6
 800679c:	4628      	mov	r0, r5
 800679e:	47b8      	blx	r7
 80067a0:	3001      	adds	r0, #1
 80067a2:	f43f ae74 	beq.w	800648e <_printf_float+0xc2>
 80067a6:	ee18 3a10 	vmov	r3, s16
 80067aa:	4652      	mov	r2, sl
 80067ac:	4631      	mov	r1, r6
 80067ae:	4628      	mov	r0, r5
 80067b0:	47b8      	blx	r7
 80067b2:	3001      	adds	r0, #1
 80067b4:	f43f ae6b 	beq.w	800648e <_printf_float+0xc2>
 80067b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067bc:	2200      	movs	r2, #0
 80067be:	2300      	movs	r3, #0
 80067c0:	f7fa f982 	bl	8000ac8 <__aeabi_dcmpeq>
 80067c4:	b9d8      	cbnz	r0, 80067fe <_printf_float+0x432>
 80067c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067c8:	f108 0201 	add.w	r2, r8, #1
 80067cc:	3b01      	subs	r3, #1
 80067ce:	4631      	mov	r1, r6
 80067d0:	4628      	mov	r0, r5
 80067d2:	47b8      	blx	r7
 80067d4:	3001      	adds	r0, #1
 80067d6:	d10e      	bne.n	80067f6 <_printf_float+0x42a>
 80067d8:	e659      	b.n	800648e <_printf_float+0xc2>
 80067da:	2301      	movs	r3, #1
 80067dc:	4652      	mov	r2, sl
 80067de:	4631      	mov	r1, r6
 80067e0:	4628      	mov	r0, r5
 80067e2:	47b8      	blx	r7
 80067e4:	3001      	adds	r0, #1
 80067e6:	f43f ae52 	beq.w	800648e <_printf_float+0xc2>
 80067ea:	f108 0801 	add.w	r8, r8, #1
 80067ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067f0:	3b01      	subs	r3, #1
 80067f2:	4543      	cmp	r3, r8
 80067f4:	dcf1      	bgt.n	80067da <_printf_float+0x40e>
 80067f6:	464b      	mov	r3, r9
 80067f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80067fc:	e6dc      	b.n	80065b8 <_printf_float+0x1ec>
 80067fe:	f04f 0800 	mov.w	r8, #0
 8006802:	f104 0a1a 	add.w	sl, r4, #26
 8006806:	e7f2      	b.n	80067ee <_printf_float+0x422>
 8006808:	2301      	movs	r3, #1
 800680a:	4642      	mov	r2, r8
 800680c:	e7df      	b.n	80067ce <_printf_float+0x402>
 800680e:	2301      	movs	r3, #1
 8006810:	464a      	mov	r2, r9
 8006812:	4631      	mov	r1, r6
 8006814:	4628      	mov	r0, r5
 8006816:	47b8      	blx	r7
 8006818:	3001      	adds	r0, #1
 800681a:	f43f ae38 	beq.w	800648e <_printf_float+0xc2>
 800681e:	f108 0801 	add.w	r8, r8, #1
 8006822:	68e3      	ldr	r3, [r4, #12]
 8006824:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006826:	1a5b      	subs	r3, r3, r1
 8006828:	4543      	cmp	r3, r8
 800682a:	dcf0      	bgt.n	800680e <_printf_float+0x442>
 800682c:	e6fa      	b.n	8006624 <_printf_float+0x258>
 800682e:	f04f 0800 	mov.w	r8, #0
 8006832:	f104 0919 	add.w	r9, r4, #25
 8006836:	e7f4      	b.n	8006822 <_printf_float+0x456>

08006838 <_printf_common>:
 8006838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800683c:	4616      	mov	r6, r2
 800683e:	4699      	mov	r9, r3
 8006840:	688a      	ldr	r2, [r1, #8]
 8006842:	690b      	ldr	r3, [r1, #16]
 8006844:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006848:	4293      	cmp	r3, r2
 800684a:	bfb8      	it	lt
 800684c:	4613      	movlt	r3, r2
 800684e:	6033      	str	r3, [r6, #0]
 8006850:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006854:	4607      	mov	r7, r0
 8006856:	460c      	mov	r4, r1
 8006858:	b10a      	cbz	r2, 800685e <_printf_common+0x26>
 800685a:	3301      	adds	r3, #1
 800685c:	6033      	str	r3, [r6, #0]
 800685e:	6823      	ldr	r3, [r4, #0]
 8006860:	0699      	lsls	r1, r3, #26
 8006862:	bf42      	ittt	mi
 8006864:	6833      	ldrmi	r3, [r6, #0]
 8006866:	3302      	addmi	r3, #2
 8006868:	6033      	strmi	r3, [r6, #0]
 800686a:	6825      	ldr	r5, [r4, #0]
 800686c:	f015 0506 	ands.w	r5, r5, #6
 8006870:	d106      	bne.n	8006880 <_printf_common+0x48>
 8006872:	f104 0a19 	add.w	sl, r4, #25
 8006876:	68e3      	ldr	r3, [r4, #12]
 8006878:	6832      	ldr	r2, [r6, #0]
 800687a:	1a9b      	subs	r3, r3, r2
 800687c:	42ab      	cmp	r3, r5
 800687e:	dc26      	bgt.n	80068ce <_printf_common+0x96>
 8006880:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006884:	1e13      	subs	r3, r2, #0
 8006886:	6822      	ldr	r2, [r4, #0]
 8006888:	bf18      	it	ne
 800688a:	2301      	movne	r3, #1
 800688c:	0692      	lsls	r2, r2, #26
 800688e:	d42b      	bmi.n	80068e8 <_printf_common+0xb0>
 8006890:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006894:	4649      	mov	r1, r9
 8006896:	4638      	mov	r0, r7
 8006898:	47c0      	blx	r8
 800689a:	3001      	adds	r0, #1
 800689c:	d01e      	beq.n	80068dc <_printf_common+0xa4>
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	68e5      	ldr	r5, [r4, #12]
 80068a2:	6832      	ldr	r2, [r6, #0]
 80068a4:	f003 0306 	and.w	r3, r3, #6
 80068a8:	2b04      	cmp	r3, #4
 80068aa:	bf08      	it	eq
 80068ac:	1aad      	subeq	r5, r5, r2
 80068ae:	68a3      	ldr	r3, [r4, #8]
 80068b0:	6922      	ldr	r2, [r4, #16]
 80068b2:	bf0c      	ite	eq
 80068b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068b8:	2500      	movne	r5, #0
 80068ba:	4293      	cmp	r3, r2
 80068bc:	bfc4      	itt	gt
 80068be:	1a9b      	subgt	r3, r3, r2
 80068c0:	18ed      	addgt	r5, r5, r3
 80068c2:	2600      	movs	r6, #0
 80068c4:	341a      	adds	r4, #26
 80068c6:	42b5      	cmp	r5, r6
 80068c8:	d11a      	bne.n	8006900 <_printf_common+0xc8>
 80068ca:	2000      	movs	r0, #0
 80068cc:	e008      	b.n	80068e0 <_printf_common+0xa8>
 80068ce:	2301      	movs	r3, #1
 80068d0:	4652      	mov	r2, sl
 80068d2:	4649      	mov	r1, r9
 80068d4:	4638      	mov	r0, r7
 80068d6:	47c0      	blx	r8
 80068d8:	3001      	adds	r0, #1
 80068da:	d103      	bne.n	80068e4 <_printf_common+0xac>
 80068dc:	f04f 30ff 	mov.w	r0, #4294967295
 80068e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068e4:	3501      	adds	r5, #1
 80068e6:	e7c6      	b.n	8006876 <_printf_common+0x3e>
 80068e8:	18e1      	adds	r1, r4, r3
 80068ea:	1c5a      	adds	r2, r3, #1
 80068ec:	2030      	movs	r0, #48	; 0x30
 80068ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068f2:	4422      	add	r2, r4
 80068f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068fc:	3302      	adds	r3, #2
 80068fe:	e7c7      	b.n	8006890 <_printf_common+0x58>
 8006900:	2301      	movs	r3, #1
 8006902:	4622      	mov	r2, r4
 8006904:	4649      	mov	r1, r9
 8006906:	4638      	mov	r0, r7
 8006908:	47c0      	blx	r8
 800690a:	3001      	adds	r0, #1
 800690c:	d0e6      	beq.n	80068dc <_printf_common+0xa4>
 800690e:	3601      	adds	r6, #1
 8006910:	e7d9      	b.n	80068c6 <_printf_common+0x8e>
	...

08006914 <_printf_i>:
 8006914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006918:	460c      	mov	r4, r1
 800691a:	4691      	mov	r9, r2
 800691c:	7e27      	ldrb	r7, [r4, #24]
 800691e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006920:	2f78      	cmp	r7, #120	; 0x78
 8006922:	4680      	mov	r8, r0
 8006924:	469a      	mov	sl, r3
 8006926:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800692a:	d807      	bhi.n	800693c <_printf_i+0x28>
 800692c:	2f62      	cmp	r7, #98	; 0x62
 800692e:	d80a      	bhi.n	8006946 <_printf_i+0x32>
 8006930:	2f00      	cmp	r7, #0
 8006932:	f000 80d8 	beq.w	8006ae6 <_printf_i+0x1d2>
 8006936:	2f58      	cmp	r7, #88	; 0x58
 8006938:	f000 80a3 	beq.w	8006a82 <_printf_i+0x16e>
 800693c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006940:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006944:	e03a      	b.n	80069bc <_printf_i+0xa8>
 8006946:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800694a:	2b15      	cmp	r3, #21
 800694c:	d8f6      	bhi.n	800693c <_printf_i+0x28>
 800694e:	a001      	add	r0, pc, #4	; (adr r0, 8006954 <_printf_i+0x40>)
 8006950:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006954:	080069ad 	.word	0x080069ad
 8006958:	080069c1 	.word	0x080069c1
 800695c:	0800693d 	.word	0x0800693d
 8006960:	0800693d 	.word	0x0800693d
 8006964:	0800693d 	.word	0x0800693d
 8006968:	0800693d 	.word	0x0800693d
 800696c:	080069c1 	.word	0x080069c1
 8006970:	0800693d 	.word	0x0800693d
 8006974:	0800693d 	.word	0x0800693d
 8006978:	0800693d 	.word	0x0800693d
 800697c:	0800693d 	.word	0x0800693d
 8006980:	08006acd 	.word	0x08006acd
 8006984:	080069f1 	.word	0x080069f1
 8006988:	08006aaf 	.word	0x08006aaf
 800698c:	0800693d 	.word	0x0800693d
 8006990:	0800693d 	.word	0x0800693d
 8006994:	08006aef 	.word	0x08006aef
 8006998:	0800693d 	.word	0x0800693d
 800699c:	080069f1 	.word	0x080069f1
 80069a0:	0800693d 	.word	0x0800693d
 80069a4:	0800693d 	.word	0x0800693d
 80069a8:	08006ab7 	.word	0x08006ab7
 80069ac:	680b      	ldr	r3, [r1, #0]
 80069ae:	1d1a      	adds	r2, r3, #4
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	600a      	str	r2, [r1, #0]
 80069b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80069b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069bc:	2301      	movs	r3, #1
 80069be:	e0a3      	b.n	8006b08 <_printf_i+0x1f4>
 80069c0:	6825      	ldr	r5, [r4, #0]
 80069c2:	6808      	ldr	r0, [r1, #0]
 80069c4:	062e      	lsls	r6, r5, #24
 80069c6:	f100 0304 	add.w	r3, r0, #4
 80069ca:	d50a      	bpl.n	80069e2 <_printf_i+0xce>
 80069cc:	6805      	ldr	r5, [r0, #0]
 80069ce:	600b      	str	r3, [r1, #0]
 80069d0:	2d00      	cmp	r5, #0
 80069d2:	da03      	bge.n	80069dc <_printf_i+0xc8>
 80069d4:	232d      	movs	r3, #45	; 0x2d
 80069d6:	426d      	negs	r5, r5
 80069d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069dc:	485e      	ldr	r0, [pc, #376]	; (8006b58 <_printf_i+0x244>)
 80069de:	230a      	movs	r3, #10
 80069e0:	e019      	b.n	8006a16 <_printf_i+0x102>
 80069e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80069e6:	6805      	ldr	r5, [r0, #0]
 80069e8:	600b      	str	r3, [r1, #0]
 80069ea:	bf18      	it	ne
 80069ec:	b22d      	sxthne	r5, r5
 80069ee:	e7ef      	b.n	80069d0 <_printf_i+0xbc>
 80069f0:	680b      	ldr	r3, [r1, #0]
 80069f2:	6825      	ldr	r5, [r4, #0]
 80069f4:	1d18      	adds	r0, r3, #4
 80069f6:	6008      	str	r0, [r1, #0]
 80069f8:	0628      	lsls	r0, r5, #24
 80069fa:	d501      	bpl.n	8006a00 <_printf_i+0xec>
 80069fc:	681d      	ldr	r5, [r3, #0]
 80069fe:	e002      	b.n	8006a06 <_printf_i+0xf2>
 8006a00:	0669      	lsls	r1, r5, #25
 8006a02:	d5fb      	bpl.n	80069fc <_printf_i+0xe8>
 8006a04:	881d      	ldrh	r5, [r3, #0]
 8006a06:	4854      	ldr	r0, [pc, #336]	; (8006b58 <_printf_i+0x244>)
 8006a08:	2f6f      	cmp	r7, #111	; 0x6f
 8006a0a:	bf0c      	ite	eq
 8006a0c:	2308      	moveq	r3, #8
 8006a0e:	230a      	movne	r3, #10
 8006a10:	2100      	movs	r1, #0
 8006a12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a16:	6866      	ldr	r6, [r4, #4]
 8006a18:	60a6      	str	r6, [r4, #8]
 8006a1a:	2e00      	cmp	r6, #0
 8006a1c:	bfa2      	ittt	ge
 8006a1e:	6821      	ldrge	r1, [r4, #0]
 8006a20:	f021 0104 	bicge.w	r1, r1, #4
 8006a24:	6021      	strge	r1, [r4, #0]
 8006a26:	b90d      	cbnz	r5, 8006a2c <_printf_i+0x118>
 8006a28:	2e00      	cmp	r6, #0
 8006a2a:	d04d      	beq.n	8006ac8 <_printf_i+0x1b4>
 8006a2c:	4616      	mov	r6, r2
 8006a2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a32:	fb03 5711 	mls	r7, r3, r1, r5
 8006a36:	5dc7      	ldrb	r7, [r0, r7]
 8006a38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a3c:	462f      	mov	r7, r5
 8006a3e:	42bb      	cmp	r3, r7
 8006a40:	460d      	mov	r5, r1
 8006a42:	d9f4      	bls.n	8006a2e <_printf_i+0x11a>
 8006a44:	2b08      	cmp	r3, #8
 8006a46:	d10b      	bne.n	8006a60 <_printf_i+0x14c>
 8006a48:	6823      	ldr	r3, [r4, #0]
 8006a4a:	07df      	lsls	r7, r3, #31
 8006a4c:	d508      	bpl.n	8006a60 <_printf_i+0x14c>
 8006a4e:	6923      	ldr	r3, [r4, #16]
 8006a50:	6861      	ldr	r1, [r4, #4]
 8006a52:	4299      	cmp	r1, r3
 8006a54:	bfde      	ittt	le
 8006a56:	2330      	movle	r3, #48	; 0x30
 8006a58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a60:	1b92      	subs	r2, r2, r6
 8006a62:	6122      	str	r2, [r4, #16]
 8006a64:	f8cd a000 	str.w	sl, [sp]
 8006a68:	464b      	mov	r3, r9
 8006a6a:	aa03      	add	r2, sp, #12
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	4640      	mov	r0, r8
 8006a70:	f7ff fee2 	bl	8006838 <_printf_common>
 8006a74:	3001      	adds	r0, #1
 8006a76:	d14c      	bne.n	8006b12 <_printf_i+0x1fe>
 8006a78:	f04f 30ff 	mov.w	r0, #4294967295
 8006a7c:	b004      	add	sp, #16
 8006a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a82:	4835      	ldr	r0, [pc, #212]	; (8006b58 <_printf_i+0x244>)
 8006a84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a88:	6823      	ldr	r3, [r4, #0]
 8006a8a:	680e      	ldr	r6, [r1, #0]
 8006a8c:	061f      	lsls	r7, r3, #24
 8006a8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006a92:	600e      	str	r6, [r1, #0]
 8006a94:	d514      	bpl.n	8006ac0 <_printf_i+0x1ac>
 8006a96:	07d9      	lsls	r1, r3, #31
 8006a98:	bf44      	itt	mi
 8006a9a:	f043 0320 	orrmi.w	r3, r3, #32
 8006a9e:	6023      	strmi	r3, [r4, #0]
 8006aa0:	b91d      	cbnz	r5, 8006aaa <_printf_i+0x196>
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	f023 0320 	bic.w	r3, r3, #32
 8006aa8:	6023      	str	r3, [r4, #0]
 8006aaa:	2310      	movs	r3, #16
 8006aac:	e7b0      	b.n	8006a10 <_printf_i+0xfc>
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	f043 0320 	orr.w	r3, r3, #32
 8006ab4:	6023      	str	r3, [r4, #0]
 8006ab6:	2378      	movs	r3, #120	; 0x78
 8006ab8:	4828      	ldr	r0, [pc, #160]	; (8006b5c <_printf_i+0x248>)
 8006aba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006abe:	e7e3      	b.n	8006a88 <_printf_i+0x174>
 8006ac0:	065e      	lsls	r6, r3, #25
 8006ac2:	bf48      	it	mi
 8006ac4:	b2ad      	uxthmi	r5, r5
 8006ac6:	e7e6      	b.n	8006a96 <_printf_i+0x182>
 8006ac8:	4616      	mov	r6, r2
 8006aca:	e7bb      	b.n	8006a44 <_printf_i+0x130>
 8006acc:	680b      	ldr	r3, [r1, #0]
 8006ace:	6826      	ldr	r6, [r4, #0]
 8006ad0:	6960      	ldr	r0, [r4, #20]
 8006ad2:	1d1d      	adds	r5, r3, #4
 8006ad4:	600d      	str	r5, [r1, #0]
 8006ad6:	0635      	lsls	r5, r6, #24
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	d501      	bpl.n	8006ae0 <_printf_i+0x1cc>
 8006adc:	6018      	str	r0, [r3, #0]
 8006ade:	e002      	b.n	8006ae6 <_printf_i+0x1d2>
 8006ae0:	0671      	lsls	r1, r6, #25
 8006ae2:	d5fb      	bpl.n	8006adc <_printf_i+0x1c8>
 8006ae4:	8018      	strh	r0, [r3, #0]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	6123      	str	r3, [r4, #16]
 8006aea:	4616      	mov	r6, r2
 8006aec:	e7ba      	b.n	8006a64 <_printf_i+0x150>
 8006aee:	680b      	ldr	r3, [r1, #0]
 8006af0:	1d1a      	adds	r2, r3, #4
 8006af2:	600a      	str	r2, [r1, #0]
 8006af4:	681e      	ldr	r6, [r3, #0]
 8006af6:	6862      	ldr	r2, [r4, #4]
 8006af8:	2100      	movs	r1, #0
 8006afa:	4630      	mov	r0, r6
 8006afc:	f7f9 fb70 	bl	80001e0 <memchr>
 8006b00:	b108      	cbz	r0, 8006b06 <_printf_i+0x1f2>
 8006b02:	1b80      	subs	r0, r0, r6
 8006b04:	6060      	str	r0, [r4, #4]
 8006b06:	6863      	ldr	r3, [r4, #4]
 8006b08:	6123      	str	r3, [r4, #16]
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b10:	e7a8      	b.n	8006a64 <_printf_i+0x150>
 8006b12:	6923      	ldr	r3, [r4, #16]
 8006b14:	4632      	mov	r2, r6
 8006b16:	4649      	mov	r1, r9
 8006b18:	4640      	mov	r0, r8
 8006b1a:	47d0      	blx	sl
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	d0ab      	beq.n	8006a78 <_printf_i+0x164>
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	079b      	lsls	r3, r3, #30
 8006b24:	d413      	bmi.n	8006b4e <_printf_i+0x23a>
 8006b26:	68e0      	ldr	r0, [r4, #12]
 8006b28:	9b03      	ldr	r3, [sp, #12]
 8006b2a:	4298      	cmp	r0, r3
 8006b2c:	bfb8      	it	lt
 8006b2e:	4618      	movlt	r0, r3
 8006b30:	e7a4      	b.n	8006a7c <_printf_i+0x168>
 8006b32:	2301      	movs	r3, #1
 8006b34:	4632      	mov	r2, r6
 8006b36:	4649      	mov	r1, r9
 8006b38:	4640      	mov	r0, r8
 8006b3a:	47d0      	blx	sl
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	d09b      	beq.n	8006a78 <_printf_i+0x164>
 8006b40:	3501      	adds	r5, #1
 8006b42:	68e3      	ldr	r3, [r4, #12]
 8006b44:	9903      	ldr	r1, [sp, #12]
 8006b46:	1a5b      	subs	r3, r3, r1
 8006b48:	42ab      	cmp	r3, r5
 8006b4a:	dcf2      	bgt.n	8006b32 <_printf_i+0x21e>
 8006b4c:	e7eb      	b.n	8006b26 <_printf_i+0x212>
 8006b4e:	2500      	movs	r5, #0
 8006b50:	f104 0619 	add.w	r6, r4, #25
 8006b54:	e7f5      	b.n	8006b42 <_printf_i+0x22e>
 8006b56:	bf00      	nop
 8006b58:	080097e6 	.word	0x080097e6
 8006b5c:	080097f7 	.word	0x080097f7

08006b60 <iprintf>:
 8006b60:	b40f      	push	{r0, r1, r2, r3}
 8006b62:	4b0a      	ldr	r3, [pc, #40]	; (8006b8c <iprintf+0x2c>)
 8006b64:	b513      	push	{r0, r1, r4, lr}
 8006b66:	681c      	ldr	r4, [r3, #0]
 8006b68:	b124      	cbz	r4, 8006b74 <iprintf+0x14>
 8006b6a:	69a3      	ldr	r3, [r4, #24]
 8006b6c:	b913      	cbnz	r3, 8006b74 <iprintf+0x14>
 8006b6e:	4620      	mov	r0, r4
 8006b70:	f000 fefe 	bl	8007970 <__sinit>
 8006b74:	ab05      	add	r3, sp, #20
 8006b76:	9a04      	ldr	r2, [sp, #16]
 8006b78:	68a1      	ldr	r1, [r4, #8]
 8006b7a:	9301      	str	r3, [sp, #4]
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	f001 fd71 	bl	8008664 <_vfiprintf_r>
 8006b82:	b002      	add	sp, #8
 8006b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b88:	b004      	add	sp, #16
 8006b8a:	4770      	bx	lr
 8006b8c:	20000014 	.word	0x20000014

08006b90 <siprintf>:
 8006b90:	b40e      	push	{r1, r2, r3}
 8006b92:	b500      	push	{lr}
 8006b94:	b09c      	sub	sp, #112	; 0x70
 8006b96:	ab1d      	add	r3, sp, #116	; 0x74
 8006b98:	9002      	str	r0, [sp, #8]
 8006b9a:	9006      	str	r0, [sp, #24]
 8006b9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ba0:	4809      	ldr	r0, [pc, #36]	; (8006bc8 <siprintf+0x38>)
 8006ba2:	9107      	str	r1, [sp, #28]
 8006ba4:	9104      	str	r1, [sp, #16]
 8006ba6:	4909      	ldr	r1, [pc, #36]	; (8006bcc <siprintf+0x3c>)
 8006ba8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bac:	9105      	str	r1, [sp, #20]
 8006bae:	6800      	ldr	r0, [r0, #0]
 8006bb0:	9301      	str	r3, [sp, #4]
 8006bb2:	a902      	add	r1, sp, #8
 8006bb4:	f001 fc2c 	bl	8008410 <_svfiprintf_r>
 8006bb8:	9b02      	ldr	r3, [sp, #8]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	701a      	strb	r2, [r3, #0]
 8006bbe:	b01c      	add	sp, #112	; 0x70
 8006bc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bc4:	b003      	add	sp, #12
 8006bc6:	4770      	bx	lr
 8006bc8:	20000014 	.word	0x20000014
 8006bcc:	ffff0208 	.word	0xffff0208

08006bd0 <quorem>:
 8006bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd4:	6903      	ldr	r3, [r0, #16]
 8006bd6:	690c      	ldr	r4, [r1, #16]
 8006bd8:	42a3      	cmp	r3, r4
 8006bda:	4607      	mov	r7, r0
 8006bdc:	f2c0 8081 	blt.w	8006ce2 <quorem+0x112>
 8006be0:	3c01      	subs	r4, #1
 8006be2:	f101 0814 	add.w	r8, r1, #20
 8006be6:	f100 0514 	add.w	r5, r0, #20
 8006bea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006bee:	9301      	str	r3, [sp, #4]
 8006bf0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006bf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006c00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c04:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c08:	d331      	bcc.n	8006c6e <quorem+0x9e>
 8006c0a:	f04f 0e00 	mov.w	lr, #0
 8006c0e:	4640      	mov	r0, r8
 8006c10:	46ac      	mov	ip, r5
 8006c12:	46f2      	mov	sl, lr
 8006c14:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c18:	b293      	uxth	r3, r2
 8006c1a:	fb06 e303 	mla	r3, r6, r3, lr
 8006c1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	ebaa 0303 	sub.w	r3, sl, r3
 8006c28:	0c12      	lsrs	r2, r2, #16
 8006c2a:	f8dc a000 	ldr.w	sl, [ip]
 8006c2e:	fb06 e202 	mla	r2, r6, r2, lr
 8006c32:	fa13 f38a 	uxtah	r3, r3, sl
 8006c36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c3a:	fa1f fa82 	uxth.w	sl, r2
 8006c3e:	f8dc 2000 	ldr.w	r2, [ip]
 8006c42:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006c46:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c50:	4581      	cmp	r9, r0
 8006c52:	f84c 3b04 	str.w	r3, [ip], #4
 8006c56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006c5a:	d2db      	bcs.n	8006c14 <quorem+0x44>
 8006c5c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006c60:	b92b      	cbnz	r3, 8006c6e <quorem+0x9e>
 8006c62:	9b01      	ldr	r3, [sp, #4]
 8006c64:	3b04      	subs	r3, #4
 8006c66:	429d      	cmp	r5, r3
 8006c68:	461a      	mov	r2, r3
 8006c6a:	d32e      	bcc.n	8006cca <quorem+0xfa>
 8006c6c:	613c      	str	r4, [r7, #16]
 8006c6e:	4638      	mov	r0, r7
 8006c70:	f001 f9b8 	bl	8007fe4 <__mcmp>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	db24      	blt.n	8006cc2 <quorem+0xf2>
 8006c78:	3601      	adds	r6, #1
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	f04f 0c00 	mov.w	ip, #0
 8006c80:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c84:	f8d0 e000 	ldr.w	lr, [r0]
 8006c88:	b293      	uxth	r3, r2
 8006c8a:	ebac 0303 	sub.w	r3, ip, r3
 8006c8e:	0c12      	lsrs	r2, r2, #16
 8006c90:	fa13 f38e 	uxtah	r3, r3, lr
 8006c94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006c98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ca2:	45c1      	cmp	r9, r8
 8006ca4:	f840 3b04 	str.w	r3, [r0], #4
 8006ca8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006cac:	d2e8      	bcs.n	8006c80 <quorem+0xb0>
 8006cae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cb6:	b922      	cbnz	r2, 8006cc2 <quorem+0xf2>
 8006cb8:	3b04      	subs	r3, #4
 8006cba:	429d      	cmp	r5, r3
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	d30a      	bcc.n	8006cd6 <quorem+0x106>
 8006cc0:	613c      	str	r4, [r7, #16]
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	b003      	add	sp, #12
 8006cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cca:	6812      	ldr	r2, [r2, #0]
 8006ccc:	3b04      	subs	r3, #4
 8006cce:	2a00      	cmp	r2, #0
 8006cd0:	d1cc      	bne.n	8006c6c <quorem+0x9c>
 8006cd2:	3c01      	subs	r4, #1
 8006cd4:	e7c7      	b.n	8006c66 <quorem+0x96>
 8006cd6:	6812      	ldr	r2, [r2, #0]
 8006cd8:	3b04      	subs	r3, #4
 8006cda:	2a00      	cmp	r2, #0
 8006cdc:	d1f0      	bne.n	8006cc0 <quorem+0xf0>
 8006cde:	3c01      	subs	r4, #1
 8006ce0:	e7eb      	b.n	8006cba <quorem+0xea>
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	e7ee      	b.n	8006cc4 <quorem+0xf4>
	...

08006ce8 <_dtoa_r>:
 8006ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cec:	ed2d 8b02 	vpush	{d8}
 8006cf0:	ec57 6b10 	vmov	r6, r7, d0
 8006cf4:	b095      	sub	sp, #84	; 0x54
 8006cf6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006cf8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006cfc:	9105      	str	r1, [sp, #20]
 8006cfe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006d02:	4604      	mov	r4, r0
 8006d04:	9209      	str	r2, [sp, #36]	; 0x24
 8006d06:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d08:	b975      	cbnz	r5, 8006d28 <_dtoa_r+0x40>
 8006d0a:	2010      	movs	r0, #16
 8006d0c:	f000 fed6 	bl	8007abc <malloc>
 8006d10:	4602      	mov	r2, r0
 8006d12:	6260      	str	r0, [r4, #36]	; 0x24
 8006d14:	b920      	cbnz	r0, 8006d20 <_dtoa_r+0x38>
 8006d16:	4bb2      	ldr	r3, [pc, #712]	; (8006fe0 <_dtoa_r+0x2f8>)
 8006d18:	21ea      	movs	r1, #234	; 0xea
 8006d1a:	48b2      	ldr	r0, [pc, #712]	; (8006fe4 <_dtoa_r+0x2fc>)
 8006d1c:	f001 fef8 	bl	8008b10 <__assert_func>
 8006d20:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d24:	6005      	str	r5, [r0, #0]
 8006d26:	60c5      	str	r5, [r0, #12]
 8006d28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d2a:	6819      	ldr	r1, [r3, #0]
 8006d2c:	b151      	cbz	r1, 8006d44 <_dtoa_r+0x5c>
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	604a      	str	r2, [r1, #4]
 8006d32:	2301      	movs	r3, #1
 8006d34:	4093      	lsls	r3, r2
 8006d36:	608b      	str	r3, [r1, #8]
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f000 ff15 	bl	8007b68 <_Bfree>
 8006d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d40:	2200      	movs	r2, #0
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	1e3b      	subs	r3, r7, #0
 8006d46:	bfb9      	ittee	lt
 8006d48:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006d4c:	9303      	strlt	r3, [sp, #12]
 8006d4e:	2300      	movge	r3, #0
 8006d50:	f8c8 3000 	strge.w	r3, [r8]
 8006d54:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006d58:	4ba3      	ldr	r3, [pc, #652]	; (8006fe8 <_dtoa_r+0x300>)
 8006d5a:	bfbc      	itt	lt
 8006d5c:	2201      	movlt	r2, #1
 8006d5e:	f8c8 2000 	strlt.w	r2, [r8]
 8006d62:	ea33 0309 	bics.w	r3, r3, r9
 8006d66:	d11b      	bne.n	8006da0 <_dtoa_r+0xb8>
 8006d68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006d6e:	6013      	str	r3, [r2, #0]
 8006d70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d74:	4333      	orrs	r3, r6
 8006d76:	f000 857a 	beq.w	800786e <_dtoa_r+0xb86>
 8006d7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d7c:	b963      	cbnz	r3, 8006d98 <_dtoa_r+0xb0>
 8006d7e:	4b9b      	ldr	r3, [pc, #620]	; (8006fec <_dtoa_r+0x304>)
 8006d80:	e024      	b.n	8006dcc <_dtoa_r+0xe4>
 8006d82:	4b9b      	ldr	r3, [pc, #620]	; (8006ff0 <_dtoa_r+0x308>)
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	3308      	adds	r3, #8
 8006d88:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006d8a:	6013      	str	r3, [r2, #0]
 8006d8c:	9800      	ldr	r0, [sp, #0]
 8006d8e:	b015      	add	sp, #84	; 0x54
 8006d90:	ecbd 8b02 	vpop	{d8}
 8006d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d98:	4b94      	ldr	r3, [pc, #592]	; (8006fec <_dtoa_r+0x304>)
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	3303      	adds	r3, #3
 8006d9e:	e7f3      	b.n	8006d88 <_dtoa_r+0xa0>
 8006da0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006da4:	2200      	movs	r2, #0
 8006da6:	ec51 0b17 	vmov	r0, r1, d7
 8006daa:	2300      	movs	r3, #0
 8006dac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006db0:	f7f9 fe8a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006db4:	4680      	mov	r8, r0
 8006db6:	b158      	cbz	r0, 8006dd0 <_dtoa_r+0xe8>
 8006db8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006dba:	2301      	movs	r3, #1
 8006dbc:	6013      	str	r3, [r2, #0]
 8006dbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f000 8551 	beq.w	8007868 <_dtoa_r+0xb80>
 8006dc6:	488b      	ldr	r0, [pc, #556]	; (8006ff4 <_dtoa_r+0x30c>)
 8006dc8:	6018      	str	r0, [r3, #0]
 8006dca:	1e43      	subs	r3, r0, #1
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	e7dd      	b.n	8006d8c <_dtoa_r+0xa4>
 8006dd0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006dd4:	aa12      	add	r2, sp, #72	; 0x48
 8006dd6:	a913      	add	r1, sp, #76	; 0x4c
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f001 f9a7 	bl	800812c <__d2b>
 8006dde:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006de2:	4683      	mov	fp, r0
 8006de4:	2d00      	cmp	r5, #0
 8006de6:	d07c      	beq.n	8006ee2 <_dtoa_r+0x1fa>
 8006de8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006dee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006df2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006df6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006dfa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006dfe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006e02:	4b7d      	ldr	r3, [pc, #500]	; (8006ff8 <_dtoa_r+0x310>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	4630      	mov	r0, r6
 8006e08:	4639      	mov	r1, r7
 8006e0a:	f7f9 fa3d 	bl	8000288 <__aeabi_dsub>
 8006e0e:	a36e      	add	r3, pc, #440	; (adr r3, 8006fc8 <_dtoa_r+0x2e0>)
 8006e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e14:	f7f9 fbf0 	bl	80005f8 <__aeabi_dmul>
 8006e18:	a36d      	add	r3, pc, #436	; (adr r3, 8006fd0 <_dtoa_r+0x2e8>)
 8006e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1e:	f7f9 fa35 	bl	800028c <__adddf3>
 8006e22:	4606      	mov	r6, r0
 8006e24:	4628      	mov	r0, r5
 8006e26:	460f      	mov	r7, r1
 8006e28:	f7f9 fb7c 	bl	8000524 <__aeabi_i2d>
 8006e2c:	a36a      	add	r3, pc, #424	; (adr r3, 8006fd8 <_dtoa_r+0x2f0>)
 8006e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e32:	f7f9 fbe1 	bl	80005f8 <__aeabi_dmul>
 8006e36:	4602      	mov	r2, r0
 8006e38:	460b      	mov	r3, r1
 8006e3a:	4630      	mov	r0, r6
 8006e3c:	4639      	mov	r1, r7
 8006e3e:	f7f9 fa25 	bl	800028c <__adddf3>
 8006e42:	4606      	mov	r6, r0
 8006e44:	460f      	mov	r7, r1
 8006e46:	f7f9 fe87 	bl	8000b58 <__aeabi_d2iz>
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	4682      	mov	sl, r0
 8006e4e:	2300      	movs	r3, #0
 8006e50:	4630      	mov	r0, r6
 8006e52:	4639      	mov	r1, r7
 8006e54:	f7f9 fe42 	bl	8000adc <__aeabi_dcmplt>
 8006e58:	b148      	cbz	r0, 8006e6e <_dtoa_r+0x186>
 8006e5a:	4650      	mov	r0, sl
 8006e5c:	f7f9 fb62 	bl	8000524 <__aeabi_i2d>
 8006e60:	4632      	mov	r2, r6
 8006e62:	463b      	mov	r3, r7
 8006e64:	f7f9 fe30 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e68:	b908      	cbnz	r0, 8006e6e <_dtoa_r+0x186>
 8006e6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e6e:	f1ba 0f16 	cmp.w	sl, #22
 8006e72:	d854      	bhi.n	8006f1e <_dtoa_r+0x236>
 8006e74:	4b61      	ldr	r3, [pc, #388]	; (8006ffc <_dtoa_r+0x314>)
 8006e76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e82:	f7f9 fe2b 	bl	8000adc <__aeabi_dcmplt>
 8006e86:	2800      	cmp	r0, #0
 8006e88:	d04b      	beq.n	8006f22 <_dtoa_r+0x23a>
 8006e8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e8e:	2300      	movs	r3, #0
 8006e90:	930e      	str	r3, [sp, #56]	; 0x38
 8006e92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e94:	1b5d      	subs	r5, r3, r5
 8006e96:	1e6b      	subs	r3, r5, #1
 8006e98:	9304      	str	r3, [sp, #16]
 8006e9a:	bf43      	ittte	mi
 8006e9c:	2300      	movmi	r3, #0
 8006e9e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006ea2:	9304      	strmi	r3, [sp, #16]
 8006ea4:	f04f 0800 	movpl.w	r8, #0
 8006ea8:	f1ba 0f00 	cmp.w	sl, #0
 8006eac:	db3b      	blt.n	8006f26 <_dtoa_r+0x23e>
 8006eae:	9b04      	ldr	r3, [sp, #16]
 8006eb0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006eb4:	4453      	add	r3, sl
 8006eb6:	9304      	str	r3, [sp, #16]
 8006eb8:	2300      	movs	r3, #0
 8006eba:	9306      	str	r3, [sp, #24]
 8006ebc:	9b05      	ldr	r3, [sp, #20]
 8006ebe:	2b09      	cmp	r3, #9
 8006ec0:	d869      	bhi.n	8006f96 <_dtoa_r+0x2ae>
 8006ec2:	2b05      	cmp	r3, #5
 8006ec4:	bfc4      	itt	gt
 8006ec6:	3b04      	subgt	r3, #4
 8006ec8:	9305      	strgt	r3, [sp, #20]
 8006eca:	9b05      	ldr	r3, [sp, #20]
 8006ecc:	f1a3 0302 	sub.w	r3, r3, #2
 8006ed0:	bfcc      	ite	gt
 8006ed2:	2500      	movgt	r5, #0
 8006ed4:	2501      	movle	r5, #1
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d869      	bhi.n	8006fae <_dtoa_r+0x2c6>
 8006eda:	e8df f003 	tbb	[pc, r3]
 8006ede:	4e2c      	.short	0x4e2c
 8006ee0:	5a4c      	.short	0x5a4c
 8006ee2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006ee6:	441d      	add	r5, r3
 8006ee8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006eec:	2b20      	cmp	r3, #32
 8006eee:	bfc1      	itttt	gt
 8006ef0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006ef4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006ef8:	fa09 f303 	lslgt.w	r3, r9, r3
 8006efc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006f00:	bfda      	itte	le
 8006f02:	f1c3 0320 	rsble	r3, r3, #32
 8006f06:	fa06 f003 	lslle.w	r0, r6, r3
 8006f0a:	4318      	orrgt	r0, r3
 8006f0c:	f7f9 fafa 	bl	8000504 <__aeabi_ui2d>
 8006f10:	2301      	movs	r3, #1
 8006f12:	4606      	mov	r6, r0
 8006f14:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006f18:	3d01      	subs	r5, #1
 8006f1a:	9310      	str	r3, [sp, #64]	; 0x40
 8006f1c:	e771      	b.n	8006e02 <_dtoa_r+0x11a>
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e7b6      	b.n	8006e90 <_dtoa_r+0x1a8>
 8006f22:	900e      	str	r0, [sp, #56]	; 0x38
 8006f24:	e7b5      	b.n	8006e92 <_dtoa_r+0x1aa>
 8006f26:	f1ca 0300 	rsb	r3, sl, #0
 8006f2a:	9306      	str	r3, [sp, #24]
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	eba8 080a 	sub.w	r8, r8, sl
 8006f32:	930d      	str	r3, [sp, #52]	; 0x34
 8006f34:	e7c2      	b.n	8006ebc <_dtoa_r+0x1d4>
 8006f36:	2300      	movs	r3, #0
 8006f38:	9308      	str	r3, [sp, #32]
 8006f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	dc39      	bgt.n	8006fb4 <_dtoa_r+0x2cc>
 8006f40:	f04f 0901 	mov.w	r9, #1
 8006f44:	f8cd 9004 	str.w	r9, [sp, #4]
 8006f48:	464b      	mov	r3, r9
 8006f4a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006f4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006f50:	2200      	movs	r2, #0
 8006f52:	6042      	str	r2, [r0, #4]
 8006f54:	2204      	movs	r2, #4
 8006f56:	f102 0614 	add.w	r6, r2, #20
 8006f5a:	429e      	cmp	r6, r3
 8006f5c:	6841      	ldr	r1, [r0, #4]
 8006f5e:	d92f      	bls.n	8006fc0 <_dtoa_r+0x2d8>
 8006f60:	4620      	mov	r0, r4
 8006f62:	f000 fdc1 	bl	8007ae8 <_Balloc>
 8006f66:	9000      	str	r0, [sp, #0]
 8006f68:	2800      	cmp	r0, #0
 8006f6a:	d14b      	bne.n	8007004 <_dtoa_r+0x31c>
 8006f6c:	4b24      	ldr	r3, [pc, #144]	; (8007000 <_dtoa_r+0x318>)
 8006f6e:	4602      	mov	r2, r0
 8006f70:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006f74:	e6d1      	b.n	8006d1a <_dtoa_r+0x32>
 8006f76:	2301      	movs	r3, #1
 8006f78:	e7de      	b.n	8006f38 <_dtoa_r+0x250>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	9308      	str	r3, [sp, #32]
 8006f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f80:	eb0a 0903 	add.w	r9, sl, r3
 8006f84:	f109 0301 	add.w	r3, r9, #1
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	9301      	str	r3, [sp, #4]
 8006f8c:	bfb8      	it	lt
 8006f8e:	2301      	movlt	r3, #1
 8006f90:	e7dd      	b.n	8006f4e <_dtoa_r+0x266>
 8006f92:	2301      	movs	r3, #1
 8006f94:	e7f2      	b.n	8006f7c <_dtoa_r+0x294>
 8006f96:	2501      	movs	r5, #1
 8006f98:	2300      	movs	r3, #0
 8006f9a:	9305      	str	r3, [sp, #20]
 8006f9c:	9508      	str	r5, [sp, #32]
 8006f9e:	f04f 39ff 	mov.w	r9, #4294967295
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006fa8:	2312      	movs	r3, #18
 8006faa:	9209      	str	r2, [sp, #36]	; 0x24
 8006fac:	e7cf      	b.n	8006f4e <_dtoa_r+0x266>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	9308      	str	r3, [sp, #32]
 8006fb2:	e7f4      	b.n	8006f9e <_dtoa_r+0x2b6>
 8006fb4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006fb8:	f8cd 9004 	str.w	r9, [sp, #4]
 8006fbc:	464b      	mov	r3, r9
 8006fbe:	e7c6      	b.n	8006f4e <_dtoa_r+0x266>
 8006fc0:	3101      	adds	r1, #1
 8006fc2:	6041      	str	r1, [r0, #4]
 8006fc4:	0052      	lsls	r2, r2, #1
 8006fc6:	e7c6      	b.n	8006f56 <_dtoa_r+0x26e>
 8006fc8:	636f4361 	.word	0x636f4361
 8006fcc:	3fd287a7 	.word	0x3fd287a7
 8006fd0:	8b60c8b3 	.word	0x8b60c8b3
 8006fd4:	3fc68a28 	.word	0x3fc68a28
 8006fd8:	509f79fb 	.word	0x509f79fb
 8006fdc:	3fd34413 	.word	0x3fd34413
 8006fe0:	08009815 	.word	0x08009815
 8006fe4:	0800982c 	.word	0x0800982c
 8006fe8:	7ff00000 	.word	0x7ff00000
 8006fec:	08009811 	.word	0x08009811
 8006ff0:	08009808 	.word	0x08009808
 8006ff4:	080097e5 	.word	0x080097e5
 8006ff8:	3ff80000 	.word	0x3ff80000
 8006ffc:	08009988 	.word	0x08009988
 8007000:	0800988b 	.word	0x0800988b
 8007004:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007006:	9a00      	ldr	r2, [sp, #0]
 8007008:	601a      	str	r2, [r3, #0]
 800700a:	9b01      	ldr	r3, [sp, #4]
 800700c:	2b0e      	cmp	r3, #14
 800700e:	f200 80ad 	bhi.w	800716c <_dtoa_r+0x484>
 8007012:	2d00      	cmp	r5, #0
 8007014:	f000 80aa 	beq.w	800716c <_dtoa_r+0x484>
 8007018:	f1ba 0f00 	cmp.w	sl, #0
 800701c:	dd36      	ble.n	800708c <_dtoa_r+0x3a4>
 800701e:	4ac3      	ldr	r2, [pc, #780]	; (800732c <_dtoa_r+0x644>)
 8007020:	f00a 030f 	and.w	r3, sl, #15
 8007024:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007028:	ed93 7b00 	vldr	d7, [r3]
 800702c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007030:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007034:	eeb0 8a47 	vmov.f32	s16, s14
 8007038:	eef0 8a67 	vmov.f32	s17, s15
 800703c:	d016      	beq.n	800706c <_dtoa_r+0x384>
 800703e:	4bbc      	ldr	r3, [pc, #752]	; (8007330 <_dtoa_r+0x648>)
 8007040:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007044:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007048:	f7f9 fc00 	bl	800084c <__aeabi_ddiv>
 800704c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007050:	f007 070f 	and.w	r7, r7, #15
 8007054:	2503      	movs	r5, #3
 8007056:	4eb6      	ldr	r6, [pc, #728]	; (8007330 <_dtoa_r+0x648>)
 8007058:	b957      	cbnz	r7, 8007070 <_dtoa_r+0x388>
 800705a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800705e:	ec53 2b18 	vmov	r2, r3, d8
 8007062:	f7f9 fbf3 	bl	800084c <__aeabi_ddiv>
 8007066:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800706a:	e029      	b.n	80070c0 <_dtoa_r+0x3d8>
 800706c:	2502      	movs	r5, #2
 800706e:	e7f2      	b.n	8007056 <_dtoa_r+0x36e>
 8007070:	07f9      	lsls	r1, r7, #31
 8007072:	d508      	bpl.n	8007086 <_dtoa_r+0x39e>
 8007074:	ec51 0b18 	vmov	r0, r1, d8
 8007078:	e9d6 2300 	ldrd	r2, r3, [r6]
 800707c:	f7f9 fabc 	bl	80005f8 <__aeabi_dmul>
 8007080:	ec41 0b18 	vmov	d8, r0, r1
 8007084:	3501      	adds	r5, #1
 8007086:	107f      	asrs	r7, r7, #1
 8007088:	3608      	adds	r6, #8
 800708a:	e7e5      	b.n	8007058 <_dtoa_r+0x370>
 800708c:	f000 80a6 	beq.w	80071dc <_dtoa_r+0x4f4>
 8007090:	f1ca 0600 	rsb	r6, sl, #0
 8007094:	4ba5      	ldr	r3, [pc, #660]	; (800732c <_dtoa_r+0x644>)
 8007096:	4fa6      	ldr	r7, [pc, #664]	; (8007330 <_dtoa_r+0x648>)
 8007098:	f006 020f 	and.w	r2, r6, #15
 800709c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80070a8:	f7f9 faa6 	bl	80005f8 <__aeabi_dmul>
 80070ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070b0:	1136      	asrs	r6, r6, #4
 80070b2:	2300      	movs	r3, #0
 80070b4:	2502      	movs	r5, #2
 80070b6:	2e00      	cmp	r6, #0
 80070b8:	f040 8085 	bne.w	80071c6 <_dtoa_r+0x4de>
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1d2      	bne.n	8007066 <_dtoa_r+0x37e>
 80070c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 808c 	beq.w	80071e0 <_dtoa_r+0x4f8>
 80070c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80070cc:	4b99      	ldr	r3, [pc, #612]	; (8007334 <_dtoa_r+0x64c>)
 80070ce:	2200      	movs	r2, #0
 80070d0:	4630      	mov	r0, r6
 80070d2:	4639      	mov	r1, r7
 80070d4:	f7f9 fd02 	bl	8000adc <__aeabi_dcmplt>
 80070d8:	2800      	cmp	r0, #0
 80070da:	f000 8081 	beq.w	80071e0 <_dtoa_r+0x4f8>
 80070de:	9b01      	ldr	r3, [sp, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d07d      	beq.n	80071e0 <_dtoa_r+0x4f8>
 80070e4:	f1b9 0f00 	cmp.w	r9, #0
 80070e8:	dd3c      	ble.n	8007164 <_dtoa_r+0x47c>
 80070ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 80070ee:	9307      	str	r3, [sp, #28]
 80070f0:	2200      	movs	r2, #0
 80070f2:	4b91      	ldr	r3, [pc, #580]	; (8007338 <_dtoa_r+0x650>)
 80070f4:	4630      	mov	r0, r6
 80070f6:	4639      	mov	r1, r7
 80070f8:	f7f9 fa7e 	bl	80005f8 <__aeabi_dmul>
 80070fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007100:	3501      	adds	r5, #1
 8007102:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007106:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800710a:	4628      	mov	r0, r5
 800710c:	f7f9 fa0a 	bl	8000524 <__aeabi_i2d>
 8007110:	4632      	mov	r2, r6
 8007112:	463b      	mov	r3, r7
 8007114:	f7f9 fa70 	bl	80005f8 <__aeabi_dmul>
 8007118:	4b88      	ldr	r3, [pc, #544]	; (800733c <_dtoa_r+0x654>)
 800711a:	2200      	movs	r2, #0
 800711c:	f7f9 f8b6 	bl	800028c <__adddf3>
 8007120:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007128:	9303      	str	r3, [sp, #12]
 800712a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800712c:	2b00      	cmp	r3, #0
 800712e:	d15c      	bne.n	80071ea <_dtoa_r+0x502>
 8007130:	4b83      	ldr	r3, [pc, #524]	; (8007340 <_dtoa_r+0x658>)
 8007132:	2200      	movs	r2, #0
 8007134:	4630      	mov	r0, r6
 8007136:	4639      	mov	r1, r7
 8007138:	f7f9 f8a6 	bl	8000288 <__aeabi_dsub>
 800713c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007140:	4606      	mov	r6, r0
 8007142:	460f      	mov	r7, r1
 8007144:	f7f9 fce8 	bl	8000b18 <__aeabi_dcmpgt>
 8007148:	2800      	cmp	r0, #0
 800714a:	f040 8296 	bne.w	800767a <_dtoa_r+0x992>
 800714e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007152:	4630      	mov	r0, r6
 8007154:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007158:	4639      	mov	r1, r7
 800715a:	f7f9 fcbf 	bl	8000adc <__aeabi_dcmplt>
 800715e:	2800      	cmp	r0, #0
 8007160:	f040 8288 	bne.w	8007674 <_dtoa_r+0x98c>
 8007164:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007168:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800716c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800716e:	2b00      	cmp	r3, #0
 8007170:	f2c0 8158 	blt.w	8007424 <_dtoa_r+0x73c>
 8007174:	f1ba 0f0e 	cmp.w	sl, #14
 8007178:	f300 8154 	bgt.w	8007424 <_dtoa_r+0x73c>
 800717c:	4b6b      	ldr	r3, [pc, #428]	; (800732c <_dtoa_r+0x644>)
 800717e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007182:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007188:	2b00      	cmp	r3, #0
 800718a:	f280 80e3 	bge.w	8007354 <_dtoa_r+0x66c>
 800718e:	9b01      	ldr	r3, [sp, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	f300 80df 	bgt.w	8007354 <_dtoa_r+0x66c>
 8007196:	f040 826d 	bne.w	8007674 <_dtoa_r+0x98c>
 800719a:	4b69      	ldr	r3, [pc, #420]	; (8007340 <_dtoa_r+0x658>)
 800719c:	2200      	movs	r2, #0
 800719e:	4640      	mov	r0, r8
 80071a0:	4649      	mov	r1, r9
 80071a2:	f7f9 fa29 	bl	80005f8 <__aeabi_dmul>
 80071a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071aa:	f7f9 fcab 	bl	8000b04 <__aeabi_dcmpge>
 80071ae:	9e01      	ldr	r6, [sp, #4]
 80071b0:	4637      	mov	r7, r6
 80071b2:	2800      	cmp	r0, #0
 80071b4:	f040 8243 	bne.w	800763e <_dtoa_r+0x956>
 80071b8:	9d00      	ldr	r5, [sp, #0]
 80071ba:	2331      	movs	r3, #49	; 0x31
 80071bc:	f805 3b01 	strb.w	r3, [r5], #1
 80071c0:	f10a 0a01 	add.w	sl, sl, #1
 80071c4:	e23f      	b.n	8007646 <_dtoa_r+0x95e>
 80071c6:	07f2      	lsls	r2, r6, #31
 80071c8:	d505      	bpl.n	80071d6 <_dtoa_r+0x4ee>
 80071ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071ce:	f7f9 fa13 	bl	80005f8 <__aeabi_dmul>
 80071d2:	3501      	adds	r5, #1
 80071d4:	2301      	movs	r3, #1
 80071d6:	1076      	asrs	r6, r6, #1
 80071d8:	3708      	adds	r7, #8
 80071da:	e76c      	b.n	80070b6 <_dtoa_r+0x3ce>
 80071dc:	2502      	movs	r5, #2
 80071de:	e76f      	b.n	80070c0 <_dtoa_r+0x3d8>
 80071e0:	9b01      	ldr	r3, [sp, #4]
 80071e2:	f8cd a01c 	str.w	sl, [sp, #28]
 80071e6:	930c      	str	r3, [sp, #48]	; 0x30
 80071e8:	e78d      	b.n	8007106 <_dtoa_r+0x41e>
 80071ea:	9900      	ldr	r1, [sp, #0]
 80071ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80071ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80071f0:	4b4e      	ldr	r3, [pc, #312]	; (800732c <_dtoa_r+0x644>)
 80071f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071f6:	4401      	add	r1, r0
 80071f8:	9102      	str	r1, [sp, #8]
 80071fa:	9908      	ldr	r1, [sp, #32]
 80071fc:	eeb0 8a47 	vmov.f32	s16, s14
 8007200:	eef0 8a67 	vmov.f32	s17, s15
 8007204:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007208:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800720c:	2900      	cmp	r1, #0
 800720e:	d045      	beq.n	800729c <_dtoa_r+0x5b4>
 8007210:	494c      	ldr	r1, [pc, #304]	; (8007344 <_dtoa_r+0x65c>)
 8007212:	2000      	movs	r0, #0
 8007214:	f7f9 fb1a 	bl	800084c <__aeabi_ddiv>
 8007218:	ec53 2b18 	vmov	r2, r3, d8
 800721c:	f7f9 f834 	bl	8000288 <__aeabi_dsub>
 8007220:	9d00      	ldr	r5, [sp, #0]
 8007222:	ec41 0b18 	vmov	d8, r0, r1
 8007226:	4639      	mov	r1, r7
 8007228:	4630      	mov	r0, r6
 800722a:	f7f9 fc95 	bl	8000b58 <__aeabi_d2iz>
 800722e:	900c      	str	r0, [sp, #48]	; 0x30
 8007230:	f7f9 f978 	bl	8000524 <__aeabi_i2d>
 8007234:	4602      	mov	r2, r0
 8007236:	460b      	mov	r3, r1
 8007238:	4630      	mov	r0, r6
 800723a:	4639      	mov	r1, r7
 800723c:	f7f9 f824 	bl	8000288 <__aeabi_dsub>
 8007240:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007242:	3330      	adds	r3, #48	; 0x30
 8007244:	f805 3b01 	strb.w	r3, [r5], #1
 8007248:	ec53 2b18 	vmov	r2, r3, d8
 800724c:	4606      	mov	r6, r0
 800724e:	460f      	mov	r7, r1
 8007250:	f7f9 fc44 	bl	8000adc <__aeabi_dcmplt>
 8007254:	2800      	cmp	r0, #0
 8007256:	d165      	bne.n	8007324 <_dtoa_r+0x63c>
 8007258:	4632      	mov	r2, r6
 800725a:	463b      	mov	r3, r7
 800725c:	4935      	ldr	r1, [pc, #212]	; (8007334 <_dtoa_r+0x64c>)
 800725e:	2000      	movs	r0, #0
 8007260:	f7f9 f812 	bl	8000288 <__aeabi_dsub>
 8007264:	ec53 2b18 	vmov	r2, r3, d8
 8007268:	f7f9 fc38 	bl	8000adc <__aeabi_dcmplt>
 800726c:	2800      	cmp	r0, #0
 800726e:	f040 80b9 	bne.w	80073e4 <_dtoa_r+0x6fc>
 8007272:	9b02      	ldr	r3, [sp, #8]
 8007274:	429d      	cmp	r5, r3
 8007276:	f43f af75 	beq.w	8007164 <_dtoa_r+0x47c>
 800727a:	4b2f      	ldr	r3, [pc, #188]	; (8007338 <_dtoa_r+0x650>)
 800727c:	ec51 0b18 	vmov	r0, r1, d8
 8007280:	2200      	movs	r2, #0
 8007282:	f7f9 f9b9 	bl	80005f8 <__aeabi_dmul>
 8007286:	4b2c      	ldr	r3, [pc, #176]	; (8007338 <_dtoa_r+0x650>)
 8007288:	ec41 0b18 	vmov	d8, r0, r1
 800728c:	2200      	movs	r2, #0
 800728e:	4630      	mov	r0, r6
 8007290:	4639      	mov	r1, r7
 8007292:	f7f9 f9b1 	bl	80005f8 <__aeabi_dmul>
 8007296:	4606      	mov	r6, r0
 8007298:	460f      	mov	r7, r1
 800729a:	e7c4      	b.n	8007226 <_dtoa_r+0x53e>
 800729c:	ec51 0b17 	vmov	r0, r1, d7
 80072a0:	f7f9 f9aa 	bl	80005f8 <__aeabi_dmul>
 80072a4:	9b02      	ldr	r3, [sp, #8]
 80072a6:	9d00      	ldr	r5, [sp, #0]
 80072a8:	930c      	str	r3, [sp, #48]	; 0x30
 80072aa:	ec41 0b18 	vmov	d8, r0, r1
 80072ae:	4639      	mov	r1, r7
 80072b0:	4630      	mov	r0, r6
 80072b2:	f7f9 fc51 	bl	8000b58 <__aeabi_d2iz>
 80072b6:	9011      	str	r0, [sp, #68]	; 0x44
 80072b8:	f7f9 f934 	bl	8000524 <__aeabi_i2d>
 80072bc:	4602      	mov	r2, r0
 80072be:	460b      	mov	r3, r1
 80072c0:	4630      	mov	r0, r6
 80072c2:	4639      	mov	r1, r7
 80072c4:	f7f8 ffe0 	bl	8000288 <__aeabi_dsub>
 80072c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80072ca:	3330      	adds	r3, #48	; 0x30
 80072cc:	f805 3b01 	strb.w	r3, [r5], #1
 80072d0:	9b02      	ldr	r3, [sp, #8]
 80072d2:	429d      	cmp	r5, r3
 80072d4:	4606      	mov	r6, r0
 80072d6:	460f      	mov	r7, r1
 80072d8:	f04f 0200 	mov.w	r2, #0
 80072dc:	d134      	bne.n	8007348 <_dtoa_r+0x660>
 80072de:	4b19      	ldr	r3, [pc, #100]	; (8007344 <_dtoa_r+0x65c>)
 80072e0:	ec51 0b18 	vmov	r0, r1, d8
 80072e4:	f7f8 ffd2 	bl	800028c <__adddf3>
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	4630      	mov	r0, r6
 80072ee:	4639      	mov	r1, r7
 80072f0:	f7f9 fc12 	bl	8000b18 <__aeabi_dcmpgt>
 80072f4:	2800      	cmp	r0, #0
 80072f6:	d175      	bne.n	80073e4 <_dtoa_r+0x6fc>
 80072f8:	ec53 2b18 	vmov	r2, r3, d8
 80072fc:	4911      	ldr	r1, [pc, #68]	; (8007344 <_dtoa_r+0x65c>)
 80072fe:	2000      	movs	r0, #0
 8007300:	f7f8 ffc2 	bl	8000288 <__aeabi_dsub>
 8007304:	4602      	mov	r2, r0
 8007306:	460b      	mov	r3, r1
 8007308:	4630      	mov	r0, r6
 800730a:	4639      	mov	r1, r7
 800730c:	f7f9 fbe6 	bl	8000adc <__aeabi_dcmplt>
 8007310:	2800      	cmp	r0, #0
 8007312:	f43f af27 	beq.w	8007164 <_dtoa_r+0x47c>
 8007316:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007318:	1e6b      	subs	r3, r5, #1
 800731a:	930c      	str	r3, [sp, #48]	; 0x30
 800731c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007320:	2b30      	cmp	r3, #48	; 0x30
 8007322:	d0f8      	beq.n	8007316 <_dtoa_r+0x62e>
 8007324:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007328:	e04a      	b.n	80073c0 <_dtoa_r+0x6d8>
 800732a:	bf00      	nop
 800732c:	08009988 	.word	0x08009988
 8007330:	08009960 	.word	0x08009960
 8007334:	3ff00000 	.word	0x3ff00000
 8007338:	40240000 	.word	0x40240000
 800733c:	401c0000 	.word	0x401c0000
 8007340:	40140000 	.word	0x40140000
 8007344:	3fe00000 	.word	0x3fe00000
 8007348:	4baf      	ldr	r3, [pc, #700]	; (8007608 <_dtoa_r+0x920>)
 800734a:	f7f9 f955 	bl	80005f8 <__aeabi_dmul>
 800734e:	4606      	mov	r6, r0
 8007350:	460f      	mov	r7, r1
 8007352:	e7ac      	b.n	80072ae <_dtoa_r+0x5c6>
 8007354:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007358:	9d00      	ldr	r5, [sp, #0]
 800735a:	4642      	mov	r2, r8
 800735c:	464b      	mov	r3, r9
 800735e:	4630      	mov	r0, r6
 8007360:	4639      	mov	r1, r7
 8007362:	f7f9 fa73 	bl	800084c <__aeabi_ddiv>
 8007366:	f7f9 fbf7 	bl	8000b58 <__aeabi_d2iz>
 800736a:	9002      	str	r0, [sp, #8]
 800736c:	f7f9 f8da 	bl	8000524 <__aeabi_i2d>
 8007370:	4642      	mov	r2, r8
 8007372:	464b      	mov	r3, r9
 8007374:	f7f9 f940 	bl	80005f8 <__aeabi_dmul>
 8007378:	4602      	mov	r2, r0
 800737a:	460b      	mov	r3, r1
 800737c:	4630      	mov	r0, r6
 800737e:	4639      	mov	r1, r7
 8007380:	f7f8 ff82 	bl	8000288 <__aeabi_dsub>
 8007384:	9e02      	ldr	r6, [sp, #8]
 8007386:	9f01      	ldr	r7, [sp, #4]
 8007388:	3630      	adds	r6, #48	; 0x30
 800738a:	f805 6b01 	strb.w	r6, [r5], #1
 800738e:	9e00      	ldr	r6, [sp, #0]
 8007390:	1bae      	subs	r6, r5, r6
 8007392:	42b7      	cmp	r7, r6
 8007394:	4602      	mov	r2, r0
 8007396:	460b      	mov	r3, r1
 8007398:	d137      	bne.n	800740a <_dtoa_r+0x722>
 800739a:	f7f8 ff77 	bl	800028c <__adddf3>
 800739e:	4642      	mov	r2, r8
 80073a0:	464b      	mov	r3, r9
 80073a2:	4606      	mov	r6, r0
 80073a4:	460f      	mov	r7, r1
 80073a6:	f7f9 fbb7 	bl	8000b18 <__aeabi_dcmpgt>
 80073aa:	b9c8      	cbnz	r0, 80073e0 <_dtoa_r+0x6f8>
 80073ac:	4642      	mov	r2, r8
 80073ae:	464b      	mov	r3, r9
 80073b0:	4630      	mov	r0, r6
 80073b2:	4639      	mov	r1, r7
 80073b4:	f7f9 fb88 	bl	8000ac8 <__aeabi_dcmpeq>
 80073b8:	b110      	cbz	r0, 80073c0 <_dtoa_r+0x6d8>
 80073ba:	9b02      	ldr	r3, [sp, #8]
 80073bc:	07d9      	lsls	r1, r3, #31
 80073be:	d40f      	bmi.n	80073e0 <_dtoa_r+0x6f8>
 80073c0:	4620      	mov	r0, r4
 80073c2:	4659      	mov	r1, fp
 80073c4:	f000 fbd0 	bl	8007b68 <_Bfree>
 80073c8:	2300      	movs	r3, #0
 80073ca:	702b      	strb	r3, [r5, #0]
 80073cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073ce:	f10a 0001 	add.w	r0, sl, #1
 80073d2:	6018      	str	r0, [r3, #0]
 80073d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f43f acd8 	beq.w	8006d8c <_dtoa_r+0xa4>
 80073dc:	601d      	str	r5, [r3, #0]
 80073de:	e4d5      	b.n	8006d8c <_dtoa_r+0xa4>
 80073e0:	f8cd a01c 	str.w	sl, [sp, #28]
 80073e4:	462b      	mov	r3, r5
 80073e6:	461d      	mov	r5, r3
 80073e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073ec:	2a39      	cmp	r2, #57	; 0x39
 80073ee:	d108      	bne.n	8007402 <_dtoa_r+0x71a>
 80073f0:	9a00      	ldr	r2, [sp, #0]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d1f7      	bne.n	80073e6 <_dtoa_r+0x6fe>
 80073f6:	9a07      	ldr	r2, [sp, #28]
 80073f8:	9900      	ldr	r1, [sp, #0]
 80073fa:	3201      	adds	r2, #1
 80073fc:	9207      	str	r2, [sp, #28]
 80073fe:	2230      	movs	r2, #48	; 0x30
 8007400:	700a      	strb	r2, [r1, #0]
 8007402:	781a      	ldrb	r2, [r3, #0]
 8007404:	3201      	adds	r2, #1
 8007406:	701a      	strb	r2, [r3, #0]
 8007408:	e78c      	b.n	8007324 <_dtoa_r+0x63c>
 800740a:	4b7f      	ldr	r3, [pc, #508]	; (8007608 <_dtoa_r+0x920>)
 800740c:	2200      	movs	r2, #0
 800740e:	f7f9 f8f3 	bl	80005f8 <__aeabi_dmul>
 8007412:	2200      	movs	r2, #0
 8007414:	2300      	movs	r3, #0
 8007416:	4606      	mov	r6, r0
 8007418:	460f      	mov	r7, r1
 800741a:	f7f9 fb55 	bl	8000ac8 <__aeabi_dcmpeq>
 800741e:	2800      	cmp	r0, #0
 8007420:	d09b      	beq.n	800735a <_dtoa_r+0x672>
 8007422:	e7cd      	b.n	80073c0 <_dtoa_r+0x6d8>
 8007424:	9a08      	ldr	r2, [sp, #32]
 8007426:	2a00      	cmp	r2, #0
 8007428:	f000 80c4 	beq.w	80075b4 <_dtoa_r+0x8cc>
 800742c:	9a05      	ldr	r2, [sp, #20]
 800742e:	2a01      	cmp	r2, #1
 8007430:	f300 80a8 	bgt.w	8007584 <_dtoa_r+0x89c>
 8007434:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007436:	2a00      	cmp	r2, #0
 8007438:	f000 80a0 	beq.w	800757c <_dtoa_r+0x894>
 800743c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007440:	9e06      	ldr	r6, [sp, #24]
 8007442:	4645      	mov	r5, r8
 8007444:	9a04      	ldr	r2, [sp, #16]
 8007446:	2101      	movs	r1, #1
 8007448:	441a      	add	r2, r3
 800744a:	4620      	mov	r0, r4
 800744c:	4498      	add	r8, r3
 800744e:	9204      	str	r2, [sp, #16]
 8007450:	f000 fc46 	bl	8007ce0 <__i2b>
 8007454:	4607      	mov	r7, r0
 8007456:	2d00      	cmp	r5, #0
 8007458:	dd0b      	ble.n	8007472 <_dtoa_r+0x78a>
 800745a:	9b04      	ldr	r3, [sp, #16]
 800745c:	2b00      	cmp	r3, #0
 800745e:	dd08      	ble.n	8007472 <_dtoa_r+0x78a>
 8007460:	42ab      	cmp	r3, r5
 8007462:	9a04      	ldr	r2, [sp, #16]
 8007464:	bfa8      	it	ge
 8007466:	462b      	movge	r3, r5
 8007468:	eba8 0803 	sub.w	r8, r8, r3
 800746c:	1aed      	subs	r5, r5, r3
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	9304      	str	r3, [sp, #16]
 8007472:	9b06      	ldr	r3, [sp, #24]
 8007474:	b1fb      	cbz	r3, 80074b6 <_dtoa_r+0x7ce>
 8007476:	9b08      	ldr	r3, [sp, #32]
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 809f 	beq.w	80075bc <_dtoa_r+0x8d4>
 800747e:	2e00      	cmp	r6, #0
 8007480:	dd11      	ble.n	80074a6 <_dtoa_r+0x7be>
 8007482:	4639      	mov	r1, r7
 8007484:	4632      	mov	r2, r6
 8007486:	4620      	mov	r0, r4
 8007488:	f000 fce6 	bl	8007e58 <__pow5mult>
 800748c:	465a      	mov	r2, fp
 800748e:	4601      	mov	r1, r0
 8007490:	4607      	mov	r7, r0
 8007492:	4620      	mov	r0, r4
 8007494:	f000 fc3a 	bl	8007d0c <__multiply>
 8007498:	4659      	mov	r1, fp
 800749a:	9007      	str	r0, [sp, #28]
 800749c:	4620      	mov	r0, r4
 800749e:	f000 fb63 	bl	8007b68 <_Bfree>
 80074a2:	9b07      	ldr	r3, [sp, #28]
 80074a4:	469b      	mov	fp, r3
 80074a6:	9b06      	ldr	r3, [sp, #24]
 80074a8:	1b9a      	subs	r2, r3, r6
 80074aa:	d004      	beq.n	80074b6 <_dtoa_r+0x7ce>
 80074ac:	4659      	mov	r1, fp
 80074ae:	4620      	mov	r0, r4
 80074b0:	f000 fcd2 	bl	8007e58 <__pow5mult>
 80074b4:	4683      	mov	fp, r0
 80074b6:	2101      	movs	r1, #1
 80074b8:	4620      	mov	r0, r4
 80074ba:	f000 fc11 	bl	8007ce0 <__i2b>
 80074be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	4606      	mov	r6, r0
 80074c4:	dd7c      	ble.n	80075c0 <_dtoa_r+0x8d8>
 80074c6:	461a      	mov	r2, r3
 80074c8:	4601      	mov	r1, r0
 80074ca:	4620      	mov	r0, r4
 80074cc:	f000 fcc4 	bl	8007e58 <__pow5mult>
 80074d0:	9b05      	ldr	r3, [sp, #20]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	4606      	mov	r6, r0
 80074d6:	dd76      	ble.n	80075c6 <_dtoa_r+0x8de>
 80074d8:	2300      	movs	r3, #0
 80074da:	9306      	str	r3, [sp, #24]
 80074dc:	6933      	ldr	r3, [r6, #16]
 80074de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80074e2:	6918      	ldr	r0, [r3, #16]
 80074e4:	f000 fbac 	bl	8007c40 <__hi0bits>
 80074e8:	f1c0 0020 	rsb	r0, r0, #32
 80074ec:	9b04      	ldr	r3, [sp, #16]
 80074ee:	4418      	add	r0, r3
 80074f0:	f010 001f 	ands.w	r0, r0, #31
 80074f4:	f000 8086 	beq.w	8007604 <_dtoa_r+0x91c>
 80074f8:	f1c0 0320 	rsb	r3, r0, #32
 80074fc:	2b04      	cmp	r3, #4
 80074fe:	dd7f      	ble.n	8007600 <_dtoa_r+0x918>
 8007500:	f1c0 001c 	rsb	r0, r0, #28
 8007504:	9b04      	ldr	r3, [sp, #16]
 8007506:	4403      	add	r3, r0
 8007508:	4480      	add	r8, r0
 800750a:	4405      	add	r5, r0
 800750c:	9304      	str	r3, [sp, #16]
 800750e:	f1b8 0f00 	cmp.w	r8, #0
 8007512:	dd05      	ble.n	8007520 <_dtoa_r+0x838>
 8007514:	4659      	mov	r1, fp
 8007516:	4642      	mov	r2, r8
 8007518:	4620      	mov	r0, r4
 800751a:	f000 fcf7 	bl	8007f0c <__lshift>
 800751e:	4683      	mov	fp, r0
 8007520:	9b04      	ldr	r3, [sp, #16]
 8007522:	2b00      	cmp	r3, #0
 8007524:	dd05      	ble.n	8007532 <_dtoa_r+0x84a>
 8007526:	4631      	mov	r1, r6
 8007528:	461a      	mov	r2, r3
 800752a:	4620      	mov	r0, r4
 800752c:	f000 fcee 	bl	8007f0c <__lshift>
 8007530:	4606      	mov	r6, r0
 8007532:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007534:	2b00      	cmp	r3, #0
 8007536:	d069      	beq.n	800760c <_dtoa_r+0x924>
 8007538:	4631      	mov	r1, r6
 800753a:	4658      	mov	r0, fp
 800753c:	f000 fd52 	bl	8007fe4 <__mcmp>
 8007540:	2800      	cmp	r0, #0
 8007542:	da63      	bge.n	800760c <_dtoa_r+0x924>
 8007544:	2300      	movs	r3, #0
 8007546:	4659      	mov	r1, fp
 8007548:	220a      	movs	r2, #10
 800754a:	4620      	mov	r0, r4
 800754c:	f000 fb2e 	bl	8007bac <__multadd>
 8007550:	9b08      	ldr	r3, [sp, #32]
 8007552:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007556:	4683      	mov	fp, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 818f 	beq.w	800787c <_dtoa_r+0xb94>
 800755e:	4639      	mov	r1, r7
 8007560:	2300      	movs	r3, #0
 8007562:	220a      	movs	r2, #10
 8007564:	4620      	mov	r0, r4
 8007566:	f000 fb21 	bl	8007bac <__multadd>
 800756a:	f1b9 0f00 	cmp.w	r9, #0
 800756e:	4607      	mov	r7, r0
 8007570:	f300 808e 	bgt.w	8007690 <_dtoa_r+0x9a8>
 8007574:	9b05      	ldr	r3, [sp, #20]
 8007576:	2b02      	cmp	r3, #2
 8007578:	dc50      	bgt.n	800761c <_dtoa_r+0x934>
 800757a:	e089      	b.n	8007690 <_dtoa_r+0x9a8>
 800757c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800757e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007582:	e75d      	b.n	8007440 <_dtoa_r+0x758>
 8007584:	9b01      	ldr	r3, [sp, #4]
 8007586:	1e5e      	subs	r6, r3, #1
 8007588:	9b06      	ldr	r3, [sp, #24]
 800758a:	42b3      	cmp	r3, r6
 800758c:	bfbf      	itttt	lt
 800758e:	9b06      	ldrlt	r3, [sp, #24]
 8007590:	9606      	strlt	r6, [sp, #24]
 8007592:	1af2      	sublt	r2, r6, r3
 8007594:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007596:	bfb6      	itet	lt
 8007598:	189b      	addlt	r3, r3, r2
 800759a:	1b9e      	subge	r6, r3, r6
 800759c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800759e:	9b01      	ldr	r3, [sp, #4]
 80075a0:	bfb8      	it	lt
 80075a2:	2600      	movlt	r6, #0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	bfb5      	itete	lt
 80075a8:	eba8 0503 	sublt.w	r5, r8, r3
 80075ac:	9b01      	ldrge	r3, [sp, #4]
 80075ae:	2300      	movlt	r3, #0
 80075b0:	4645      	movge	r5, r8
 80075b2:	e747      	b.n	8007444 <_dtoa_r+0x75c>
 80075b4:	9e06      	ldr	r6, [sp, #24]
 80075b6:	9f08      	ldr	r7, [sp, #32]
 80075b8:	4645      	mov	r5, r8
 80075ba:	e74c      	b.n	8007456 <_dtoa_r+0x76e>
 80075bc:	9a06      	ldr	r2, [sp, #24]
 80075be:	e775      	b.n	80074ac <_dtoa_r+0x7c4>
 80075c0:	9b05      	ldr	r3, [sp, #20]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	dc18      	bgt.n	80075f8 <_dtoa_r+0x910>
 80075c6:	9b02      	ldr	r3, [sp, #8]
 80075c8:	b9b3      	cbnz	r3, 80075f8 <_dtoa_r+0x910>
 80075ca:	9b03      	ldr	r3, [sp, #12]
 80075cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075d0:	b9a3      	cbnz	r3, 80075fc <_dtoa_r+0x914>
 80075d2:	9b03      	ldr	r3, [sp, #12]
 80075d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075d8:	0d1b      	lsrs	r3, r3, #20
 80075da:	051b      	lsls	r3, r3, #20
 80075dc:	b12b      	cbz	r3, 80075ea <_dtoa_r+0x902>
 80075de:	9b04      	ldr	r3, [sp, #16]
 80075e0:	3301      	adds	r3, #1
 80075e2:	9304      	str	r3, [sp, #16]
 80075e4:	f108 0801 	add.w	r8, r8, #1
 80075e8:	2301      	movs	r3, #1
 80075ea:	9306      	str	r3, [sp, #24]
 80075ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	f47f af74 	bne.w	80074dc <_dtoa_r+0x7f4>
 80075f4:	2001      	movs	r0, #1
 80075f6:	e779      	b.n	80074ec <_dtoa_r+0x804>
 80075f8:	2300      	movs	r3, #0
 80075fa:	e7f6      	b.n	80075ea <_dtoa_r+0x902>
 80075fc:	9b02      	ldr	r3, [sp, #8]
 80075fe:	e7f4      	b.n	80075ea <_dtoa_r+0x902>
 8007600:	d085      	beq.n	800750e <_dtoa_r+0x826>
 8007602:	4618      	mov	r0, r3
 8007604:	301c      	adds	r0, #28
 8007606:	e77d      	b.n	8007504 <_dtoa_r+0x81c>
 8007608:	40240000 	.word	0x40240000
 800760c:	9b01      	ldr	r3, [sp, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	dc38      	bgt.n	8007684 <_dtoa_r+0x99c>
 8007612:	9b05      	ldr	r3, [sp, #20]
 8007614:	2b02      	cmp	r3, #2
 8007616:	dd35      	ble.n	8007684 <_dtoa_r+0x99c>
 8007618:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800761c:	f1b9 0f00 	cmp.w	r9, #0
 8007620:	d10d      	bne.n	800763e <_dtoa_r+0x956>
 8007622:	4631      	mov	r1, r6
 8007624:	464b      	mov	r3, r9
 8007626:	2205      	movs	r2, #5
 8007628:	4620      	mov	r0, r4
 800762a:	f000 fabf 	bl	8007bac <__multadd>
 800762e:	4601      	mov	r1, r0
 8007630:	4606      	mov	r6, r0
 8007632:	4658      	mov	r0, fp
 8007634:	f000 fcd6 	bl	8007fe4 <__mcmp>
 8007638:	2800      	cmp	r0, #0
 800763a:	f73f adbd 	bgt.w	80071b8 <_dtoa_r+0x4d0>
 800763e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007640:	9d00      	ldr	r5, [sp, #0]
 8007642:	ea6f 0a03 	mvn.w	sl, r3
 8007646:	f04f 0800 	mov.w	r8, #0
 800764a:	4631      	mov	r1, r6
 800764c:	4620      	mov	r0, r4
 800764e:	f000 fa8b 	bl	8007b68 <_Bfree>
 8007652:	2f00      	cmp	r7, #0
 8007654:	f43f aeb4 	beq.w	80073c0 <_dtoa_r+0x6d8>
 8007658:	f1b8 0f00 	cmp.w	r8, #0
 800765c:	d005      	beq.n	800766a <_dtoa_r+0x982>
 800765e:	45b8      	cmp	r8, r7
 8007660:	d003      	beq.n	800766a <_dtoa_r+0x982>
 8007662:	4641      	mov	r1, r8
 8007664:	4620      	mov	r0, r4
 8007666:	f000 fa7f 	bl	8007b68 <_Bfree>
 800766a:	4639      	mov	r1, r7
 800766c:	4620      	mov	r0, r4
 800766e:	f000 fa7b 	bl	8007b68 <_Bfree>
 8007672:	e6a5      	b.n	80073c0 <_dtoa_r+0x6d8>
 8007674:	2600      	movs	r6, #0
 8007676:	4637      	mov	r7, r6
 8007678:	e7e1      	b.n	800763e <_dtoa_r+0x956>
 800767a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800767c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007680:	4637      	mov	r7, r6
 8007682:	e599      	b.n	80071b8 <_dtoa_r+0x4d0>
 8007684:	9b08      	ldr	r3, [sp, #32]
 8007686:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	f000 80fd 	beq.w	800788a <_dtoa_r+0xba2>
 8007690:	2d00      	cmp	r5, #0
 8007692:	dd05      	ble.n	80076a0 <_dtoa_r+0x9b8>
 8007694:	4639      	mov	r1, r7
 8007696:	462a      	mov	r2, r5
 8007698:	4620      	mov	r0, r4
 800769a:	f000 fc37 	bl	8007f0c <__lshift>
 800769e:	4607      	mov	r7, r0
 80076a0:	9b06      	ldr	r3, [sp, #24]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d05c      	beq.n	8007760 <_dtoa_r+0xa78>
 80076a6:	6879      	ldr	r1, [r7, #4]
 80076a8:	4620      	mov	r0, r4
 80076aa:	f000 fa1d 	bl	8007ae8 <_Balloc>
 80076ae:	4605      	mov	r5, r0
 80076b0:	b928      	cbnz	r0, 80076be <_dtoa_r+0x9d6>
 80076b2:	4b80      	ldr	r3, [pc, #512]	; (80078b4 <_dtoa_r+0xbcc>)
 80076b4:	4602      	mov	r2, r0
 80076b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80076ba:	f7ff bb2e 	b.w	8006d1a <_dtoa_r+0x32>
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	3202      	adds	r2, #2
 80076c2:	0092      	lsls	r2, r2, #2
 80076c4:	f107 010c 	add.w	r1, r7, #12
 80076c8:	300c      	adds	r0, #12
 80076ca:	f000 f9ff 	bl	8007acc <memcpy>
 80076ce:	2201      	movs	r2, #1
 80076d0:	4629      	mov	r1, r5
 80076d2:	4620      	mov	r0, r4
 80076d4:	f000 fc1a 	bl	8007f0c <__lshift>
 80076d8:	9b00      	ldr	r3, [sp, #0]
 80076da:	3301      	adds	r3, #1
 80076dc:	9301      	str	r3, [sp, #4]
 80076de:	9b00      	ldr	r3, [sp, #0]
 80076e0:	444b      	add	r3, r9
 80076e2:	9307      	str	r3, [sp, #28]
 80076e4:	9b02      	ldr	r3, [sp, #8]
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	46b8      	mov	r8, r7
 80076ec:	9306      	str	r3, [sp, #24]
 80076ee:	4607      	mov	r7, r0
 80076f0:	9b01      	ldr	r3, [sp, #4]
 80076f2:	4631      	mov	r1, r6
 80076f4:	3b01      	subs	r3, #1
 80076f6:	4658      	mov	r0, fp
 80076f8:	9302      	str	r3, [sp, #8]
 80076fa:	f7ff fa69 	bl	8006bd0 <quorem>
 80076fe:	4603      	mov	r3, r0
 8007700:	3330      	adds	r3, #48	; 0x30
 8007702:	9004      	str	r0, [sp, #16]
 8007704:	4641      	mov	r1, r8
 8007706:	4658      	mov	r0, fp
 8007708:	9308      	str	r3, [sp, #32]
 800770a:	f000 fc6b 	bl	8007fe4 <__mcmp>
 800770e:	463a      	mov	r2, r7
 8007710:	4681      	mov	r9, r0
 8007712:	4631      	mov	r1, r6
 8007714:	4620      	mov	r0, r4
 8007716:	f000 fc81 	bl	800801c <__mdiff>
 800771a:	68c2      	ldr	r2, [r0, #12]
 800771c:	9b08      	ldr	r3, [sp, #32]
 800771e:	4605      	mov	r5, r0
 8007720:	bb02      	cbnz	r2, 8007764 <_dtoa_r+0xa7c>
 8007722:	4601      	mov	r1, r0
 8007724:	4658      	mov	r0, fp
 8007726:	f000 fc5d 	bl	8007fe4 <__mcmp>
 800772a:	9b08      	ldr	r3, [sp, #32]
 800772c:	4602      	mov	r2, r0
 800772e:	4629      	mov	r1, r5
 8007730:	4620      	mov	r0, r4
 8007732:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007736:	f000 fa17 	bl	8007b68 <_Bfree>
 800773a:	9b05      	ldr	r3, [sp, #20]
 800773c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800773e:	9d01      	ldr	r5, [sp, #4]
 8007740:	ea43 0102 	orr.w	r1, r3, r2
 8007744:	9b06      	ldr	r3, [sp, #24]
 8007746:	430b      	orrs	r3, r1
 8007748:	9b08      	ldr	r3, [sp, #32]
 800774a:	d10d      	bne.n	8007768 <_dtoa_r+0xa80>
 800774c:	2b39      	cmp	r3, #57	; 0x39
 800774e:	d029      	beq.n	80077a4 <_dtoa_r+0xabc>
 8007750:	f1b9 0f00 	cmp.w	r9, #0
 8007754:	dd01      	ble.n	800775a <_dtoa_r+0xa72>
 8007756:	9b04      	ldr	r3, [sp, #16]
 8007758:	3331      	adds	r3, #49	; 0x31
 800775a:	9a02      	ldr	r2, [sp, #8]
 800775c:	7013      	strb	r3, [r2, #0]
 800775e:	e774      	b.n	800764a <_dtoa_r+0x962>
 8007760:	4638      	mov	r0, r7
 8007762:	e7b9      	b.n	80076d8 <_dtoa_r+0x9f0>
 8007764:	2201      	movs	r2, #1
 8007766:	e7e2      	b.n	800772e <_dtoa_r+0xa46>
 8007768:	f1b9 0f00 	cmp.w	r9, #0
 800776c:	db06      	blt.n	800777c <_dtoa_r+0xa94>
 800776e:	9905      	ldr	r1, [sp, #20]
 8007770:	ea41 0909 	orr.w	r9, r1, r9
 8007774:	9906      	ldr	r1, [sp, #24]
 8007776:	ea59 0101 	orrs.w	r1, r9, r1
 800777a:	d120      	bne.n	80077be <_dtoa_r+0xad6>
 800777c:	2a00      	cmp	r2, #0
 800777e:	ddec      	ble.n	800775a <_dtoa_r+0xa72>
 8007780:	4659      	mov	r1, fp
 8007782:	2201      	movs	r2, #1
 8007784:	4620      	mov	r0, r4
 8007786:	9301      	str	r3, [sp, #4]
 8007788:	f000 fbc0 	bl	8007f0c <__lshift>
 800778c:	4631      	mov	r1, r6
 800778e:	4683      	mov	fp, r0
 8007790:	f000 fc28 	bl	8007fe4 <__mcmp>
 8007794:	2800      	cmp	r0, #0
 8007796:	9b01      	ldr	r3, [sp, #4]
 8007798:	dc02      	bgt.n	80077a0 <_dtoa_r+0xab8>
 800779a:	d1de      	bne.n	800775a <_dtoa_r+0xa72>
 800779c:	07da      	lsls	r2, r3, #31
 800779e:	d5dc      	bpl.n	800775a <_dtoa_r+0xa72>
 80077a0:	2b39      	cmp	r3, #57	; 0x39
 80077a2:	d1d8      	bne.n	8007756 <_dtoa_r+0xa6e>
 80077a4:	9a02      	ldr	r2, [sp, #8]
 80077a6:	2339      	movs	r3, #57	; 0x39
 80077a8:	7013      	strb	r3, [r2, #0]
 80077aa:	462b      	mov	r3, r5
 80077ac:	461d      	mov	r5, r3
 80077ae:	3b01      	subs	r3, #1
 80077b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80077b4:	2a39      	cmp	r2, #57	; 0x39
 80077b6:	d050      	beq.n	800785a <_dtoa_r+0xb72>
 80077b8:	3201      	adds	r2, #1
 80077ba:	701a      	strb	r2, [r3, #0]
 80077bc:	e745      	b.n	800764a <_dtoa_r+0x962>
 80077be:	2a00      	cmp	r2, #0
 80077c0:	dd03      	ble.n	80077ca <_dtoa_r+0xae2>
 80077c2:	2b39      	cmp	r3, #57	; 0x39
 80077c4:	d0ee      	beq.n	80077a4 <_dtoa_r+0xabc>
 80077c6:	3301      	adds	r3, #1
 80077c8:	e7c7      	b.n	800775a <_dtoa_r+0xa72>
 80077ca:	9a01      	ldr	r2, [sp, #4]
 80077cc:	9907      	ldr	r1, [sp, #28]
 80077ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80077d2:	428a      	cmp	r2, r1
 80077d4:	d02a      	beq.n	800782c <_dtoa_r+0xb44>
 80077d6:	4659      	mov	r1, fp
 80077d8:	2300      	movs	r3, #0
 80077da:	220a      	movs	r2, #10
 80077dc:	4620      	mov	r0, r4
 80077de:	f000 f9e5 	bl	8007bac <__multadd>
 80077e2:	45b8      	cmp	r8, r7
 80077e4:	4683      	mov	fp, r0
 80077e6:	f04f 0300 	mov.w	r3, #0
 80077ea:	f04f 020a 	mov.w	r2, #10
 80077ee:	4641      	mov	r1, r8
 80077f0:	4620      	mov	r0, r4
 80077f2:	d107      	bne.n	8007804 <_dtoa_r+0xb1c>
 80077f4:	f000 f9da 	bl	8007bac <__multadd>
 80077f8:	4680      	mov	r8, r0
 80077fa:	4607      	mov	r7, r0
 80077fc:	9b01      	ldr	r3, [sp, #4]
 80077fe:	3301      	adds	r3, #1
 8007800:	9301      	str	r3, [sp, #4]
 8007802:	e775      	b.n	80076f0 <_dtoa_r+0xa08>
 8007804:	f000 f9d2 	bl	8007bac <__multadd>
 8007808:	4639      	mov	r1, r7
 800780a:	4680      	mov	r8, r0
 800780c:	2300      	movs	r3, #0
 800780e:	220a      	movs	r2, #10
 8007810:	4620      	mov	r0, r4
 8007812:	f000 f9cb 	bl	8007bac <__multadd>
 8007816:	4607      	mov	r7, r0
 8007818:	e7f0      	b.n	80077fc <_dtoa_r+0xb14>
 800781a:	f1b9 0f00 	cmp.w	r9, #0
 800781e:	9a00      	ldr	r2, [sp, #0]
 8007820:	bfcc      	ite	gt
 8007822:	464d      	movgt	r5, r9
 8007824:	2501      	movle	r5, #1
 8007826:	4415      	add	r5, r2
 8007828:	f04f 0800 	mov.w	r8, #0
 800782c:	4659      	mov	r1, fp
 800782e:	2201      	movs	r2, #1
 8007830:	4620      	mov	r0, r4
 8007832:	9301      	str	r3, [sp, #4]
 8007834:	f000 fb6a 	bl	8007f0c <__lshift>
 8007838:	4631      	mov	r1, r6
 800783a:	4683      	mov	fp, r0
 800783c:	f000 fbd2 	bl	8007fe4 <__mcmp>
 8007840:	2800      	cmp	r0, #0
 8007842:	dcb2      	bgt.n	80077aa <_dtoa_r+0xac2>
 8007844:	d102      	bne.n	800784c <_dtoa_r+0xb64>
 8007846:	9b01      	ldr	r3, [sp, #4]
 8007848:	07db      	lsls	r3, r3, #31
 800784a:	d4ae      	bmi.n	80077aa <_dtoa_r+0xac2>
 800784c:	462b      	mov	r3, r5
 800784e:	461d      	mov	r5, r3
 8007850:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007854:	2a30      	cmp	r2, #48	; 0x30
 8007856:	d0fa      	beq.n	800784e <_dtoa_r+0xb66>
 8007858:	e6f7      	b.n	800764a <_dtoa_r+0x962>
 800785a:	9a00      	ldr	r2, [sp, #0]
 800785c:	429a      	cmp	r2, r3
 800785e:	d1a5      	bne.n	80077ac <_dtoa_r+0xac4>
 8007860:	f10a 0a01 	add.w	sl, sl, #1
 8007864:	2331      	movs	r3, #49	; 0x31
 8007866:	e779      	b.n	800775c <_dtoa_r+0xa74>
 8007868:	4b13      	ldr	r3, [pc, #76]	; (80078b8 <_dtoa_r+0xbd0>)
 800786a:	f7ff baaf 	b.w	8006dcc <_dtoa_r+0xe4>
 800786e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007870:	2b00      	cmp	r3, #0
 8007872:	f47f aa86 	bne.w	8006d82 <_dtoa_r+0x9a>
 8007876:	4b11      	ldr	r3, [pc, #68]	; (80078bc <_dtoa_r+0xbd4>)
 8007878:	f7ff baa8 	b.w	8006dcc <_dtoa_r+0xe4>
 800787c:	f1b9 0f00 	cmp.w	r9, #0
 8007880:	dc03      	bgt.n	800788a <_dtoa_r+0xba2>
 8007882:	9b05      	ldr	r3, [sp, #20]
 8007884:	2b02      	cmp	r3, #2
 8007886:	f73f aec9 	bgt.w	800761c <_dtoa_r+0x934>
 800788a:	9d00      	ldr	r5, [sp, #0]
 800788c:	4631      	mov	r1, r6
 800788e:	4658      	mov	r0, fp
 8007890:	f7ff f99e 	bl	8006bd0 <quorem>
 8007894:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007898:	f805 3b01 	strb.w	r3, [r5], #1
 800789c:	9a00      	ldr	r2, [sp, #0]
 800789e:	1aaa      	subs	r2, r5, r2
 80078a0:	4591      	cmp	r9, r2
 80078a2:	ddba      	ble.n	800781a <_dtoa_r+0xb32>
 80078a4:	4659      	mov	r1, fp
 80078a6:	2300      	movs	r3, #0
 80078a8:	220a      	movs	r2, #10
 80078aa:	4620      	mov	r0, r4
 80078ac:	f000 f97e 	bl	8007bac <__multadd>
 80078b0:	4683      	mov	fp, r0
 80078b2:	e7eb      	b.n	800788c <_dtoa_r+0xba4>
 80078b4:	0800988b 	.word	0x0800988b
 80078b8:	080097e4 	.word	0x080097e4
 80078bc:	08009808 	.word	0x08009808

080078c0 <std>:
 80078c0:	2300      	movs	r3, #0
 80078c2:	b510      	push	{r4, lr}
 80078c4:	4604      	mov	r4, r0
 80078c6:	e9c0 3300 	strd	r3, r3, [r0]
 80078ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078ce:	6083      	str	r3, [r0, #8]
 80078d0:	8181      	strh	r1, [r0, #12]
 80078d2:	6643      	str	r3, [r0, #100]	; 0x64
 80078d4:	81c2      	strh	r2, [r0, #14]
 80078d6:	6183      	str	r3, [r0, #24]
 80078d8:	4619      	mov	r1, r3
 80078da:	2208      	movs	r2, #8
 80078dc:	305c      	adds	r0, #92	; 0x5c
 80078de:	f7fe fccd 	bl	800627c <memset>
 80078e2:	4b05      	ldr	r3, [pc, #20]	; (80078f8 <std+0x38>)
 80078e4:	6263      	str	r3, [r4, #36]	; 0x24
 80078e6:	4b05      	ldr	r3, [pc, #20]	; (80078fc <std+0x3c>)
 80078e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80078ea:	4b05      	ldr	r3, [pc, #20]	; (8007900 <std+0x40>)
 80078ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078ee:	4b05      	ldr	r3, [pc, #20]	; (8007904 <std+0x44>)
 80078f0:	6224      	str	r4, [r4, #32]
 80078f2:	6323      	str	r3, [r4, #48]	; 0x30
 80078f4:	bd10      	pop	{r4, pc}
 80078f6:	bf00      	nop
 80078f8:	080088e5 	.word	0x080088e5
 80078fc:	08008907 	.word	0x08008907
 8007900:	0800893f 	.word	0x0800893f
 8007904:	08008963 	.word	0x08008963

08007908 <_cleanup_r>:
 8007908:	4901      	ldr	r1, [pc, #4]	; (8007910 <_cleanup_r+0x8>)
 800790a:	f000 b8af 	b.w	8007a6c <_fwalk_reent>
 800790e:	bf00      	nop
 8007910:	08008c79 	.word	0x08008c79

08007914 <__sfmoreglue>:
 8007914:	b570      	push	{r4, r5, r6, lr}
 8007916:	1e4a      	subs	r2, r1, #1
 8007918:	2568      	movs	r5, #104	; 0x68
 800791a:	4355      	muls	r5, r2
 800791c:	460e      	mov	r6, r1
 800791e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007922:	f000 fcbf 	bl	80082a4 <_malloc_r>
 8007926:	4604      	mov	r4, r0
 8007928:	b140      	cbz	r0, 800793c <__sfmoreglue+0x28>
 800792a:	2100      	movs	r1, #0
 800792c:	e9c0 1600 	strd	r1, r6, [r0]
 8007930:	300c      	adds	r0, #12
 8007932:	60a0      	str	r0, [r4, #8]
 8007934:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007938:	f7fe fca0 	bl	800627c <memset>
 800793c:	4620      	mov	r0, r4
 800793e:	bd70      	pop	{r4, r5, r6, pc}

08007940 <__sfp_lock_acquire>:
 8007940:	4801      	ldr	r0, [pc, #4]	; (8007948 <__sfp_lock_acquire+0x8>)
 8007942:	f000 b8b8 	b.w	8007ab6 <__retarget_lock_acquire_recursive>
 8007946:	bf00      	nop
 8007948:	200007e8 	.word	0x200007e8

0800794c <__sfp_lock_release>:
 800794c:	4801      	ldr	r0, [pc, #4]	; (8007954 <__sfp_lock_release+0x8>)
 800794e:	f000 b8b3 	b.w	8007ab8 <__retarget_lock_release_recursive>
 8007952:	bf00      	nop
 8007954:	200007e8 	.word	0x200007e8

08007958 <__sinit_lock_acquire>:
 8007958:	4801      	ldr	r0, [pc, #4]	; (8007960 <__sinit_lock_acquire+0x8>)
 800795a:	f000 b8ac 	b.w	8007ab6 <__retarget_lock_acquire_recursive>
 800795e:	bf00      	nop
 8007960:	200007e3 	.word	0x200007e3

08007964 <__sinit_lock_release>:
 8007964:	4801      	ldr	r0, [pc, #4]	; (800796c <__sinit_lock_release+0x8>)
 8007966:	f000 b8a7 	b.w	8007ab8 <__retarget_lock_release_recursive>
 800796a:	bf00      	nop
 800796c:	200007e3 	.word	0x200007e3

08007970 <__sinit>:
 8007970:	b510      	push	{r4, lr}
 8007972:	4604      	mov	r4, r0
 8007974:	f7ff fff0 	bl	8007958 <__sinit_lock_acquire>
 8007978:	69a3      	ldr	r3, [r4, #24]
 800797a:	b11b      	cbz	r3, 8007984 <__sinit+0x14>
 800797c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007980:	f7ff bff0 	b.w	8007964 <__sinit_lock_release>
 8007984:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007988:	6523      	str	r3, [r4, #80]	; 0x50
 800798a:	4b13      	ldr	r3, [pc, #76]	; (80079d8 <__sinit+0x68>)
 800798c:	4a13      	ldr	r2, [pc, #76]	; (80079dc <__sinit+0x6c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	62a2      	str	r2, [r4, #40]	; 0x28
 8007992:	42a3      	cmp	r3, r4
 8007994:	bf04      	itt	eq
 8007996:	2301      	moveq	r3, #1
 8007998:	61a3      	streq	r3, [r4, #24]
 800799a:	4620      	mov	r0, r4
 800799c:	f000 f820 	bl	80079e0 <__sfp>
 80079a0:	6060      	str	r0, [r4, #4]
 80079a2:	4620      	mov	r0, r4
 80079a4:	f000 f81c 	bl	80079e0 <__sfp>
 80079a8:	60a0      	str	r0, [r4, #8]
 80079aa:	4620      	mov	r0, r4
 80079ac:	f000 f818 	bl	80079e0 <__sfp>
 80079b0:	2200      	movs	r2, #0
 80079b2:	60e0      	str	r0, [r4, #12]
 80079b4:	2104      	movs	r1, #4
 80079b6:	6860      	ldr	r0, [r4, #4]
 80079b8:	f7ff ff82 	bl	80078c0 <std>
 80079bc:	68a0      	ldr	r0, [r4, #8]
 80079be:	2201      	movs	r2, #1
 80079c0:	2109      	movs	r1, #9
 80079c2:	f7ff ff7d 	bl	80078c0 <std>
 80079c6:	68e0      	ldr	r0, [r4, #12]
 80079c8:	2202      	movs	r2, #2
 80079ca:	2112      	movs	r1, #18
 80079cc:	f7ff ff78 	bl	80078c0 <std>
 80079d0:	2301      	movs	r3, #1
 80079d2:	61a3      	str	r3, [r4, #24]
 80079d4:	e7d2      	b.n	800797c <__sinit+0xc>
 80079d6:	bf00      	nop
 80079d8:	080097d0 	.word	0x080097d0
 80079dc:	08007909 	.word	0x08007909

080079e0 <__sfp>:
 80079e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e2:	4607      	mov	r7, r0
 80079e4:	f7ff ffac 	bl	8007940 <__sfp_lock_acquire>
 80079e8:	4b1e      	ldr	r3, [pc, #120]	; (8007a64 <__sfp+0x84>)
 80079ea:	681e      	ldr	r6, [r3, #0]
 80079ec:	69b3      	ldr	r3, [r6, #24]
 80079ee:	b913      	cbnz	r3, 80079f6 <__sfp+0x16>
 80079f0:	4630      	mov	r0, r6
 80079f2:	f7ff ffbd 	bl	8007970 <__sinit>
 80079f6:	3648      	adds	r6, #72	; 0x48
 80079f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80079fc:	3b01      	subs	r3, #1
 80079fe:	d503      	bpl.n	8007a08 <__sfp+0x28>
 8007a00:	6833      	ldr	r3, [r6, #0]
 8007a02:	b30b      	cbz	r3, 8007a48 <__sfp+0x68>
 8007a04:	6836      	ldr	r6, [r6, #0]
 8007a06:	e7f7      	b.n	80079f8 <__sfp+0x18>
 8007a08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a0c:	b9d5      	cbnz	r5, 8007a44 <__sfp+0x64>
 8007a0e:	4b16      	ldr	r3, [pc, #88]	; (8007a68 <__sfp+0x88>)
 8007a10:	60e3      	str	r3, [r4, #12]
 8007a12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007a16:	6665      	str	r5, [r4, #100]	; 0x64
 8007a18:	f000 f84c 	bl	8007ab4 <__retarget_lock_init_recursive>
 8007a1c:	f7ff ff96 	bl	800794c <__sfp_lock_release>
 8007a20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007a24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007a28:	6025      	str	r5, [r4, #0]
 8007a2a:	61a5      	str	r5, [r4, #24]
 8007a2c:	2208      	movs	r2, #8
 8007a2e:	4629      	mov	r1, r5
 8007a30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a34:	f7fe fc22 	bl	800627c <memset>
 8007a38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a40:	4620      	mov	r0, r4
 8007a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a44:	3468      	adds	r4, #104	; 0x68
 8007a46:	e7d9      	b.n	80079fc <__sfp+0x1c>
 8007a48:	2104      	movs	r1, #4
 8007a4a:	4638      	mov	r0, r7
 8007a4c:	f7ff ff62 	bl	8007914 <__sfmoreglue>
 8007a50:	4604      	mov	r4, r0
 8007a52:	6030      	str	r0, [r6, #0]
 8007a54:	2800      	cmp	r0, #0
 8007a56:	d1d5      	bne.n	8007a04 <__sfp+0x24>
 8007a58:	f7ff ff78 	bl	800794c <__sfp_lock_release>
 8007a5c:	230c      	movs	r3, #12
 8007a5e:	603b      	str	r3, [r7, #0]
 8007a60:	e7ee      	b.n	8007a40 <__sfp+0x60>
 8007a62:	bf00      	nop
 8007a64:	080097d0 	.word	0x080097d0
 8007a68:	ffff0001 	.word	0xffff0001

08007a6c <_fwalk_reent>:
 8007a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a70:	4606      	mov	r6, r0
 8007a72:	4688      	mov	r8, r1
 8007a74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a78:	2700      	movs	r7, #0
 8007a7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a7e:	f1b9 0901 	subs.w	r9, r9, #1
 8007a82:	d505      	bpl.n	8007a90 <_fwalk_reent+0x24>
 8007a84:	6824      	ldr	r4, [r4, #0]
 8007a86:	2c00      	cmp	r4, #0
 8007a88:	d1f7      	bne.n	8007a7a <_fwalk_reent+0xe>
 8007a8a:	4638      	mov	r0, r7
 8007a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a90:	89ab      	ldrh	r3, [r5, #12]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d907      	bls.n	8007aa6 <_fwalk_reent+0x3a>
 8007a96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	d003      	beq.n	8007aa6 <_fwalk_reent+0x3a>
 8007a9e:	4629      	mov	r1, r5
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	47c0      	blx	r8
 8007aa4:	4307      	orrs	r7, r0
 8007aa6:	3568      	adds	r5, #104	; 0x68
 8007aa8:	e7e9      	b.n	8007a7e <_fwalk_reent+0x12>
	...

08007aac <_localeconv_r>:
 8007aac:	4800      	ldr	r0, [pc, #0]	; (8007ab0 <_localeconv_r+0x4>)
 8007aae:	4770      	bx	lr
 8007ab0:	20000168 	.word	0x20000168

08007ab4 <__retarget_lock_init_recursive>:
 8007ab4:	4770      	bx	lr

08007ab6 <__retarget_lock_acquire_recursive>:
 8007ab6:	4770      	bx	lr

08007ab8 <__retarget_lock_release_recursive>:
 8007ab8:	4770      	bx	lr
	...

08007abc <malloc>:
 8007abc:	4b02      	ldr	r3, [pc, #8]	; (8007ac8 <malloc+0xc>)
 8007abe:	4601      	mov	r1, r0
 8007ac0:	6818      	ldr	r0, [r3, #0]
 8007ac2:	f000 bbef 	b.w	80082a4 <_malloc_r>
 8007ac6:	bf00      	nop
 8007ac8:	20000014 	.word	0x20000014

08007acc <memcpy>:
 8007acc:	440a      	add	r2, r1
 8007ace:	4291      	cmp	r1, r2
 8007ad0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ad4:	d100      	bne.n	8007ad8 <memcpy+0xc>
 8007ad6:	4770      	bx	lr
 8007ad8:	b510      	push	{r4, lr}
 8007ada:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ade:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ae2:	4291      	cmp	r1, r2
 8007ae4:	d1f9      	bne.n	8007ada <memcpy+0xe>
 8007ae6:	bd10      	pop	{r4, pc}

08007ae8 <_Balloc>:
 8007ae8:	b570      	push	{r4, r5, r6, lr}
 8007aea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007aec:	4604      	mov	r4, r0
 8007aee:	460d      	mov	r5, r1
 8007af0:	b976      	cbnz	r6, 8007b10 <_Balloc+0x28>
 8007af2:	2010      	movs	r0, #16
 8007af4:	f7ff ffe2 	bl	8007abc <malloc>
 8007af8:	4602      	mov	r2, r0
 8007afa:	6260      	str	r0, [r4, #36]	; 0x24
 8007afc:	b920      	cbnz	r0, 8007b08 <_Balloc+0x20>
 8007afe:	4b18      	ldr	r3, [pc, #96]	; (8007b60 <_Balloc+0x78>)
 8007b00:	4818      	ldr	r0, [pc, #96]	; (8007b64 <_Balloc+0x7c>)
 8007b02:	2166      	movs	r1, #102	; 0x66
 8007b04:	f001 f804 	bl	8008b10 <__assert_func>
 8007b08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b0c:	6006      	str	r6, [r0, #0]
 8007b0e:	60c6      	str	r6, [r0, #12]
 8007b10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b12:	68f3      	ldr	r3, [r6, #12]
 8007b14:	b183      	cbz	r3, 8007b38 <_Balloc+0x50>
 8007b16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b1e:	b9b8      	cbnz	r0, 8007b50 <_Balloc+0x68>
 8007b20:	2101      	movs	r1, #1
 8007b22:	fa01 f605 	lsl.w	r6, r1, r5
 8007b26:	1d72      	adds	r2, r6, #5
 8007b28:	0092      	lsls	r2, r2, #2
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f000 fb5a 	bl	80081e4 <_calloc_r>
 8007b30:	b160      	cbz	r0, 8007b4c <_Balloc+0x64>
 8007b32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b36:	e00e      	b.n	8007b56 <_Balloc+0x6e>
 8007b38:	2221      	movs	r2, #33	; 0x21
 8007b3a:	2104      	movs	r1, #4
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	f000 fb51 	bl	80081e4 <_calloc_r>
 8007b42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b44:	60f0      	str	r0, [r6, #12]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d1e4      	bne.n	8007b16 <_Balloc+0x2e>
 8007b4c:	2000      	movs	r0, #0
 8007b4e:	bd70      	pop	{r4, r5, r6, pc}
 8007b50:	6802      	ldr	r2, [r0, #0]
 8007b52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b56:	2300      	movs	r3, #0
 8007b58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b5c:	e7f7      	b.n	8007b4e <_Balloc+0x66>
 8007b5e:	bf00      	nop
 8007b60:	08009815 	.word	0x08009815
 8007b64:	080098fc 	.word	0x080098fc

08007b68 <_Bfree>:
 8007b68:	b570      	push	{r4, r5, r6, lr}
 8007b6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b6c:	4605      	mov	r5, r0
 8007b6e:	460c      	mov	r4, r1
 8007b70:	b976      	cbnz	r6, 8007b90 <_Bfree+0x28>
 8007b72:	2010      	movs	r0, #16
 8007b74:	f7ff ffa2 	bl	8007abc <malloc>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	6268      	str	r0, [r5, #36]	; 0x24
 8007b7c:	b920      	cbnz	r0, 8007b88 <_Bfree+0x20>
 8007b7e:	4b09      	ldr	r3, [pc, #36]	; (8007ba4 <_Bfree+0x3c>)
 8007b80:	4809      	ldr	r0, [pc, #36]	; (8007ba8 <_Bfree+0x40>)
 8007b82:	218a      	movs	r1, #138	; 0x8a
 8007b84:	f000 ffc4 	bl	8008b10 <__assert_func>
 8007b88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b8c:	6006      	str	r6, [r0, #0]
 8007b8e:	60c6      	str	r6, [r0, #12]
 8007b90:	b13c      	cbz	r4, 8007ba2 <_Bfree+0x3a>
 8007b92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b94:	6862      	ldr	r2, [r4, #4]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b9c:	6021      	str	r1, [r4, #0]
 8007b9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ba2:	bd70      	pop	{r4, r5, r6, pc}
 8007ba4:	08009815 	.word	0x08009815
 8007ba8:	080098fc 	.word	0x080098fc

08007bac <__multadd>:
 8007bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb0:	690e      	ldr	r6, [r1, #16]
 8007bb2:	4607      	mov	r7, r0
 8007bb4:	4698      	mov	r8, r3
 8007bb6:	460c      	mov	r4, r1
 8007bb8:	f101 0014 	add.w	r0, r1, #20
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	6805      	ldr	r5, [r0, #0]
 8007bc0:	b2a9      	uxth	r1, r5
 8007bc2:	fb02 8101 	mla	r1, r2, r1, r8
 8007bc6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007bca:	0c2d      	lsrs	r5, r5, #16
 8007bcc:	fb02 c505 	mla	r5, r2, r5, ip
 8007bd0:	b289      	uxth	r1, r1
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007bd8:	429e      	cmp	r6, r3
 8007bda:	f840 1b04 	str.w	r1, [r0], #4
 8007bde:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8007be2:	dcec      	bgt.n	8007bbe <__multadd+0x12>
 8007be4:	f1b8 0f00 	cmp.w	r8, #0
 8007be8:	d022      	beq.n	8007c30 <__multadd+0x84>
 8007bea:	68a3      	ldr	r3, [r4, #8]
 8007bec:	42b3      	cmp	r3, r6
 8007bee:	dc19      	bgt.n	8007c24 <__multadd+0x78>
 8007bf0:	6861      	ldr	r1, [r4, #4]
 8007bf2:	4638      	mov	r0, r7
 8007bf4:	3101      	adds	r1, #1
 8007bf6:	f7ff ff77 	bl	8007ae8 <_Balloc>
 8007bfa:	4605      	mov	r5, r0
 8007bfc:	b928      	cbnz	r0, 8007c0a <__multadd+0x5e>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	4b0d      	ldr	r3, [pc, #52]	; (8007c38 <__multadd+0x8c>)
 8007c02:	480e      	ldr	r0, [pc, #56]	; (8007c3c <__multadd+0x90>)
 8007c04:	21b5      	movs	r1, #181	; 0xb5
 8007c06:	f000 ff83 	bl	8008b10 <__assert_func>
 8007c0a:	6922      	ldr	r2, [r4, #16]
 8007c0c:	3202      	adds	r2, #2
 8007c0e:	f104 010c 	add.w	r1, r4, #12
 8007c12:	0092      	lsls	r2, r2, #2
 8007c14:	300c      	adds	r0, #12
 8007c16:	f7ff ff59 	bl	8007acc <memcpy>
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	4638      	mov	r0, r7
 8007c1e:	f7ff ffa3 	bl	8007b68 <_Bfree>
 8007c22:	462c      	mov	r4, r5
 8007c24:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007c28:	3601      	adds	r6, #1
 8007c2a:	f8c3 8014 	str.w	r8, [r3, #20]
 8007c2e:	6126      	str	r6, [r4, #16]
 8007c30:	4620      	mov	r0, r4
 8007c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c36:	bf00      	nop
 8007c38:	0800988b 	.word	0x0800988b
 8007c3c:	080098fc 	.word	0x080098fc

08007c40 <__hi0bits>:
 8007c40:	0c03      	lsrs	r3, r0, #16
 8007c42:	041b      	lsls	r3, r3, #16
 8007c44:	b9d3      	cbnz	r3, 8007c7c <__hi0bits+0x3c>
 8007c46:	0400      	lsls	r0, r0, #16
 8007c48:	2310      	movs	r3, #16
 8007c4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007c4e:	bf04      	itt	eq
 8007c50:	0200      	lsleq	r0, r0, #8
 8007c52:	3308      	addeq	r3, #8
 8007c54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007c58:	bf04      	itt	eq
 8007c5a:	0100      	lsleq	r0, r0, #4
 8007c5c:	3304      	addeq	r3, #4
 8007c5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007c62:	bf04      	itt	eq
 8007c64:	0080      	lsleq	r0, r0, #2
 8007c66:	3302      	addeq	r3, #2
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	db05      	blt.n	8007c78 <__hi0bits+0x38>
 8007c6c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007c70:	f103 0301 	add.w	r3, r3, #1
 8007c74:	bf08      	it	eq
 8007c76:	2320      	moveq	r3, #32
 8007c78:	4618      	mov	r0, r3
 8007c7a:	4770      	bx	lr
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	e7e4      	b.n	8007c4a <__hi0bits+0xa>

08007c80 <__lo0bits>:
 8007c80:	6803      	ldr	r3, [r0, #0]
 8007c82:	f013 0207 	ands.w	r2, r3, #7
 8007c86:	4601      	mov	r1, r0
 8007c88:	d00b      	beq.n	8007ca2 <__lo0bits+0x22>
 8007c8a:	07da      	lsls	r2, r3, #31
 8007c8c:	d424      	bmi.n	8007cd8 <__lo0bits+0x58>
 8007c8e:	0798      	lsls	r0, r3, #30
 8007c90:	bf49      	itett	mi
 8007c92:	085b      	lsrmi	r3, r3, #1
 8007c94:	089b      	lsrpl	r3, r3, #2
 8007c96:	2001      	movmi	r0, #1
 8007c98:	600b      	strmi	r3, [r1, #0]
 8007c9a:	bf5c      	itt	pl
 8007c9c:	600b      	strpl	r3, [r1, #0]
 8007c9e:	2002      	movpl	r0, #2
 8007ca0:	4770      	bx	lr
 8007ca2:	b298      	uxth	r0, r3
 8007ca4:	b9b0      	cbnz	r0, 8007cd4 <__lo0bits+0x54>
 8007ca6:	0c1b      	lsrs	r3, r3, #16
 8007ca8:	2010      	movs	r0, #16
 8007caa:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007cae:	bf04      	itt	eq
 8007cb0:	0a1b      	lsreq	r3, r3, #8
 8007cb2:	3008      	addeq	r0, #8
 8007cb4:	071a      	lsls	r2, r3, #28
 8007cb6:	bf04      	itt	eq
 8007cb8:	091b      	lsreq	r3, r3, #4
 8007cba:	3004      	addeq	r0, #4
 8007cbc:	079a      	lsls	r2, r3, #30
 8007cbe:	bf04      	itt	eq
 8007cc0:	089b      	lsreq	r3, r3, #2
 8007cc2:	3002      	addeq	r0, #2
 8007cc4:	07da      	lsls	r2, r3, #31
 8007cc6:	d403      	bmi.n	8007cd0 <__lo0bits+0x50>
 8007cc8:	085b      	lsrs	r3, r3, #1
 8007cca:	f100 0001 	add.w	r0, r0, #1
 8007cce:	d005      	beq.n	8007cdc <__lo0bits+0x5c>
 8007cd0:	600b      	str	r3, [r1, #0]
 8007cd2:	4770      	bx	lr
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	e7e8      	b.n	8007caa <__lo0bits+0x2a>
 8007cd8:	2000      	movs	r0, #0
 8007cda:	4770      	bx	lr
 8007cdc:	2020      	movs	r0, #32
 8007cde:	4770      	bx	lr

08007ce0 <__i2b>:
 8007ce0:	b510      	push	{r4, lr}
 8007ce2:	460c      	mov	r4, r1
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	f7ff feff 	bl	8007ae8 <_Balloc>
 8007cea:	4602      	mov	r2, r0
 8007cec:	b928      	cbnz	r0, 8007cfa <__i2b+0x1a>
 8007cee:	4b05      	ldr	r3, [pc, #20]	; (8007d04 <__i2b+0x24>)
 8007cf0:	4805      	ldr	r0, [pc, #20]	; (8007d08 <__i2b+0x28>)
 8007cf2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007cf6:	f000 ff0b 	bl	8008b10 <__assert_func>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	6144      	str	r4, [r0, #20]
 8007cfe:	6103      	str	r3, [r0, #16]
 8007d00:	bd10      	pop	{r4, pc}
 8007d02:	bf00      	nop
 8007d04:	0800988b 	.word	0x0800988b
 8007d08:	080098fc 	.word	0x080098fc

08007d0c <__multiply>:
 8007d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d10:	4614      	mov	r4, r2
 8007d12:	690a      	ldr	r2, [r1, #16]
 8007d14:	6923      	ldr	r3, [r4, #16]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	bfb8      	it	lt
 8007d1a:	460b      	movlt	r3, r1
 8007d1c:	460d      	mov	r5, r1
 8007d1e:	bfbc      	itt	lt
 8007d20:	4625      	movlt	r5, r4
 8007d22:	461c      	movlt	r4, r3
 8007d24:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007d28:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007d2c:	68ab      	ldr	r3, [r5, #8]
 8007d2e:	6869      	ldr	r1, [r5, #4]
 8007d30:	eb0a 0709 	add.w	r7, sl, r9
 8007d34:	42bb      	cmp	r3, r7
 8007d36:	b085      	sub	sp, #20
 8007d38:	bfb8      	it	lt
 8007d3a:	3101      	addlt	r1, #1
 8007d3c:	f7ff fed4 	bl	8007ae8 <_Balloc>
 8007d40:	b930      	cbnz	r0, 8007d50 <__multiply+0x44>
 8007d42:	4602      	mov	r2, r0
 8007d44:	4b42      	ldr	r3, [pc, #264]	; (8007e50 <__multiply+0x144>)
 8007d46:	4843      	ldr	r0, [pc, #268]	; (8007e54 <__multiply+0x148>)
 8007d48:	f240 115d 	movw	r1, #349	; 0x15d
 8007d4c:	f000 fee0 	bl	8008b10 <__assert_func>
 8007d50:	f100 0614 	add.w	r6, r0, #20
 8007d54:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007d58:	4633      	mov	r3, r6
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	4543      	cmp	r3, r8
 8007d5e:	d31e      	bcc.n	8007d9e <__multiply+0x92>
 8007d60:	f105 0c14 	add.w	ip, r5, #20
 8007d64:	f104 0314 	add.w	r3, r4, #20
 8007d68:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007d6c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007d70:	9202      	str	r2, [sp, #8]
 8007d72:	ebac 0205 	sub.w	r2, ip, r5
 8007d76:	3a15      	subs	r2, #21
 8007d78:	f022 0203 	bic.w	r2, r2, #3
 8007d7c:	3204      	adds	r2, #4
 8007d7e:	f105 0115 	add.w	r1, r5, #21
 8007d82:	458c      	cmp	ip, r1
 8007d84:	bf38      	it	cc
 8007d86:	2204      	movcc	r2, #4
 8007d88:	9201      	str	r2, [sp, #4]
 8007d8a:	9a02      	ldr	r2, [sp, #8]
 8007d8c:	9303      	str	r3, [sp, #12]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d808      	bhi.n	8007da4 <__multiply+0x98>
 8007d92:	2f00      	cmp	r7, #0
 8007d94:	dc55      	bgt.n	8007e42 <__multiply+0x136>
 8007d96:	6107      	str	r7, [r0, #16]
 8007d98:	b005      	add	sp, #20
 8007d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d9e:	f843 2b04 	str.w	r2, [r3], #4
 8007da2:	e7db      	b.n	8007d5c <__multiply+0x50>
 8007da4:	f8b3 a000 	ldrh.w	sl, [r3]
 8007da8:	f1ba 0f00 	cmp.w	sl, #0
 8007dac:	d020      	beq.n	8007df0 <__multiply+0xe4>
 8007dae:	f105 0e14 	add.w	lr, r5, #20
 8007db2:	46b1      	mov	r9, r6
 8007db4:	2200      	movs	r2, #0
 8007db6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007dba:	f8d9 b000 	ldr.w	fp, [r9]
 8007dbe:	b2a1      	uxth	r1, r4
 8007dc0:	fa1f fb8b 	uxth.w	fp, fp
 8007dc4:	fb0a b101 	mla	r1, sl, r1, fp
 8007dc8:	4411      	add	r1, r2
 8007dca:	f8d9 2000 	ldr.w	r2, [r9]
 8007dce:	0c24      	lsrs	r4, r4, #16
 8007dd0:	0c12      	lsrs	r2, r2, #16
 8007dd2:	fb0a 2404 	mla	r4, sl, r4, r2
 8007dd6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007dda:	b289      	uxth	r1, r1
 8007ddc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007de0:	45f4      	cmp	ip, lr
 8007de2:	f849 1b04 	str.w	r1, [r9], #4
 8007de6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007dea:	d8e4      	bhi.n	8007db6 <__multiply+0xaa>
 8007dec:	9901      	ldr	r1, [sp, #4]
 8007dee:	5072      	str	r2, [r6, r1]
 8007df0:	9a03      	ldr	r2, [sp, #12]
 8007df2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007df6:	3304      	adds	r3, #4
 8007df8:	f1b9 0f00 	cmp.w	r9, #0
 8007dfc:	d01f      	beq.n	8007e3e <__multiply+0x132>
 8007dfe:	6834      	ldr	r4, [r6, #0]
 8007e00:	f105 0114 	add.w	r1, r5, #20
 8007e04:	46b6      	mov	lr, r6
 8007e06:	f04f 0a00 	mov.w	sl, #0
 8007e0a:	880a      	ldrh	r2, [r1, #0]
 8007e0c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007e10:	fb09 b202 	mla	r2, r9, r2, fp
 8007e14:	4492      	add	sl, r2
 8007e16:	b2a4      	uxth	r4, r4
 8007e18:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007e1c:	f84e 4b04 	str.w	r4, [lr], #4
 8007e20:	f851 4b04 	ldr.w	r4, [r1], #4
 8007e24:	f8be 2000 	ldrh.w	r2, [lr]
 8007e28:	0c24      	lsrs	r4, r4, #16
 8007e2a:	fb09 2404 	mla	r4, r9, r4, r2
 8007e2e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007e32:	458c      	cmp	ip, r1
 8007e34:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007e38:	d8e7      	bhi.n	8007e0a <__multiply+0xfe>
 8007e3a:	9a01      	ldr	r2, [sp, #4]
 8007e3c:	50b4      	str	r4, [r6, r2]
 8007e3e:	3604      	adds	r6, #4
 8007e40:	e7a3      	b.n	8007d8a <__multiply+0x7e>
 8007e42:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1a5      	bne.n	8007d96 <__multiply+0x8a>
 8007e4a:	3f01      	subs	r7, #1
 8007e4c:	e7a1      	b.n	8007d92 <__multiply+0x86>
 8007e4e:	bf00      	nop
 8007e50:	0800988b 	.word	0x0800988b
 8007e54:	080098fc 	.word	0x080098fc

08007e58 <__pow5mult>:
 8007e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e5c:	4615      	mov	r5, r2
 8007e5e:	f012 0203 	ands.w	r2, r2, #3
 8007e62:	4606      	mov	r6, r0
 8007e64:	460f      	mov	r7, r1
 8007e66:	d007      	beq.n	8007e78 <__pow5mult+0x20>
 8007e68:	4c25      	ldr	r4, [pc, #148]	; (8007f00 <__pow5mult+0xa8>)
 8007e6a:	3a01      	subs	r2, #1
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e72:	f7ff fe9b 	bl	8007bac <__multadd>
 8007e76:	4607      	mov	r7, r0
 8007e78:	10ad      	asrs	r5, r5, #2
 8007e7a:	d03d      	beq.n	8007ef8 <__pow5mult+0xa0>
 8007e7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e7e:	b97c      	cbnz	r4, 8007ea0 <__pow5mult+0x48>
 8007e80:	2010      	movs	r0, #16
 8007e82:	f7ff fe1b 	bl	8007abc <malloc>
 8007e86:	4602      	mov	r2, r0
 8007e88:	6270      	str	r0, [r6, #36]	; 0x24
 8007e8a:	b928      	cbnz	r0, 8007e98 <__pow5mult+0x40>
 8007e8c:	4b1d      	ldr	r3, [pc, #116]	; (8007f04 <__pow5mult+0xac>)
 8007e8e:	481e      	ldr	r0, [pc, #120]	; (8007f08 <__pow5mult+0xb0>)
 8007e90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007e94:	f000 fe3c 	bl	8008b10 <__assert_func>
 8007e98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e9c:	6004      	str	r4, [r0, #0]
 8007e9e:	60c4      	str	r4, [r0, #12]
 8007ea0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007ea4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ea8:	b94c      	cbnz	r4, 8007ebe <__pow5mult+0x66>
 8007eaa:	f240 2171 	movw	r1, #625	; 0x271
 8007eae:	4630      	mov	r0, r6
 8007eb0:	f7ff ff16 	bl	8007ce0 <__i2b>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8007eba:	4604      	mov	r4, r0
 8007ebc:	6003      	str	r3, [r0, #0]
 8007ebe:	f04f 0900 	mov.w	r9, #0
 8007ec2:	07eb      	lsls	r3, r5, #31
 8007ec4:	d50a      	bpl.n	8007edc <__pow5mult+0x84>
 8007ec6:	4639      	mov	r1, r7
 8007ec8:	4622      	mov	r2, r4
 8007eca:	4630      	mov	r0, r6
 8007ecc:	f7ff ff1e 	bl	8007d0c <__multiply>
 8007ed0:	4639      	mov	r1, r7
 8007ed2:	4680      	mov	r8, r0
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	f7ff fe47 	bl	8007b68 <_Bfree>
 8007eda:	4647      	mov	r7, r8
 8007edc:	106d      	asrs	r5, r5, #1
 8007ede:	d00b      	beq.n	8007ef8 <__pow5mult+0xa0>
 8007ee0:	6820      	ldr	r0, [r4, #0]
 8007ee2:	b938      	cbnz	r0, 8007ef4 <__pow5mult+0x9c>
 8007ee4:	4622      	mov	r2, r4
 8007ee6:	4621      	mov	r1, r4
 8007ee8:	4630      	mov	r0, r6
 8007eea:	f7ff ff0f 	bl	8007d0c <__multiply>
 8007eee:	6020      	str	r0, [r4, #0]
 8007ef0:	f8c0 9000 	str.w	r9, [r0]
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	e7e4      	b.n	8007ec2 <__pow5mult+0x6a>
 8007ef8:	4638      	mov	r0, r7
 8007efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007efe:	bf00      	nop
 8007f00:	08009a50 	.word	0x08009a50
 8007f04:	08009815 	.word	0x08009815
 8007f08:	080098fc 	.word	0x080098fc

08007f0c <__lshift>:
 8007f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f10:	460c      	mov	r4, r1
 8007f12:	6849      	ldr	r1, [r1, #4]
 8007f14:	6923      	ldr	r3, [r4, #16]
 8007f16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f1a:	68a3      	ldr	r3, [r4, #8]
 8007f1c:	4607      	mov	r7, r0
 8007f1e:	4691      	mov	r9, r2
 8007f20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f24:	f108 0601 	add.w	r6, r8, #1
 8007f28:	42b3      	cmp	r3, r6
 8007f2a:	db0b      	blt.n	8007f44 <__lshift+0x38>
 8007f2c:	4638      	mov	r0, r7
 8007f2e:	f7ff fddb 	bl	8007ae8 <_Balloc>
 8007f32:	4605      	mov	r5, r0
 8007f34:	b948      	cbnz	r0, 8007f4a <__lshift+0x3e>
 8007f36:	4602      	mov	r2, r0
 8007f38:	4b28      	ldr	r3, [pc, #160]	; (8007fdc <__lshift+0xd0>)
 8007f3a:	4829      	ldr	r0, [pc, #164]	; (8007fe0 <__lshift+0xd4>)
 8007f3c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007f40:	f000 fde6 	bl	8008b10 <__assert_func>
 8007f44:	3101      	adds	r1, #1
 8007f46:	005b      	lsls	r3, r3, #1
 8007f48:	e7ee      	b.n	8007f28 <__lshift+0x1c>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	f100 0114 	add.w	r1, r0, #20
 8007f50:	f100 0210 	add.w	r2, r0, #16
 8007f54:	4618      	mov	r0, r3
 8007f56:	4553      	cmp	r3, sl
 8007f58:	db33      	blt.n	8007fc2 <__lshift+0xb6>
 8007f5a:	6920      	ldr	r0, [r4, #16]
 8007f5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f60:	f104 0314 	add.w	r3, r4, #20
 8007f64:	f019 091f 	ands.w	r9, r9, #31
 8007f68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f70:	d02b      	beq.n	8007fca <__lshift+0xbe>
 8007f72:	f1c9 0e20 	rsb	lr, r9, #32
 8007f76:	468a      	mov	sl, r1
 8007f78:	2200      	movs	r2, #0
 8007f7a:	6818      	ldr	r0, [r3, #0]
 8007f7c:	fa00 f009 	lsl.w	r0, r0, r9
 8007f80:	4302      	orrs	r2, r0
 8007f82:	f84a 2b04 	str.w	r2, [sl], #4
 8007f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f8a:	459c      	cmp	ip, r3
 8007f8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f90:	d8f3      	bhi.n	8007f7a <__lshift+0x6e>
 8007f92:	ebac 0304 	sub.w	r3, ip, r4
 8007f96:	3b15      	subs	r3, #21
 8007f98:	f023 0303 	bic.w	r3, r3, #3
 8007f9c:	3304      	adds	r3, #4
 8007f9e:	f104 0015 	add.w	r0, r4, #21
 8007fa2:	4584      	cmp	ip, r0
 8007fa4:	bf38      	it	cc
 8007fa6:	2304      	movcc	r3, #4
 8007fa8:	50ca      	str	r2, [r1, r3]
 8007faa:	b10a      	cbz	r2, 8007fb0 <__lshift+0xa4>
 8007fac:	f108 0602 	add.w	r6, r8, #2
 8007fb0:	3e01      	subs	r6, #1
 8007fb2:	4638      	mov	r0, r7
 8007fb4:	612e      	str	r6, [r5, #16]
 8007fb6:	4621      	mov	r1, r4
 8007fb8:	f7ff fdd6 	bl	8007b68 <_Bfree>
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	e7c5      	b.n	8007f56 <__lshift+0x4a>
 8007fca:	3904      	subs	r1, #4
 8007fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fd0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007fd4:	459c      	cmp	ip, r3
 8007fd6:	d8f9      	bhi.n	8007fcc <__lshift+0xc0>
 8007fd8:	e7ea      	b.n	8007fb0 <__lshift+0xa4>
 8007fda:	bf00      	nop
 8007fdc:	0800988b 	.word	0x0800988b
 8007fe0:	080098fc 	.word	0x080098fc

08007fe4 <__mcmp>:
 8007fe4:	b530      	push	{r4, r5, lr}
 8007fe6:	6902      	ldr	r2, [r0, #16]
 8007fe8:	690c      	ldr	r4, [r1, #16]
 8007fea:	1b12      	subs	r2, r2, r4
 8007fec:	d10e      	bne.n	800800c <__mcmp+0x28>
 8007fee:	f100 0314 	add.w	r3, r0, #20
 8007ff2:	3114      	adds	r1, #20
 8007ff4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007ff8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007ffc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008000:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008004:	42a5      	cmp	r5, r4
 8008006:	d003      	beq.n	8008010 <__mcmp+0x2c>
 8008008:	d305      	bcc.n	8008016 <__mcmp+0x32>
 800800a:	2201      	movs	r2, #1
 800800c:	4610      	mov	r0, r2
 800800e:	bd30      	pop	{r4, r5, pc}
 8008010:	4283      	cmp	r3, r0
 8008012:	d3f3      	bcc.n	8007ffc <__mcmp+0x18>
 8008014:	e7fa      	b.n	800800c <__mcmp+0x28>
 8008016:	f04f 32ff 	mov.w	r2, #4294967295
 800801a:	e7f7      	b.n	800800c <__mcmp+0x28>

0800801c <__mdiff>:
 800801c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008020:	460c      	mov	r4, r1
 8008022:	4606      	mov	r6, r0
 8008024:	4611      	mov	r1, r2
 8008026:	4620      	mov	r0, r4
 8008028:	4617      	mov	r7, r2
 800802a:	f7ff ffdb 	bl	8007fe4 <__mcmp>
 800802e:	1e05      	subs	r5, r0, #0
 8008030:	d110      	bne.n	8008054 <__mdiff+0x38>
 8008032:	4629      	mov	r1, r5
 8008034:	4630      	mov	r0, r6
 8008036:	f7ff fd57 	bl	8007ae8 <_Balloc>
 800803a:	b930      	cbnz	r0, 800804a <__mdiff+0x2e>
 800803c:	4b39      	ldr	r3, [pc, #228]	; (8008124 <__mdiff+0x108>)
 800803e:	4602      	mov	r2, r0
 8008040:	f240 2132 	movw	r1, #562	; 0x232
 8008044:	4838      	ldr	r0, [pc, #224]	; (8008128 <__mdiff+0x10c>)
 8008046:	f000 fd63 	bl	8008b10 <__assert_func>
 800804a:	2301      	movs	r3, #1
 800804c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008050:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008054:	bfa4      	itt	ge
 8008056:	463b      	movge	r3, r7
 8008058:	4627      	movge	r7, r4
 800805a:	4630      	mov	r0, r6
 800805c:	6879      	ldr	r1, [r7, #4]
 800805e:	bfa6      	itte	ge
 8008060:	461c      	movge	r4, r3
 8008062:	2500      	movge	r5, #0
 8008064:	2501      	movlt	r5, #1
 8008066:	f7ff fd3f 	bl	8007ae8 <_Balloc>
 800806a:	b920      	cbnz	r0, 8008076 <__mdiff+0x5a>
 800806c:	4b2d      	ldr	r3, [pc, #180]	; (8008124 <__mdiff+0x108>)
 800806e:	4602      	mov	r2, r0
 8008070:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008074:	e7e6      	b.n	8008044 <__mdiff+0x28>
 8008076:	693e      	ldr	r6, [r7, #16]
 8008078:	60c5      	str	r5, [r0, #12]
 800807a:	6925      	ldr	r5, [r4, #16]
 800807c:	f107 0114 	add.w	r1, r7, #20
 8008080:	f104 0914 	add.w	r9, r4, #20
 8008084:	f100 0e14 	add.w	lr, r0, #20
 8008088:	f107 0210 	add.w	r2, r7, #16
 800808c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008090:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008094:	46f2      	mov	sl, lr
 8008096:	2700      	movs	r7, #0
 8008098:	f859 3b04 	ldr.w	r3, [r9], #4
 800809c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80080a0:	fa1f f883 	uxth.w	r8, r3
 80080a4:	fa17 f78b 	uxtah	r7, r7, fp
 80080a8:	0c1b      	lsrs	r3, r3, #16
 80080aa:	eba7 0808 	sub.w	r8, r7, r8
 80080ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80080b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80080b6:	fa1f f888 	uxth.w	r8, r8
 80080ba:	141f      	asrs	r7, r3, #16
 80080bc:	454d      	cmp	r5, r9
 80080be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80080c2:	f84a 3b04 	str.w	r3, [sl], #4
 80080c6:	d8e7      	bhi.n	8008098 <__mdiff+0x7c>
 80080c8:	1b2b      	subs	r3, r5, r4
 80080ca:	3b15      	subs	r3, #21
 80080cc:	f023 0303 	bic.w	r3, r3, #3
 80080d0:	3304      	adds	r3, #4
 80080d2:	3415      	adds	r4, #21
 80080d4:	42a5      	cmp	r5, r4
 80080d6:	bf38      	it	cc
 80080d8:	2304      	movcc	r3, #4
 80080da:	4419      	add	r1, r3
 80080dc:	4473      	add	r3, lr
 80080de:	469e      	mov	lr, r3
 80080e0:	460d      	mov	r5, r1
 80080e2:	4565      	cmp	r5, ip
 80080e4:	d30e      	bcc.n	8008104 <__mdiff+0xe8>
 80080e6:	f10c 0203 	add.w	r2, ip, #3
 80080ea:	1a52      	subs	r2, r2, r1
 80080ec:	f022 0203 	bic.w	r2, r2, #3
 80080f0:	3903      	subs	r1, #3
 80080f2:	458c      	cmp	ip, r1
 80080f4:	bf38      	it	cc
 80080f6:	2200      	movcc	r2, #0
 80080f8:	441a      	add	r2, r3
 80080fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80080fe:	b17b      	cbz	r3, 8008120 <__mdiff+0x104>
 8008100:	6106      	str	r6, [r0, #16]
 8008102:	e7a5      	b.n	8008050 <__mdiff+0x34>
 8008104:	f855 8b04 	ldr.w	r8, [r5], #4
 8008108:	fa17 f488 	uxtah	r4, r7, r8
 800810c:	1422      	asrs	r2, r4, #16
 800810e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008112:	b2a4      	uxth	r4, r4
 8008114:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008118:	f84e 4b04 	str.w	r4, [lr], #4
 800811c:	1417      	asrs	r7, r2, #16
 800811e:	e7e0      	b.n	80080e2 <__mdiff+0xc6>
 8008120:	3e01      	subs	r6, #1
 8008122:	e7ea      	b.n	80080fa <__mdiff+0xde>
 8008124:	0800988b 	.word	0x0800988b
 8008128:	080098fc 	.word	0x080098fc

0800812c <__d2b>:
 800812c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008130:	4689      	mov	r9, r1
 8008132:	2101      	movs	r1, #1
 8008134:	ec57 6b10 	vmov	r6, r7, d0
 8008138:	4690      	mov	r8, r2
 800813a:	f7ff fcd5 	bl	8007ae8 <_Balloc>
 800813e:	4604      	mov	r4, r0
 8008140:	b930      	cbnz	r0, 8008150 <__d2b+0x24>
 8008142:	4602      	mov	r2, r0
 8008144:	4b25      	ldr	r3, [pc, #148]	; (80081dc <__d2b+0xb0>)
 8008146:	4826      	ldr	r0, [pc, #152]	; (80081e0 <__d2b+0xb4>)
 8008148:	f240 310a 	movw	r1, #778	; 0x30a
 800814c:	f000 fce0 	bl	8008b10 <__assert_func>
 8008150:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008154:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008158:	bb35      	cbnz	r5, 80081a8 <__d2b+0x7c>
 800815a:	2e00      	cmp	r6, #0
 800815c:	9301      	str	r3, [sp, #4]
 800815e:	d028      	beq.n	80081b2 <__d2b+0x86>
 8008160:	4668      	mov	r0, sp
 8008162:	9600      	str	r6, [sp, #0]
 8008164:	f7ff fd8c 	bl	8007c80 <__lo0bits>
 8008168:	9900      	ldr	r1, [sp, #0]
 800816a:	b300      	cbz	r0, 80081ae <__d2b+0x82>
 800816c:	9a01      	ldr	r2, [sp, #4]
 800816e:	f1c0 0320 	rsb	r3, r0, #32
 8008172:	fa02 f303 	lsl.w	r3, r2, r3
 8008176:	430b      	orrs	r3, r1
 8008178:	40c2      	lsrs	r2, r0
 800817a:	6163      	str	r3, [r4, #20]
 800817c:	9201      	str	r2, [sp, #4]
 800817e:	9b01      	ldr	r3, [sp, #4]
 8008180:	61a3      	str	r3, [r4, #24]
 8008182:	2b00      	cmp	r3, #0
 8008184:	bf14      	ite	ne
 8008186:	2202      	movne	r2, #2
 8008188:	2201      	moveq	r2, #1
 800818a:	6122      	str	r2, [r4, #16]
 800818c:	b1d5      	cbz	r5, 80081c4 <__d2b+0x98>
 800818e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008192:	4405      	add	r5, r0
 8008194:	f8c9 5000 	str.w	r5, [r9]
 8008198:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800819c:	f8c8 0000 	str.w	r0, [r8]
 80081a0:	4620      	mov	r0, r4
 80081a2:	b003      	add	sp, #12
 80081a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081ac:	e7d5      	b.n	800815a <__d2b+0x2e>
 80081ae:	6161      	str	r1, [r4, #20]
 80081b0:	e7e5      	b.n	800817e <__d2b+0x52>
 80081b2:	a801      	add	r0, sp, #4
 80081b4:	f7ff fd64 	bl	8007c80 <__lo0bits>
 80081b8:	9b01      	ldr	r3, [sp, #4]
 80081ba:	6163      	str	r3, [r4, #20]
 80081bc:	2201      	movs	r2, #1
 80081be:	6122      	str	r2, [r4, #16]
 80081c0:	3020      	adds	r0, #32
 80081c2:	e7e3      	b.n	800818c <__d2b+0x60>
 80081c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80081c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80081cc:	f8c9 0000 	str.w	r0, [r9]
 80081d0:	6918      	ldr	r0, [r3, #16]
 80081d2:	f7ff fd35 	bl	8007c40 <__hi0bits>
 80081d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80081da:	e7df      	b.n	800819c <__d2b+0x70>
 80081dc:	0800988b 	.word	0x0800988b
 80081e0:	080098fc 	.word	0x080098fc

080081e4 <_calloc_r>:
 80081e4:	b513      	push	{r0, r1, r4, lr}
 80081e6:	434a      	muls	r2, r1
 80081e8:	4611      	mov	r1, r2
 80081ea:	9201      	str	r2, [sp, #4]
 80081ec:	f000 f85a 	bl	80082a4 <_malloc_r>
 80081f0:	4604      	mov	r4, r0
 80081f2:	b118      	cbz	r0, 80081fc <_calloc_r+0x18>
 80081f4:	9a01      	ldr	r2, [sp, #4]
 80081f6:	2100      	movs	r1, #0
 80081f8:	f7fe f840 	bl	800627c <memset>
 80081fc:	4620      	mov	r0, r4
 80081fe:	b002      	add	sp, #8
 8008200:	bd10      	pop	{r4, pc}
	...

08008204 <_free_r>:
 8008204:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008206:	2900      	cmp	r1, #0
 8008208:	d048      	beq.n	800829c <_free_r+0x98>
 800820a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800820e:	9001      	str	r0, [sp, #4]
 8008210:	2b00      	cmp	r3, #0
 8008212:	f1a1 0404 	sub.w	r4, r1, #4
 8008216:	bfb8      	it	lt
 8008218:	18e4      	addlt	r4, r4, r3
 800821a:	f000 fe1d 	bl	8008e58 <__malloc_lock>
 800821e:	4a20      	ldr	r2, [pc, #128]	; (80082a0 <_free_r+0x9c>)
 8008220:	9801      	ldr	r0, [sp, #4]
 8008222:	6813      	ldr	r3, [r2, #0]
 8008224:	4615      	mov	r5, r2
 8008226:	b933      	cbnz	r3, 8008236 <_free_r+0x32>
 8008228:	6063      	str	r3, [r4, #4]
 800822a:	6014      	str	r4, [r2, #0]
 800822c:	b003      	add	sp, #12
 800822e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008232:	f000 be17 	b.w	8008e64 <__malloc_unlock>
 8008236:	42a3      	cmp	r3, r4
 8008238:	d90b      	bls.n	8008252 <_free_r+0x4e>
 800823a:	6821      	ldr	r1, [r4, #0]
 800823c:	1862      	adds	r2, r4, r1
 800823e:	4293      	cmp	r3, r2
 8008240:	bf04      	itt	eq
 8008242:	681a      	ldreq	r2, [r3, #0]
 8008244:	685b      	ldreq	r3, [r3, #4]
 8008246:	6063      	str	r3, [r4, #4]
 8008248:	bf04      	itt	eq
 800824a:	1852      	addeq	r2, r2, r1
 800824c:	6022      	streq	r2, [r4, #0]
 800824e:	602c      	str	r4, [r5, #0]
 8008250:	e7ec      	b.n	800822c <_free_r+0x28>
 8008252:	461a      	mov	r2, r3
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	b10b      	cbz	r3, 800825c <_free_r+0x58>
 8008258:	42a3      	cmp	r3, r4
 800825a:	d9fa      	bls.n	8008252 <_free_r+0x4e>
 800825c:	6811      	ldr	r1, [r2, #0]
 800825e:	1855      	adds	r5, r2, r1
 8008260:	42a5      	cmp	r5, r4
 8008262:	d10b      	bne.n	800827c <_free_r+0x78>
 8008264:	6824      	ldr	r4, [r4, #0]
 8008266:	4421      	add	r1, r4
 8008268:	1854      	adds	r4, r2, r1
 800826a:	42a3      	cmp	r3, r4
 800826c:	6011      	str	r1, [r2, #0]
 800826e:	d1dd      	bne.n	800822c <_free_r+0x28>
 8008270:	681c      	ldr	r4, [r3, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	6053      	str	r3, [r2, #4]
 8008276:	4421      	add	r1, r4
 8008278:	6011      	str	r1, [r2, #0]
 800827a:	e7d7      	b.n	800822c <_free_r+0x28>
 800827c:	d902      	bls.n	8008284 <_free_r+0x80>
 800827e:	230c      	movs	r3, #12
 8008280:	6003      	str	r3, [r0, #0]
 8008282:	e7d3      	b.n	800822c <_free_r+0x28>
 8008284:	6825      	ldr	r5, [r4, #0]
 8008286:	1961      	adds	r1, r4, r5
 8008288:	428b      	cmp	r3, r1
 800828a:	bf04      	itt	eq
 800828c:	6819      	ldreq	r1, [r3, #0]
 800828e:	685b      	ldreq	r3, [r3, #4]
 8008290:	6063      	str	r3, [r4, #4]
 8008292:	bf04      	itt	eq
 8008294:	1949      	addeq	r1, r1, r5
 8008296:	6021      	streq	r1, [r4, #0]
 8008298:	6054      	str	r4, [r2, #4]
 800829a:	e7c7      	b.n	800822c <_free_r+0x28>
 800829c:	b003      	add	sp, #12
 800829e:	bd30      	pop	{r4, r5, pc}
 80082a0:	2000060c 	.word	0x2000060c

080082a4 <_malloc_r>:
 80082a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a6:	1ccd      	adds	r5, r1, #3
 80082a8:	f025 0503 	bic.w	r5, r5, #3
 80082ac:	3508      	adds	r5, #8
 80082ae:	2d0c      	cmp	r5, #12
 80082b0:	bf38      	it	cc
 80082b2:	250c      	movcc	r5, #12
 80082b4:	2d00      	cmp	r5, #0
 80082b6:	4606      	mov	r6, r0
 80082b8:	db01      	blt.n	80082be <_malloc_r+0x1a>
 80082ba:	42a9      	cmp	r1, r5
 80082bc:	d903      	bls.n	80082c6 <_malloc_r+0x22>
 80082be:	230c      	movs	r3, #12
 80082c0:	6033      	str	r3, [r6, #0]
 80082c2:	2000      	movs	r0, #0
 80082c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082c6:	f000 fdc7 	bl	8008e58 <__malloc_lock>
 80082ca:	4921      	ldr	r1, [pc, #132]	; (8008350 <_malloc_r+0xac>)
 80082cc:	680a      	ldr	r2, [r1, #0]
 80082ce:	4614      	mov	r4, r2
 80082d0:	b99c      	cbnz	r4, 80082fa <_malloc_r+0x56>
 80082d2:	4f20      	ldr	r7, [pc, #128]	; (8008354 <_malloc_r+0xb0>)
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	b923      	cbnz	r3, 80082e2 <_malloc_r+0x3e>
 80082d8:	4621      	mov	r1, r4
 80082da:	4630      	mov	r0, r6
 80082dc:	f000 faf2 	bl	80088c4 <_sbrk_r>
 80082e0:	6038      	str	r0, [r7, #0]
 80082e2:	4629      	mov	r1, r5
 80082e4:	4630      	mov	r0, r6
 80082e6:	f000 faed 	bl	80088c4 <_sbrk_r>
 80082ea:	1c43      	adds	r3, r0, #1
 80082ec:	d123      	bne.n	8008336 <_malloc_r+0x92>
 80082ee:	230c      	movs	r3, #12
 80082f0:	6033      	str	r3, [r6, #0]
 80082f2:	4630      	mov	r0, r6
 80082f4:	f000 fdb6 	bl	8008e64 <__malloc_unlock>
 80082f8:	e7e3      	b.n	80082c2 <_malloc_r+0x1e>
 80082fa:	6823      	ldr	r3, [r4, #0]
 80082fc:	1b5b      	subs	r3, r3, r5
 80082fe:	d417      	bmi.n	8008330 <_malloc_r+0x8c>
 8008300:	2b0b      	cmp	r3, #11
 8008302:	d903      	bls.n	800830c <_malloc_r+0x68>
 8008304:	6023      	str	r3, [r4, #0]
 8008306:	441c      	add	r4, r3
 8008308:	6025      	str	r5, [r4, #0]
 800830a:	e004      	b.n	8008316 <_malloc_r+0x72>
 800830c:	6863      	ldr	r3, [r4, #4]
 800830e:	42a2      	cmp	r2, r4
 8008310:	bf0c      	ite	eq
 8008312:	600b      	streq	r3, [r1, #0]
 8008314:	6053      	strne	r3, [r2, #4]
 8008316:	4630      	mov	r0, r6
 8008318:	f000 fda4 	bl	8008e64 <__malloc_unlock>
 800831c:	f104 000b 	add.w	r0, r4, #11
 8008320:	1d23      	adds	r3, r4, #4
 8008322:	f020 0007 	bic.w	r0, r0, #7
 8008326:	1ac2      	subs	r2, r0, r3
 8008328:	d0cc      	beq.n	80082c4 <_malloc_r+0x20>
 800832a:	1a1b      	subs	r3, r3, r0
 800832c:	50a3      	str	r3, [r4, r2]
 800832e:	e7c9      	b.n	80082c4 <_malloc_r+0x20>
 8008330:	4622      	mov	r2, r4
 8008332:	6864      	ldr	r4, [r4, #4]
 8008334:	e7cc      	b.n	80082d0 <_malloc_r+0x2c>
 8008336:	1cc4      	adds	r4, r0, #3
 8008338:	f024 0403 	bic.w	r4, r4, #3
 800833c:	42a0      	cmp	r0, r4
 800833e:	d0e3      	beq.n	8008308 <_malloc_r+0x64>
 8008340:	1a21      	subs	r1, r4, r0
 8008342:	4630      	mov	r0, r6
 8008344:	f000 fabe 	bl	80088c4 <_sbrk_r>
 8008348:	3001      	adds	r0, #1
 800834a:	d1dd      	bne.n	8008308 <_malloc_r+0x64>
 800834c:	e7cf      	b.n	80082ee <_malloc_r+0x4a>
 800834e:	bf00      	nop
 8008350:	2000060c 	.word	0x2000060c
 8008354:	20000610 	.word	0x20000610

08008358 <__ssputs_r>:
 8008358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800835c:	688e      	ldr	r6, [r1, #8]
 800835e:	429e      	cmp	r6, r3
 8008360:	4682      	mov	sl, r0
 8008362:	460c      	mov	r4, r1
 8008364:	4690      	mov	r8, r2
 8008366:	461f      	mov	r7, r3
 8008368:	d838      	bhi.n	80083dc <__ssputs_r+0x84>
 800836a:	898a      	ldrh	r2, [r1, #12]
 800836c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008370:	d032      	beq.n	80083d8 <__ssputs_r+0x80>
 8008372:	6825      	ldr	r5, [r4, #0]
 8008374:	6909      	ldr	r1, [r1, #16]
 8008376:	eba5 0901 	sub.w	r9, r5, r1
 800837a:	6965      	ldr	r5, [r4, #20]
 800837c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008380:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008384:	3301      	adds	r3, #1
 8008386:	444b      	add	r3, r9
 8008388:	106d      	asrs	r5, r5, #1
 800838a:	429d      	cmp	r5, r3
 800838c:	bf38      	it	cc
 800838e:	461d      	movcc	r5, r3
 8008390:	0553      	lsls	r3, r2, #21
 8008392:	d531      	bpl.n	80083f8 <__ssputs_r+0xa0>
 8008394:	4629      	mov	r1, r5
 8008396:	f7ff ff85 	bl	80082a4 <_malloc_r>
 800839a:	4606      	mov	r6, r0
 800839c:	b950      	cbnz	r0, 80083b4 <__ssputs_r+0x5c>
 800839e:	230c      	movs	r3, #12
 80083a0:	f8ca 3000 	str.w	r3, [sl]
 80083a4:	89a3      	ldrh	r3, [r4, #12]
 80083a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083aa:	81a3      	strh	r3, [r4, #12]
 80083ac:	f04f 30ff 	mov.w	r0, #4294967295
 80083b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083b4:	6921      	ldr	r1, [r4, #16]
 80083b6:	464a      	mov	r2, r9
 80083b8:	f7ff fb88 	bl	8007acc <memcpy>
 80083bc:	89a3      	ldrh	r3, [r4, #12]
 80083be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083c6:	81a3      	strh	r3, [r4, #12]
 80083c8:	6126      	str	r6, [r4, #16]
 80083ca:	6165      	str	r5, [r4, #20]
 80083cc:	444e      	add	r6, r9
 80083ce:	eba5 0509 	sub.w	r5, r5, r9
 80083d2:	6026      	str	r6, [r4, #0]
 80083d4:	60a5      	str	r5, [r4, #8]
 80083d6:	463e      	mov	r6, r7
 80083d8:	42be      	cmp	r6, r7
 80083da:	d900      	bls.n	80083de <__ssputs_r+0x86>
 80083dc:	463e      	mov	r6, r7
 80083de:	4632      	mov	r2, r6
 80083e0:	6820      	ldr	r0, [r4, #0]
 80083e2:	4641      	mov	r1, r8
 80083e4:	f000 fd1e 	bl	8008e24 <memmove>
 80083e8:	68a3      	ldr	r3, [r4, #8]
 80083ea:	6822      	ldr	r2, [r4, #0]
 80083ec:	1b9b      	subs	r3, r3, r6
 80083ee:	4432      	add	r2, r6
 80083f0:	60a3      	str	r3, [r4, #8]
 80083f2:	6022      	str	r2, [r4, #0]
 80083f4:	2000      	movs	r0, #0
 80083f6:	e7db      	b.n	80083b0 <__ssputs_r+0x58>
 80083f8:	462a      	mov	r2, r5
 80083fa:	f000 fd39 	bl	8008e70 <_realloc_r>
 80083fe:	4606      	mov	r6, r0
 8008400:	2800      	cmp	r0, #0
 8008402:	d1e1      	bne.n	80083c8 <__ssputs_r+0x70>
 8008404:	6921      	ldr	r1, [r4, #16]
 8008406:	4650      	mov	r0, sl
 8008408:	f7ff fefc 	bl	8008204 <_free_r>
 800840c:	e7c7      	b.n	800839e <__ssputs_r+0x46>
	...

08008410 <_svfiprintf_r>:
 8008410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008414:	4698      	mov	r8, r3
 8008416:	898b      	ldrh	r3, [r1, #12]
 8008418:	061b      	lsls	r3, r3, #24
 800841a:	b09d      	sub	sp, #116	; 0x74
 800841c:	4607      	mov	r7, r0
 800841e:	460d      	mov	r5, r1
 8008420:	4614      	mov	r4, r2
 8008422:	d50e      	bpl.n	8008442 <_svfiprintf_r+0x32>
 8008424:	690b      	ldr	r3, [r1, #16]
 8008426:	b963      	cbnz	r3, 8008442 <_svfiprintf_r+0x32>
 8008428:	2140      	movs	r1, #64	; 0x40
 800842a:	f7ff ff3b 	bl	80082a4 <_malloc_r>
 800842e:	6028      	str	r0, [r5, #0]
 8008430:	6128      	str	r0, [r5, #16]
 8008432:	b920      	cbnz	r0, 800843e <_svfiprintf_r+0x2e>
 8008434:	230c      	movs	r3, #12
 8008436:	603b      	str	r3, [r7, #0]
 8008438:	f04f 30ff 	mov.w	r0, #4294967295
 800843c:	e0d1      	b.n	80085e2 <_svfiprintf_r+0x1d2>
 800843e:	2340      	movs	r3, #64	; 0x40
 8008440:	616b      	str	r3, [r5, #20]
 8008442:	2300      	movs	r3, #0
 8008444:	9309      	str	r3, [sp, #36]	; 0x24
 8008446:	2320      	movs	r3, #32
 8008448:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800844c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008450:	2330      	movs	r3, #48	; 0x30
 8008452:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80085fc <_svfiprintf_r+0x1ec>
 8008456:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800845a:	f04f 0901 	mov.w	r9, #1
 800845e:	4623      	mov	r3, r4
 8008460:	469a      	mov	sl, r3
 8008462:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008466:	b10a      	cbz	r2, 800846c <_svfiprintf_r+0x5c>
 8008468:	2a25      	cmp	r2, #37	; 0x25
 800846a:	d1f9      	bne.n	8008460 <_svfiprintf_r+0x50>
 800846c:	ebba 0b04 	subs.w	fp, sl, r4
 8008470:	d00b      	beq.n	800848a <_svfiprintf_r+0x7a>
 8008472:	465b      	mov	r3, fp
 8008474:	4622      	mov	r2, r4
 8008476:	4629      	mov	r1, r5
 8008478:	4638      	mov	r0, r7
 800847a:	f7ff ff6d 	bl	8008358 <__ssputs_r>
 800847e:	3001      	adds	r0, #1
 8008480:	f000 80aa 	beq.w	80085d8 <_svfiprintf_r+0x1c8>
 8008484:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008486:	445a      	add	r2, fp
 8008488:	9209      	str	r2, [sp, #36]	; 0x24
 800848a:	f89a 3000 	ldrb.w	r3, [sl]
 800848e:	2b00      	cmp	r3, #0
 8008490:	f000 80a2 	beq.w	80085d8 <_svfiprintf_r+0x1c8>
 8008494:	2300      	movs	r3, #0
 8008496:	f04f 32ff 	mov.w	r2, #4294967295
 800849a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800849e:	f10a 0a01 	add.w	sl, sl, #1
 80084a2:	9304      	str	r3, [sp, #16]
 80084a4:	9307      	str	r3, [sp, #28]
 80084a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084aa:	931a      	str	r3, [sp, #104]	; 0x68
 80084ac:	4654      	mov	r4, sl
 80084ae:	2205      	movs	r2, #5
 80084b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084b4:	4851      	ldr	r0, [pc, #324]	; (80085fc <_svfiprintf_r+0x1ec>)
 80084b6:	f7f7 fe93 	bl	80001e0 <memchr>
 80084ba:	9a04      	ldr	r2, [sp, #16]
 80084bc:	b9d8      	cbnz	r0, 80084f6 <_svfiprintf_r+0xe6>
 80084be:	06d0      	lsls	r0, r2, #27
 80084c0:	bf44      	itt	mi
 80084c2:	2320      	movmi	r3, #32
 80084c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084c8:	0711      	lsls	r1, r2, #28
 80084ca:	bf44      	itt	mi
 80084cc:	232b      	movmi	r3, #43	; 0x2b
 80084ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084d2:	f89a 3000 	ldrb.w	r3, [sl]
 80084d6:	2b2a      	cmp	r3, #42	; 0x2a
 80084d8:	d015      	beq.n	8008506 <_svfiprintf_r+0xf6>
 80084da:	9a07      	ldr	r2, [sp, #28]
 80084dc:	4654      	mov	r4, sl
 80084de:	2000      	movs	r0, #0
 80084e0:	f04f 0c0a 	mov.w	ip, #10
 80084e4:	4621      	mov	r1, r4
 80084e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084ea:	3b30      	subs	r3, #48	; 0x30
 80084ec:	2b09      	cmp	r3, #9
 80084ee:	d94e      	bls.n	800858e <_svfiprintf_r+0x17e>
 80084f0:	b1b0      	cbz	r0, 8008520 <_svfiprintf_r+0x110>
 80084f2:	9207      	str	r2, [sp, #28]
 80084f4:	e014      	b.n	8008520 <_svfiprintf_r+0x110>
 80084f6:	eba0 0308 	sub.w	r3, r0, r8
 80084fa:	fa09 f303 	lsl.w	r3, r9, r3
 80084fe:	4313      	orrs	r3, r2
 8008500:	9304      	str	r3, [sp, #16]
 8008502:	46a2      	mov	sl, r4
 8008504:	e7d2      	b.n	80084ac <_svfiprintf_r+0x9c>
 8008506:	9b03      	ldr	r3, [sp, #12]
 8008508:	1d19      	adds	r1, r3, #4
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	9103      	str	r1, [sp, #12]
 800850e:	2b00      	cmp	r3, #0
 8008510:	bfbb      	ittet	lt
 8008512:	425b      	neglt	r3, r3
 8008514:	f042 0202 	orrlt.w	r2, r2, #2
 8008518:	9307      	strge	r3, [sp, #28]
 800851a:	9307      	strlt	r3, [sp, #28]
 800851c:	bfb8      	it	lt
 800851e:	9204      	strlt	r2, [sp, #16]
 8008520:	7823      	ldrb	r3, [r4, #0]
 8008522:	2b2e      	cmp	r3, #46	; 0x2e
 8008524:	d10c      	bne.n	8008540 <_svfiprintf_r+0x130>
 8008526:	7863      	ldrb	r3, [r4, #1]
 8008528:	2b2a      	cmp	r3, #42	; 0x2a
 800852a:	d135      	bne.n	8008598 <_svfiprintf_r+0x188>
 800852c:	9b03      	ldr	r3, [sp, #12]
 800852e:	1d1a      	adds	r2, r3, #4
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	9203      	str	r2, [sp, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	bfb8      	it	lt
 8008538:	f04f 33ff 	movlt.w	r3, #4294967295
 800853c:	3402      	adds	r4, #2
 800853e:	9305      	str	r3, [sp, #20]
 8008540:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800860c <_svfiprintf_r+0x1fc>
 8008544:	7821      	ldrb	r1, [r4, #0]
 8008546:	2203      	movs	r2, #3
 8008548:	4650      	mov	r0, sl
 800854a:	f7f7 fe49 	bl	80001e0 <memchr>
 800854e:	b140      	cbz	r0, 8008562 <_svfiprintf_r+0x152>
 8008550:	2340      	movs	r3, #64	; 0x40
 8008552:	eba0 000a 	sub.w	r0, r0, sl
 8008556:	fa03 f000 	lsl.w	r0, r3, r0
 800855a:	9b04      	ldr	r3, [sp, #16]
 800855c:	4303      	orrs	r3, r0
 800855e:	3401      	adds	r4, #1
 8008560:	9304      	str	r3, [sp, #16]
 8008562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008566:	4826      	ldr	r0, [pc, #152]	; (8008600 <_svfiprintf_r+0x1f0>)
 8008568:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800856c:	2206      	movs	r2, #6
 800856e:	f7f7 fe37 	bl	80001e0 <memchr>
 8008572:	2800      	cmp	r0, #0
 8008574:	d038      	beq.n	80085e8 <_svfiprintf_r+0x1d8>
 8008576:	4b23      	ldr	r3, [pc, #140]	; (8008604 <_svfiprintf_r+0x1f4>)
 8008578:	bb1b      	cbnz	r3, 80085c2 <_svfiprintf_r+0x1b2>
 800857a:	9b03      	ldr	r3, [sp, #12]
 800857c:	3307      	adds	r3, #7
 800857e:	f023 0307 	bic.w	r3, r3, #7
 8008582:	3308      	adds	r3, #8
 8008584:	9303      	str	r3, [sp, #12]
 8008586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008588:	4433      	add	r3, r6
 800858a:	9309      	str	r3, [sp, #36]	; 0x24
 800858c:	e767      	b.n	800845e <_svfiprintf_r+0x4e>
 800858e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008592:	460c      	mov	r4, r1
 8008594:	2001      	movs	r0, #1
 8008596:	e7a5      	b.n	80084e4 <_svfiprintf_r+0xd4>
 8008598:	2300      	movs	r3, #0
 800859a:	3401      	adds	r4, #1
 800859c:	9305      	str	r3, [sp, #20]
 800859e:	4619      	mov	r1, r3
 80085a0:	f04f 0c0a 	mov.w	ip, #10
 80085a4:	4620      	mov	r0, r4
 80085a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085aa:	3a30      	subs	r2, #48	; 0x30
 80085ac:	2a09      	cmp	r2, #9
 80085ae:	d903      	bls.n	80085b8 <_svfiprintf_r+0x1a8>
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d0c5      	beq.n	8008540 <_svfiprintf_r+0x130>
 80085b4:	9105      	str	r1, [sp, #20]
 80085b6:	e7c3      	b.n	8008540 <_svfiprintf_r+0x130>
 80085b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80085bc:	4604      	mov	r4, r0
 80085be:	2301      	movs	r3, #1
 80085c0:	e7f0      	b.n	80085a4 <_svfiprintf_r+0x194>
 80085c2:	ab03      	add	r3, sp, #12
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	462a      	mov	r2, r5
 80085c8:	4b0f      	ldr	r3, [pc, #60]	; (8008608 <_svfiprintf_r+0x1f8>)
 80085ca:	a904      	add	r1, sp, #16
 80085cc:	4638      	mov	r0, r7
 80085ce:	f7fd fefd 	bl	80063cc <_printf_float>
 80085d2:	1c42      	adds	r2, r0, #1
 80085d4:	4606      	mov	r6, r0
 80085d6:	d1d6      	bne.n	8008586 <_svfiprintf_r+0x176>
 80085d8:	89ab      	ldrh	r3, [r5, #12]
 80085da:	065b      	lsls	r3, r3, #25
 80085dc:	f53f af2c 	bmi.w	8008438 <_svfiprintf_r+0x28>
 80085e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085e2:	b01d      	add	sp, #116	; 0x74
 80085e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e8:	ab03      	add	r3, sp, #12
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	462a      	mov	r2, r5
 80085ee:	4b06      	ldr	r3, [pc, #24]	; (8008608 <_svfiprintf_r+0x1f8>)
 80085f0:	a904      	add	r1, sp, #16
 80085f2:	4638      	mov	r0, r7
 80085f4:	f7fe f98e 	bl	8006914 <_printf_i>
 80085f8:	e7eb      	b.n	80085d2 <_svfiprintf_r+0x1c2>
 80085fa:	bf00      	nop
 80085fc:	08009a5c 	.word	0x08009a5c
 8008600:	08009a66 	.word	0x08009a66
 8008604:	080063cd 	.word	0x080063cd
 8008608:	08008359 	.word	0x08008359
 800860c:	08009a62 	.word	0x08009a62

08008610 <__sfputc_r>:
 8008610:	6893      	ldr	r3, [r2, #8]
 8008612:	3b01      	subs	r3, #1
 8008614:	2b00      	cmp	r3, #0
 8008616:	b410      	push	{r4}
 8008618:	6093      	str	r3, [r2, #8]
 800861a:	da08      	bge.n	800862e <__sfputc_r+0x1e>
 800861c:	6994      	ldr	r4, [r2, #24]
 800861e:	42a3      	cmp	r3, r4
 8008620:	db01      	blt.n	8008626 <__sfputc_r+0x16>
 8008622:	290a      	cmp	r1, #10
 8008624:	d103      	bne.n	800862e <__sfputc_r+0x1e>
 8008626:	f85d 4b04 	ldr.w	r4, [sp], #4
 800862a:	f000 b99f 	b.w	800896c <__swbuf_r>
 800862e:	6813      	ldr	r3, [r2, #0]
 8008630:	1c58      	adds	r0, r3, #1
 8008632:	6010      	str	r0, [r2, #0]
 8008634:	7019      	strb	r1, [r3, #0]
 8008636:	4608      	mov	r0, r1
 8008638:	f85d 4b04 	ldr.w	r4, [sp], #4
 800863c:	4770      	bx	lr

0800863e <__sfputs_r>:
 800863e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008640:	4606      	mov	r6, r0
 8008642:	460f      	mov	r7, r1
 8008644:	4614      	mov	r4, r2
 8008646:	18d5      	adds	r5, r2, r3
 8008648:	42ac      	cmp	r4, r5
 800864a:	d101      	bne.n	8008650 <__sfputs_r+0x12>
 800864c:	2000      	movs	r0, #0
 800864e:	e007      	b.n	8008660 <__sfputs_r+0x22>
 8008650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008654:	463a      	mov	r2, r7
 8008656:	4630      	mov	r0, r6
 8008658:	f7ff ffda 	bl	8008610 <__sfputc_r>
 800865c:	1c43      	adds	r3, r0, #1
 800865e:	d1f3      	bne.n	8008648 <__sfputs_r+0xa>
 8008660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008664 <_vfiprintf_r>:
 8008664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008668:	460d      	mov	r5, r1
 800866a:	b09d      	sub	sp, #116	; 0x74
 800866c:	4614      	mov	r4, r2
 800866e:	4698      	mov	r8, r3
 8008670:	4606      	mov	r6, r0
 8008672:	b118      	cbz	r0, 800867c <_vfiprintf_r+0x18>
 8008674:	6983      	ldr	r3, [r0, #24]
 8008676:	b90b      	cbnz	r3, 800867c <_vfiprintf_r+0x18>
 8008678:	f7ff f97a 	bl	8007970 <__sinit>
 800867c:	4b89      	ldr	r3, [pc, #548]	; (80088a4 <_vfiprintf_r+0x240>)
 800867e:	429d      	cmp	r5, r3
 8008680:	d11b      	bne.n	80086ba <_vfiprintf_r+0x56>
 8008682:	6875      	ldr	r5, [r6, #4]
 8008684:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008686:	07d9      	lsls	r1, r3, #31
 8008688:	d405      	bmi.n	8008696 <_vfiprintf_r+0x32>
 800868a:	89ab      	ldrh	r3, [r5, #12]
 800868c:	059a      	lsls	r2, r3, #22
 800868e:	d402      	bmi.n	8008696 <_vfiprintf_r+0x32>
 8008690:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008692:	f7ff fa10 	bl	8007ab6 <__retarget_lock_acquire_recursive>
 8008696:	89ab      	ldrh	r3, [r5, #12]
 8008698:	071b      	lsls	r3, r3, #28
 800869a:	d501      	bpl.n	80086a0 <_vfiprintf_r+0x3c>
 800869c:	692b      	ldr	r3, [r5, #16]
 800869e:	b9eb      	cbnz	r3, 80086dc <_vfiprintf_r+0x78>
 80086a0:	4629      	mov	r1, r5
 80086a2:	4630      	mov	r0, r6
 80086a4:	f000 f9c6 	bl	8008a34 <__swsetup_r>
 80086a8:	b1c0      	cbz	r0, 80086dc <_vfiprintf_r+0x78>
 80086aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086ac:	07dc      	lsls	r4, r3, #31
 80086ae:	d50e      	bpl.n	80086ce <_vfiprintf_r+0x6a>
 80086b0:	f04f 30ff 	mov.w	r0, #4294967295
 80086b4:	b01d      	add	sp, #116	; 0x74
 80086b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ba:	4b7b      	ldr	r3, [pc, #492]	; (80088a8 <_vfiprintf_r+0x244>)
 80086bc:	429d      	cmp	r5, r3
 80086be:	d101      	bne.n	80086c4 <_vfiprintf_r+0x60>
 80086c0:	68b5      	ldr	r5, [r6, #8]
 80086c2:	e7df      	b.n	8008684 <_vfiprintf_r+0x20>
 80086c4:	4b79      	ldr	r3, [pc, #484]	; (80088ac <_vfiprintf_r+0x248>)
 80086c6:	429d      	cmp	r5, r3
 80086c8:	bf08      	it	eq
 80086ca:	68f5      	ldreq	r5, [r6, #12]
 80086cc:	e7da      	b.n	8008684 <_vfiprintf_r+0x20>
 80086ce:	89ab      	ldrh	r3, [r5, #12]
 80086d0:	0598      	lsls	r0, r3, #22
 80086d2:	d4ed      	bmi.n	80086b0 <_vfiprintf_r+0x4c>
 80086d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086d6:	f7ff f9ef 	bl	8007ab8 <__retarget_lock_release_recursive>
 80086da:	e7e9      	b.n	80086b0 <_vfiprintf_r+0x4c>
 80086dc:	2300      	movs	r3, #0
 80086de:	9309      	str	r3, [sp, #36]	; 0x24
 80086e0:	2320      	movs	r3, #32
 80086e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80086ea:	2330      	movs	r3, #48	; 0x30
 80086ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80088b0 <_vfiprintf_r+0x24c>
 80086f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086f4:	f04f 0901 	mov.w	r9, #1
 80086f8:	4623      	mov	r3, r4
 80086fa:	469a      	mov	sl, r3
 80086fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008700:	b10a      	cbz	r2, 8008706 <_vfiprintf_r+0xa2>
 8008702:	2a25      	cmp	r2, #37	; 0x25
 8008704:	d1f9      	bne.n	80086fa <_vfiprintf_r+0x96>
 8008706:	ebba 0b04 	subs.w	fp, sl, r4
 800870a:	d00b      	beq.n	8008724 <_vfiprintf_r+0xc0>
 800870c:	465b      	mov	r3, fp
 800870e:	4622      	mov	r2, r4
 8008710:	4629      	mov	r1, r5
 8008712:	4630      	mov	r0, r6
 8008714:	f7ff ff93 	bl	800863e <__sfputs_r>
 8008718:	3001      	adds	r0, #1
 800871a:	f000 80aa 	beq.w	8008872 <_vfiprintf_r+0x20e>
 800871e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008720:	445a      	add	r2, fp
 8008722:	9209      	str	r2, [sp, #36]	; 0x24
 8008724:	f89a 3000 	ldrb.w	r3, [sl]
 8008728:	2b00      	cmp	r3, #0
 800872a:	f000 80a2 	beq.w	8008872 <_vfiprintf_r+0x20e>
 800872e:	2300      	movs	r3, #0
 8008730:	f04f 32ff 	mov.w	r2, #4294967295
 8008734:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008738:	f10a 0a01 	add.w	sl, sl, #1
 800873c:	9304      	str	r3, [sp, #16]
 800873e:	9307      	str	r3, [sp, #28]
 8008740:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008744:	931a      	str	r3, [sp, #104]	; 0x68
 8008746:	4654      	mov	r4, sl
 8008748:	2205      	movs	r2, #5
 800874a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800874e:	4858      	ldr	r0, [pc, #352]	; (80088b0 <_vfiprintf_r+0x24c>)
 8008750:	f7f7 fd46 	bl	80001e0 <memchr>
 8008754:	9a04      	ldr	r2, [sp, #16]
 8008756:	b9d8      	cbnz	r0, 8008790 <_vfiprintf_r+0x12c>
 8008758:	06d1      	lsls	r1, r2, #27
 800875a:	bf44      	itt	mi
 800875c:	2320      	movmi	r3, #32
 800875e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008762:	0713      	lsls	r3, r2, #28
 8008764:	bf44      	itt	mi
 8008766:	232b      	movmi	r3, #43	; 0x2b
 8008768:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800876c:	f89a 3000 	ldrb.w	r3, [sl]
 8008770:	2b2a      	cmp	r3, #42	; 0x2a
 8008772:	d015      	beq.n	80087a0 <_vfiprintf_r+0x13c>
 8008774:	9a07      	ldr	r2, [sp, #28]
 8008776:	4654      	mov	r4, sl
 8008778:	2000      	movs	r0, #0
 800877a:	f04f 0c0a 	mov.w	ip, #10
 800877e:	4621      	mov	r1, r4
 8008780:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008784:	3b30      	subs	r3, #48	; 0x30
 8008786:	2b09      	cmp	r3, #9
 8008788:	d94e      	bls.n	8008828 <_vfiprintf_r+0x1c4>
 800878a:	b1b0      	cbz	r0, 80087ba <_vfiprintf_r+0x156>
 800878c:	9207      	str	r2, [sp, #28]
 800878e:	e014      	b.n	80087ba <_vfiprintf_r+0x156>
 8008790:	eba0 0308 	sub.w	r3, r0, r8
 8008794:	fa09 f303 	lsl.w	r3, r9, r3
 8008798:	4313      	orrs	r3, r2
 800879a:	9304      	str	r3, [sp, #16]
 800879c:	46a2      	mov	sl, r4
 800879e:	e7d2      	b.n	8008746 <_vfiprintf_r+0xe2>
 80087a0:	9b03      	ldr	r3, [sp, #12]
 80087a2:	1d19      	adds	r1, r3, #4
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	9103      	str	r1, [sp, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	bfbb      	ittet	lt
 80087ac:	425b      	neglt	r3, r3
 80087ae:	f042 0202 	orrlt.w	r2, r2, #2
 80087b2:	9307      	strge	r3, [sp, #28]
 80087b4:	9307      	strlt	r3, [sp, #28]
 80087b6:	bfb8      	it	lt
 80087b8:	9204      	strlt	r2, [sp, #16]
 80087ba:	7823      	ldrb	r3, [r4, #0]
 80087bc:	2b2e      	cmp	r3, #46	; 0x2e
 80087be:	d10c      	bne.n	80087da <_vfiprintf_r+0x176>
 80087c0:	7863      	ldrb	r3, [r4, #1]
 80087c2:	2b2a      	cmp	r3, #42	; 0x2a
 80087c4:	d135      	bne.n	8008832 <_vfiprintf_r+0x1ce>
 80087c6:	9b03      	ldr	r3, [sp, #12]
 80087c8:	1d1a      	adds	r2, r3, #4
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	9203      	str	r2, [sp, #12]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	bfb8      	it	lt
 80087d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80087d6:	3402      	adds	r4, #2
 80087d8:	9305      	str	r3, [sp, #20]
 80087da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80088c0 <_vfiprintf_r+0x25c>
 80087de:	7821      	ldrb	r1, [r4, #0]
 80087e0:	2203      	movs	r2, #3
 80087e2:	4650      	mov	r0, sl
 80087e4:	f7f7 fcfc 	bl	80001e0 <memchr>
 80087e8:	b140      	cbz	r0, 80087fc <_vfiprintf_r+0x198>
 80087ea:	2340      	movs	r3, #64	; 0x40
 80087ec:	eba0 000a 	sub.w	r0, r0, sl
 80087f0:	fa03 f000 	lsl.w	r0, r3, r0
 80087f4:	9b04      	ldr	r3, [sp, #16]
 80087f6:	4303      	orrs	r3, r0
 80087f8:	3401      	adds	r4, #1
 80087fa:	9304      	str	r3, [sp, #16]
 80087fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008800:	482c      	ldr	r0, [pc, #176]	; (80088b4 <_vfiprintf_r+0x250>)
 8008802:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008806:	2206      	movs	r2, #6
 8008808:	f7f7 fcea 	bl	80001e0 <memchr>
 800880c:	2800      	cmp	r0, #0
 800880e:	d03f      	beq.n	8008890 <_vfiprintf_r+0x22c>
 8008810:	4b29      	ldr	r3, [pc, #164]	; (80088b8 <_vfiprintf_r+0x254>)
 8008812:	bb1b      	cbnz	r3, 800885c <_vfiprintf_r+0x1f8>
 8008814:	9b03      	ldr	r3, [sp, #12]
 8008816:	3307      	adds	r3, #7
 8008818:	f023 0307 	bic.w	r3, r3, #7
 800881c:	3308      	adds	r3, #8
 800881e:	9303      	str	r3, [sp, #12]
 8008820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008822:	443b      	add	r3, r7
 8008824:	9309      	str	r3, [sp, #36]	; 0x24
 8008826:	e767      	b.n	80086f8 <_vfiprintf_r+0x94>
 8008828:	fb0c 3202 	mla	r2, ip, r2, r3
 800882c:	460c      	mov	r4, r1
 800882e:	2001      	movs	r0, #1
 8008830:	e7a5      	b.n	800877e <_vfiprintf_r+0x11a>
 8008832:	2300      	movs	r3, #0
 8008834:	3401      	adds	r4, #1
 8008836:	9305      	str	r3, [sp, #20]
 8008838:	4619      	mov	r1, r3
 800883a:	f04f 0c0a 	mov.w	ip, #10
 800883e:	4620      	mov	r0, r4
 8008840:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008844:	3a30      	subs	r2, #48	; 0x30
 8008846:	2a09      	cmp	r2, #9
 8008848:	d903      	bls.n	8008852 <_vfiprintf_r+0x1ee>
 800884a:	2b00      	cmp	r3, #0
 800884c:	d0c5      	beq.n	80087da <_vfiprintf_r+0x176>
 800884e:	9105      	str	r1, [sp, #20]
 8008850:	e7c3      	b.n	80087da <_vfiprintf_r+0x176>
 8008852:	fb0c 2101 	mla	r1, ip, r1, r2
 8008856:	4604      	mov	r4, r0
 8008858:	2301      	movs	r3, #1
 800885a:	e7f0      	b.n	800883e <_vfiprintf_r+0x1da>
 800885c:	ab03      	add	r3, sp, #12
 800885e:	9300      	str	r3, [sp, #0]
 8008860:	462a      	mov	r2, r5
 8008862:	4b16      	ldr	r3, [pc, #88]	; (80088bc <_vfiprintf_r+0x258>)
 8008864:	a904      	add	r1, sp, #16
 8008866:	4630      	mov	r0, r6
 8008868:	f7fd fdb0 	bl	80063cc <_printf_float>
 800886c:	4607      	mov	r7, r0
 800886e:	1c78      	adds	r0, r7, #1
 8008870:	d1d6      	bne.n	8008820 <_vfiprintf_r+0x1bc>
 8008872:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008874:	07d9      	lsls	r1, r3, #31
 8008876:	d405      	bmi.n	8008884 <_vfiprintf_r+0x220>
 8008878:	89ab      	ldrh	r3, [r5, #12]
 800887a:	059a      	lsls	r2, r3, #22
 800887c:	d402      	bmi.n	8008884 <_vfiprintf_r+0x220>
 800887e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008880:	f7ff f91a 	bl	8007ab8 <__retarget_lock_release_recursive>
 8008884:	89ab      	ldrh	r3, [r5, #12]
 8008886:	065b      	lsls	r3, r3, #25
 8008888:	f53f af12 	bmi.w	80086b0 <_vfiprintf_r+0x4c>
 800888c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800888e:	e711      	b.n	80086b4 <_vfiprintf_r+0x50>
 8008890:	ab03      	add	r3, sp, #12
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	462a      	mov	r2, r5
 8008896:	4b09      	ldr	r3, [pc, #36]	; (80088bc <_vfiprintf_r+0x258>)
 8008898:	a904      	add	r1, sp, #16
 800889a:	4630      	mov	r0, r6
 800889c:	f7fe f83a 	bl	8006914 <_printf_i>
 80088a0:	e7e4      	b.n	800886c <_vfiprintf_r+0x208>
 80088a2:	bf00      	nop
 80088a4:	080098bc 	.word	0x080098bc
 80088a8:	080098dc 	.word	0x080098dc
 80088ac:	0800989c 	.word	0x0800989c
 80088b0:	08009a5c 	.word	0x08009a5c
 80088b4:	08009a66 	.word	0x08009a66
 80088b8:	080063cd 	.word	0x080063cd
 80088bc:	0800863f 	.word	0x0800863f
 80088c0:	08009a62 	.word	0x08009a62

080088c4 <_sbrk_r>:
 80088c4:	b538      	push	{r3, r4, r5, lr}
 80088c6:	4d06      	ldr	r5, [pc, #24]	; (80088e0 <_sbrk_r+0x1c>)
 80088c8:	2300      	movs	r3, #0
 80088ca:	4604      	mov	r4, r0
 80088cc:	4608      	mov	r0, r1
 80088ce:	602b      	str	r3, [r5, #0]
 80088d0:	f7f9 fa4e 	bl	8001d70 <_sbrk>
 80088d4:	1c43      	adds	r3, r0, #1
 80088d6:	d102      	bne.n	80088de <_sbrk_r+0x1a>
 80088d8:	682b      	ldr	r3, [r5, #0]
 80088da:	b103      	cbz	r3, 80088de <_sbrk_r+0x1a>
 80088dc:	6023      	str	r3, [r4, #0]
 80088de:	bd38      	pop	{r3, r4, r5, pc}
 80088e0:	200007ec 	.word	0x200007ec

080088e4 <__sread>:
 80088e4:	b510      	push	{r4, lr}
 80088e6:	460c      	mov	r4, r1
 80088e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ec:	f000 fae6 	bl	8008ebc <_read_r>
 80088f0:	2800      	cmp	r0, #0
 80088f2:	bfab      	itete	ge
 80088f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088f6:	89a3      	ldrhlt	r3, [r4, #12]
 80088f8:	181b      	addge	r3, r3, r0
 80088fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088fe:	bfac      	ite	ge
 8008900:	6563      	strge	r3, [r4, #84]	; 0x54
 8008902:	81a3      	strhlt	r3, [r4, #12]
 8008904:	bd10      	pop	{r4, pc}

08008906 <__swrite>:
 8008906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800890a:	461f      	mov	r7, r3
 800890c:	898b      	ldrh	r3, [r1, #12]
 800890e:	05db      	lsls	r3, r3, #23
 8008910:	4605      	mov	r5, r0
 8008912:	460c      	mov	r4, r1
 8008914:	4616      	mov	r6, r2
 8008916:	d505      	bpl.n	8008924 <__swrite+0x1e>
 8008918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800891c:	2302      	movs	r3, #2
 800891e:	2200      	movs	r2, #0
 8008920:	f000 f9f8 	bl	8008d14 <_lseek_r>
 8008924:	89a3      	ldrh	r3, [r4, #12]
 8008926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800892a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800892e:	81a3      	strh	r3, [r4, #12]
 8008930:	4632      	mov	r2, r6
 8008932:	463b      	mov	r3, r7
 8008934:	4628      	mov	r0, r5
 8008936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800893a:	f000 b869 	b.w	8008a10 <_write_r>

0800893e <__sseek>:
 800893e:	b510      	push	{r4, lr}
 8008940:	460c      	mov	r4, r1
 8008942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008946:	f000 f9e5 	bl	8008d14 <_lseek_r>
 800894a:	1c43      	adds	r3, r0, #1
 800894c:	89a3      	ldrh	r3, [r4, #12]
 800894e:	bf15      	itete	ne
 8008950:	6560      	strne	r0, [r4, #84]	; 0x54
 8008952:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008956:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800895a:	81a3      	strheq	r3, [r4, #12]
 800895c:	bf18      	it	ne
 800895e:	81a3      	strhne	r3, [r4, #12]
 8008960:	bd10      	pop	{r4, pc}

08008962 <__sclose>:
 8008962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008966:	f000 b8f1 	b.w	8008b4c <_close_r>
	...

0800896c <__swbuf_r>:
 800896c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896e:	460e      	mov	r6, r1
 8008970:	4614      	mov	r4, r2
 8008972:	4605      	mov	r5, r0
 8008974:	b118      	cbz	r0, 800897e <__swbuf_r+0x12>
 8008976:	6983      	ldr	r3, [r0, #24]
 8008978:	b90b      	cbnz	r3, 800897e <__swbuf_r+0x12>
 800897a:	f7fe fff9 	bl	8007970 <__sinit>
 800897e:	4b21      	ldr	r3, [pc, #132]	; (8008a04 <__swbuf_r+0x98>)
 8008980:	429c      	cmp	r4, r3
 8008982:	d12b      	bne.n	80089dc <__swbuf_r+0x70>
 8008984:	686c      	ldr	r4, [r5, #4]
 8008986:	69a3      	ldr	r3, [r4, #24]
 8008988:	60a3      	str	r3, [r4, #8]
 800898a:	89a3      	ldrh	r3, [r4, #12]
 800898c:	071a      	lsls	r2, r3, #28
 800898e:	d52f      	bpl.n	80089f0 <__swbuf_r+0x84>
 8008990:	6923      	ldr	r3, [r4, #16]
 8008992:	b36b      	cbz	r3, 80089f0 <__swbuf_r+0x84>
 8008994:	6923      	ldr	r3, [r4, #16]
 8008996:	6820      	ldr	r0, [r4, #0]
 8008998:	1ac0      	subs	r0, r0, r3
 800899a:	6963      	ldr	r3, [r4, #20]
 800899c:	b2f6      	uxtb	r6, r6
 800899e:	4283      	cmp	r3, r0
 80089a0:	4637      	mov	r7, r6
 80089a2:	dc04      	bgt.n	80089ae <__swbuf_r+0x42>
 80089a4:	4621      	mov	r1, r4
 80089a6:	4628      	mov	r0, r5
 80089a8:	f000 f966 	bl	8008c78 <_fflush_r>
 80089ac:	bb30      	cbnz	r0, 80089fc <__swbuf_r+0x90>
 80089ae:	68a3      	ldr	r3, [r4, #8]
 80089b0:	3b01      	subs	r3, #1
 80089b2:	60a3      	str	r3, [r4, #8]
 80089b4:	6823      	ldr	r3, [r4, #0]
 80089b6:	1c5a      	adds	r2, r3, #1
 80089b8:	6022      	str	r2, [r4, #0]
 80089ba:	701e      	strb	r6, [r3, #0]
 80089bc:	6963      	ldr	r3, [r4, #20]
 80089be:	3001      	adds	r0, #1
 80089c0:	4283      	cmp	r3, r0
 80089c2:	d004      	beq.n	80089ce <__swbuf_r+0x62>
 80089c4:	89a3      	ldrh	r3, [r4, #12]
 80089c6:	07db      	lsls	r3, r3, #31
 80089c8:	d506      	bpl.n	80089d8 <__swbuf_r+0x6c>
 80089ca:	2e0a      	cmp	r6, #10
 80089cc:	d104      	bne.n	80089d8 <__swbuf_r+0x6c>
 80089ce:	4621      	mov	r1, r4
 80089d0:	4628      	mov	r0, r5
 80089d2:	f000 f951 	bl	8008c78 <_fflush_r>
 80089d6:	b988      	cbnz	r0, 80089fc <__swbuf_r+0x90>
 80089d8:	4638      	mov	r0, r7
 80089da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089dc:	4b0a      	ldr	r3, [pc, #40]	; (8008a08 <__swbuf_r+0x9c>)
 80089de:	429c      	cmp	r4, r3
 80089e0:	d101      	bne.n	80089e6 <__swbuf_r+0x7a>
 80089e2:	68ac      	ldr	r4, [r5, #8]
 80089e4:	e7cf      	b.n	8008986 <__swbuf_r+0x1a>
 80089e6:	4b09      	ldr	r3, [pc, #36]	; (8008a0c <__swbuf_r+0xa0>)
 80089e8:	429c      	cmp	r4, r3
 80089ea:	bf08      	it	eq
 80089ec:	68ec      	ldreq	r4, [r5, #12]
 80089ee:	e7ca      	b.n	8008986 <__swbuf_r+0x1a>
 80089f0:	4621      	mov	r1, r4
 80089f2:	4628      	mov	r0, r5
 80089f4:	f000 f81e 	bl	8008a34 <__swsetup_r>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	d0cb      	beq.n	8008994 <__swbuf_r+0x28>
 80089fc:	f04f 37ff 	mov.w	r7, #4294967295
 8008a00:	e7ea      	b.n	80089d8 <__swbuf_r+0x6c>
 8008a02:	bf00      	nop
 8008a04:	080098bc 	.word	0x080098bc
 8008a08:	080098dc 	.word	0x080098dc
 8008a0c:	0800989c 	.word	0x0800989c

08008a10 <_write_r>:
 8008a10:	b538      	push	{r3, r4, r5, lr}
 8008a12:	4d07      	ldr	r5, [pc, #28]	; (8008a30 <_write_r+0x20>)
 8008a14:	4604      	mov	r4, r0
 8008a16:	4608      	mov	r0, r1
 8008a18:	4611      	mov	r1, r2
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	602a      	str	r2, [r5, #0]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	f7f9 f955 	bl	8001cce <_write>
 8008a24:	1c43      	adds	r3, r0, #1
 8008a26:	d102      	bne.n	8008a2e <_write_r+0x1e>
 8008a28:	682b      	ldr	r3, [r5, #0]
 8008a2a:	b103      	cbz	r3, 8008a2e <_write_r+0x1e>
 8008a2c:	6023      	str	r3, [r4, #0]
 8008a2e:	bd38      	pop	{r3, r4, r5, pc}
 8008a30:	200007ec 	.word	0x200007ec

08008a34 <__swsetup_r>:
 8008a34:	4b32      	ldr	r3, [pc, #200]	; (8008b00 <__swsetup_r+0xcc>)
 8008a36:	b570      	push	{r4, r5, r6, lr}
 8008a38:	681d      	ldr	r5, [r3, #0]
 8008a3a:	4606      	mov	r6, r0
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	b125      	cbz	r5, 8008a4a <__swsetup_r+0x16>
 8008a40:	69ab      	ldr	r3, [r5, #24]
 8008a42:	b913      	cbnz	r3, 8008a4a <__swsetup_r+0x16>
 8008a44:	4628      	mov	r0, r5
 8008a46:	f7fe ff93 	bl	8007970 <__sinit>
 8008a4a:	4b2e      	ldr	r3, [pc, #184]	; (8008b04 <__swsetup_r+0xd0>)
 8008a4c:	429c      	cmp	r4, r3
 8008a4e:	d10f      	bne.n	8008a70 <__swsetup_r+0x3c>
 8008a50:	686c      	ldr	r4, [r5, #4]
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a58:	0719      	lsls	r1, r3, #28
 8008a5a:	d42c      	bmi.n	8008ab6 <__swsetup_r+0x82>
 8008a5c:	06dd      	lsls	r5, r3, #27
 8008a5e:	d411      	bmi.n	8008a84 <__swsetup_r+0x50>
 8008a60:	2309      	movs	r3, #9
 8008a62:	6033      	str	r3, [r6, #0]
 8008a64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a68:	81a3      	strh	r3, [r4, #12]
 8008a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a6e:	e03e      	b.n	8008aee <__swsetup_r+0xba>
 8008a70:	4b25      	ldr	r3, [pc, #148]	; (8008b08 <__swsetup_r+0xd4>)
 8008a72:	429c      	cmp	r4, r3
 8008a74:	d101      	bne.n	8008a7a <__swsetup_r+0x46>
 8008a76:	68ac      	ldr	r4, [r5, #8]
 8008a78:	e7eb      	b.n	8008a52 <__swsetup_r+0x1e>
 8008a7a:	4b24      	ldr	r3, [pc, #144]	; (8008b0c <__swsetup_r+0xd8>)
 8008a7c:	429c      	cmp	r4, r3
 8008a7e:	bf08      	it	eq
 8008a80:	68ec      	ldreq	r4, [r5, #12]
 8008a82:	e7e6      	b.n	8008a52 <__swsetup_r+0x1e>
 8008a84:	0758      	lsls	r0, r3, #29
 8008a86:	d512      	bpl.n	8008aae <__swsetup_r+0x7a>
 8008a88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a8a:	b141      	cbz	r1, 8008a9e <__swsetup_r+0x6a>
 8008a8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a90:	4299      	cmp	r1, r3
 8008a92:	d002      	beq.n	8008a9a <__swsetup_r+0x66>
 8008a94:	4630      	mov	r0, r6
 8008a96:	f7ff fbb5 	bl	8008204 <_free_r>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	6363      	str	r3, [r4, #52]	; 0x34
 8008a9e:	89a3      	ldrh	r3, [r4, #12]
 8008aa0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008aa4:	81a3      	strh	r3, [r4, #12]
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	6063      	str	r3, [r4, #4]
 8008aaa:	6923      	ldr	r3, [r4, #16]
 8008aac:	6023      	str	r3, [r4, #0]
 8008aae:	89a3      	ldrh	r3, [r4, #12]
 8008ab0:	f043 0308 	orr.w	r3, r3, #8
 8008ab4:	81a3      	strh	r3, [r4, #12]
 8008ab6:	6923      	ldr	r3, [r4, #16]
 8008ab8:	b94b      	cbnz	r3, 8008ace <__swsetup_r+0x9a>
 8008aba:	89a3      	ldrh	r3, [r4, #12]
 8008abc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ac4:	d003      	beq.n	8008ace <__swsetup_r+0x9a>
 8008ac6:	4621      	mov	r1, r4
 8008ac8:	4630      	mov	r0, r6
 8008aca:	f000 f959 	bl	8008d80 <__smakebuf_r>
 8008ace:	89a0      	ldrh	r0, [r4, #12]
 8008ad0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ad4:	f010 0301 	ands.w	r3, r0, #1
 8008ad8:	d00a      	beq.n	8008af0 <__swsetup_r+0xbc>
 8008ada:	2300      	movs	r3, #0
 8008adc:	60a3      	str	r3, [r4, #8]
 8008ade:	6963      	ldr	r3, [r4, #20]
 8008ae0:	425b      	negs	r3, r3
 8008ae2:	61a3      	str	r3, [r4, #24]
 8008ae4:	6923      	ldr	r3, [r4, #16]
 8008ae6:	b943      	cbnz	r3, 8008afa <__swsetup_r+0xc6>
 8008ae8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008aec:	d1ba      	bne.n	8008a64 <__swsetup_r+0x30>
 8008aee:	bd70      	pop	{r4, r5, r6, pc}
 8008af0:	0781      	lsls	r1, r0, #30
 8008af2:	bf58      	it	pl
 8008af4:	6963      	ldrpl	r3, [r4, #20]
 8008af6:	60a3      	str	r3, [r4, #8]
 8008af8:	e7f4      	b.n	8008ae4 <__swsetup_r+0xb0>
 8008afa:	2000      	movs	r0, #0
 8008afc:	e7f7      	b.n	8008aee <__swsetup_r+0xba>
 8008afe:	bf00      	nop
 8008b00:	20000014 	.word	0x20000014
 8008b04:	080098bc 	.word	0x080098bc
 8008b08:	080098dc 	.word	0x080098dc
 8008b0c:	0800989c 	.word	0x0800989c

08008b10 <__assert_func>:
 8008b10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b12:	4614      	mov	r4, r2
 8008b14:	461a      	mov	r2, r3
 8008b16:	4b09      	ldr	r3, [pc, #36]	; (8008b3c <__assert_func+0x2c>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4605      	mov	r5, r0
 8008b1c:	68d8      	ldr	r0, [r3, #12]
 8008b1e:	b14c      	cbz	r4, 8008b34 <__assert_func+0x24>
 8008b20:	4b07      	ldr	r3, [pc, #28]	; (8008b40 <__assert_func+0x30>)
 8008b22:	9100      	str	r1, [sp, #0]
 8008b24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b28:	4906      	ldr	r1, [pc, #24]	; (8008b44 <__assert_func+0x34>)
 8008b2a:	462b      	mov	r3, r5
 8008b2c:	f000 f8e0 	bl	8008cf0 <fiprintf>
 8008b30:	f000 f9e3 	bl	8008efa <abort>
 8008b34:	4b04      	ldr	r3, [pc, #16]	; (8008b48 <__assert_func+0x38>)
 8008b36:	461c      	mov	r4, r3
 8008b38:	e7f3      	b.n	8008b22 <__assert_func+0x12>
 8008b3a:	bf00      	nop
 8008b3c:	20000014 	.word	0x20000014
 8008b40:	08009a6d 	.word	0x08009a6d
 8008b44:	08009a7a 	.word	0x08009a7a
 8008b48:	08009aa8 	.word	0x08009aa8

08008b4c <_close_r>:
 8008b4c:	b538      	push	{r3, r4, r5, lr}
 8008b4e:	4d06      	ldr	r5, [pc, #24]	; (8008b68 <_close_r+0x1c>)
 8008b50:	2300      	movs	r3, #0
 8008b52:	4604      	mov	r4, r0
 8008b54:	4608      	mov	r0, r1
 8008b56:	602b      	str	r3, [r5, #0]
 8008b58:	f7f9 f8d5 	bl	8001d06 <_close>
 8008b5c:	1c43      	adds	r3, r0, #1
 8008b5e:	d102      	bne.n	8008b66 <_close_r+0x1a>
 8008b60:	682b      	ldr	r3, [r5, #0]
 8008b62:	b103      	cbz	r3, 8008b66 <_close_r+0x1a>
 8008b64:	6023      	str	r3, [r4, #0]
 8008b66:	bd38      	pop	{r3, r4, r5, pc}
 8008b68:	200007ec 	.word	0x200007ec

08008b6c <__sflush_r>:
 8008b6c:	898a      	ldrh	r2, [r1, #12]
 8008b6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b72:	4605      	mov	r5, r0
 8008b74:	0710      	lsls	r0, r2, #28
 8008b76:	460c      	mov	r4, r1
 8008b78:	d458      	bmi.n	8008c2c <__sflush_r+0xc0>
 8008b7a:	684b      	ldr	r3, [r1, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	dc05      	bgt.n	8008b8c <__sflush_r+0x20>
 8008b80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	dc02      	bgt.n	8008b8c <__sflush_r+0x20>
 8008b86:	2000      	movs	r0, #0
 8008b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b8e:	2e00      	cmp	r6, #0
 8008b90:	d0f9      	beq.n	8008b86 <__sflush_r+0x1a>
 8008b92:	2300      	movs	r3, #0
 8008b94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b98:	682f      	ldr	r7, [r5, #0]
 8008b9a:	602b      	str	r3, [r5, #0]
 8008b9c:	d032      	beq.n	8008c04 <__sflush_r+0x98>
 8008b9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ba0:	89a3      	ldrh	r3, [r4, #12]
 8008ba2:	075a      	lsls	r2, r3, #29
 8008ba4:	d505      	bpl.n	8008bb2 <__sflush_r+0x46>
 8008ba6:	6863      	ldr	r3, [r4, #4]
 8008ba8:	1ac0      	subs	r0, r0, r3
 8008baa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bac:	b10b      	cbz	r3, 8008bb2 <__sflush_r+0x46>
 8008bae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bb0:	1ac0      	subs	r0, r0, r3
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bb8:	6a21      	ldr	r1, [r4, #32]
 8008bba:	4628      	mov	r0, r5
 8008bbc:	47b0      	blx	r6
 8008bbe:	1c43      	adds	r3, r0, #1
 8008bc0:	89a3      	ldrh	r3, [r4, #12]
 8008bc2:	d106      	bne.n	8008bd2 <__sflush_r+0x66>
 8008bc4:	6829      	ldr	r1, [r5, #0]
 8008bc6:	291d      	cmp	r1, #29
 8008bc8:	d82c      	bhi.n	8008c24 <__sflush_r+0xb8>
 8008bca:	4a2a      	ldr	r2, [pc, #168]	; (8008c74 <__sflush_r+0x108>)
 8008bcc:	40ca      	lsrs	r2, r1
 8008bce:	07d6      	lsls	r6, r2, #31
 8008bd0:	d528      	bpl.n	8008c24 <__sflush_r+0xb8>
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	6062      	str	r2, [r4, #4]
 8008bd6:	04d9      	lsls	r1, r3, #19
 8008bd8:	6922      	ldr	r2, [r4, #16]
 8008bda:	6022      	str	r2, [r4, #0]
 8008bdc:	d504      	bpl.n	8008be8 <__sflush_r+0x7c>
 8008bde:	1c42      	adds	r2, r0, #1
 8008be0:	d101      	bne.n	8008be6 <__sflush_r+0x7a>
 8008be2:	682b      	ldr	r3, [r5, #0]
 8008be4:	b903      	cbnz	r3, 8008be8 <__sflush_r+0x7c>
 8008be6:	6560      	str	r0, [r4, #84]	; 0x54
 8008be8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bea:	602f      	str	r7, [r5, #0]
 8008bec:	2900      	cmp	r1, #0
 8008bee:	d0ca      	beq.n	8008b86 <__sflush_r+0x1a>
 8008bf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bf4:	4299      	cmp	r1, r3
 8008bf6:	d002      	beq.n	8008bfe <__sflush_r+0x92>
 8008bf8:	4628      	mov	r0, r5
 8008bfa:	f7ff fb03 	bl	8008204 <_free_r>
 8008bfe:	2000      	movs	r0, #0
 8008c00:	6360      	str	r0, [r4, #52]	; 0x34
 8008c02:	e7c1      	b.n	8008b88 <__sflush_r+0x1c>
 8008c04:	6a21      	ldr	r1, [r4, #32]
 8008c06:	2301      	movs	r3, #1
 8008c08:	4628      	mov	r0, r5
 8008c0a:	47b0      	blx	r6
 8008c0c:	1c41      	adds	r1, r0, #1
 8008c0e:	d1c7      	bne.n	8008ba0 <__sflush_r+0x34>
 8008c10:	682b      	ldr	r3, [r5, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d0c4      	beq.n	8008ba0 <__sflush_r+0x34>
 8008c16:	2b1d      	cmp	r3, #29
 8008c18:	d001      	beq.n	8008c1e <__sflush_r+0xb2>
 8008c1a:	2b16      	cmp	r3, #22
 8008c1c:	d101      	bne.n	8008c22 <__sflush_r+0xb6>
 8008c1e:	602f      	str	r7, [r5, #0]
 8008c20:	e7b1      	b.n	8008b86 <__sflush_r+0x1a>
 8008c22:	89a3      	ldrh	r3, [r4, #12]
 8008c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c28:	81a3      	strh	r3, [r4, #12]
 8008c2a:	e7ad      	b.n	8008b88 <__sflush_r+0x1c>
 8008c2c:	690f      	ldr	r7, [r1, #16]
 8008c2e:	2f00      	cmp	r7, #0
 8008c30:	d0a9      	beq.n	8008b86 <__sflush_r+0x1a>
 8008c32:	0793      	lsls	r3, r2, #30
 8008c34:	680e      	ldr	r6, [r1, #0]
 8008c36:	bf08      	it	eq
 8008c38:	694b      	ldreq	r3, [r1, #20]
 8008c3a:	600f      	str	r7, [r1, #0]
 8008c3c:	bf18      	it	ne
 8008c3e:	2300      	movne	r3, #0
 8008c40:	eba6 0807 	sub.w	r8, r6, r7
 8008c44:	608b      	str	r3, [r1, #8]
 8008c46:	f1b8 0f00 	cmp.w	r8, #0
 8008c4a:	dd9c      	ble.n	8008b86 <__sflush_r+0x1a>
 8008c4c:	6a21      	ldr	r1, [r4, #32]
 8008c4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c50:	4643      	mov	r3, r8
 8008c52:	463a      	mov	r2, r7
 8008c54:	4628      	mov	r0, r5
 8008c56:	47b0      	blx	r6
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	dc06      	bgt.n	8008c6a <__sflush_r+0xfe>
 8008c5c:	89a3      	ldrh	r3, [r4, #12]
 8008c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c62:	81a3      	strh	r3, [r4, #12]
 8008c64:	f04f 30ff 	mov.w	r0, #4294967295
 8008c68:	e78e      	b.n	8008b88 <__sflush_r+0x1c>
 8008c6a:	4407      	add	r7, r0
 8008c6c:	eba8 0800 	sub.w	r8, r8, r0
 8008c70:	e7e9      	b.n	8008c46 <__sflush_r+0xda>
 8008c72:	bf00      	nop
 8008c74:	20400001 	.word	0x20400001

08008c78 <_fflush_r>:
 8008c78:	b538      	push	{r3, r4, r5, lr}
 8008c7a:	690b      	ldr	r3, [r1, #16]
 8008c7c:	4605      	mov	r5, r0
 8008c7e:	460c      	mov	r4, r1
 8008c80:	b913      	cbnz	r3, 8008c88 <_fflush_r+0x10>
 8008c82:	2500      	movs	r5, #0
 8008c84:	4628      	mov	r0, r5
 8008c86:	bd38      	pop	{r3, r4, r5, pc}
 8008c88:	b118      	cbz	r0, 8008c92 <_fflush_r+0x1a>
 8008c8a:	6983      	ldr	r3, [r0, #24]
 8008c8c:	b90b      	cbnz	r3, 8008c92 <_fflush_r+0x1a>
 8008c8e:	f7fe fe6f 	bl	8007970 <__sinit>
 8008c92:	4b14      	ldr	r3, [pc, #80]	; (8008ce4 <_fflush_r+0x6c>)
 8008c94:	429c      	cmp	r4, r3
 8008c96:	d11b      	bne.n	8008cd0 <_fflush_r+0x58>
 8008c98:	686c      	ldr	r4, [r5, #4]
 8008c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d0ef      	beq.n	8008c82 <_fflush_r+0xa>
 8008ca2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ca4:	07d0      	lsls	r0, r2, #31
 8008ca6:	d404      	bmi.n	8008cb2 <_fflush_r+0x3a>
 8008ca8:	0599      	lsls	r1, r3, #22
 8008caa:	d402      	bmi.n	8008cb2 <_fflush_r+0x3a>
 8008cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cae:	f7fe ff02 	bl	8007ab6 <__retarget_lock_acquire_recursive>
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	4621      	mov	r1, r4
 8008cb6:	f7ff ff59 	bl	8008b6c <__sflush_r>
 8008cba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cbc:	07da      	lsls	r2, r3, #31
 8008cbe:	4605      	mov	r5, r0
 8008cc0:	d4e0      	bmi.n	8008c84 <_fflush_r+0xc>
 8008cc2:	89a3      	ldrh	r3, [r4, #12]
 8008cc4:	059b      	lsls	r3, r3, #22
 8008cc6:	d4dd      	bmi.n	8008c84 <_fflush_r+0xc>
 8008cc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cca:	f7fe fef5 	bl	8007ab8 <__retarget_lock_release_recursive>
 8008cce:	e7d9      	b.n	8008c84 <_fflush_r+0xc>
 8008cd0:	4b05      	ldr	r3, [pc, #20]	; (8008ce8 <_fflush_r+0x70>)
 8008cd2:	429c      	cmp	r4, r3
 8008cd4:	d101      	bne.n	8008cda <_fflush_r+0x62>
 8008cd6:	68ac      	ldr	r4, [r5, #8]
 8008cd8:	e7df      	b.n	8008c9a <_fflush_r+0x22>
 8008cda:	4b04      	ldr	r3, [pc, #16]	; (8008cec <_fflush_r+0x74>)
 8008cdc:	429c      	cmp	r4, r3
 8008cde:	bf08      	it	eq
 8008ce0:	68ec      	ldreq	r4, [r5, #12]
 8008ce2:	e7da      	b.n	8008c9a <_fflush_r+0x22>
 8008ce4:	080098bc 	.word	0x080098bc
 8008ce8:	080098dc 	.word	0x080098dc
 8008cec:	0800989c 	.word	0x0800989c

08008cf0 <fiprintf>:
 8008cf0:	b40e      	push	{r1, r2, r3}
 8008cf2:	b503      	push	{r0, r1, lr}
 8008cf4:	4601      	mov	r1, r0
 8008cf6:	ab03      	add	r3, sp, #12
 8008cf8:	4805      	ldr	r0, [pc, #20]	; (8008d10 <fiprintf+0x20>)
 8008cfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cfe:	6800      	ldr	r0, [r0, #0]
 8008d00:	9301      	str	r3, [sp, #4]
 8008d02:	f7ff fcaf 	bl	8008664 <_vfiprintf_r>
 8008d06:	b002      	add	sp, #8
 8008d08:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d0c:	b003      	add	sp, #12
 8008d0e:	4770      	bx	lr
 8008d10:	20000014 	.word	0x20000014

08008d14 <_lseek_r>:
 8008d14:	b538      	push	{r3, r4, r5, lr}
 8008d16:	4d07      	ldr	r5, [pc, #28]	; (8008d34 <_lseek_r+0x20>)
 8008d18:	4604      	mov	r4, r0
 8008d1a:	4608      	mov	r0, r1
 8008d1c:	4611      	mov	r1, r2
 8008d1e:	2200      	movs	r2, #0
 8008d20:	602a      	str	r2, [r5, #0]
 8008d22:	461a      	mov	r2, r3
 8008d24:	f7f9 f816 	bl	8001d54 <_lseek>
 8008d28:	1c43      	adds	r3, r0, #1
 8008d2a:	d102      	bne.n	8008d32 <_lseek_r+0x1e>
 8008d2c:	682b      	ldr	r3, [r5, #0]
 8008d2e:	b103      	cbz	r3, 8008d32 <_lseek_r+0x1e>
 8008d30:	6023      	str	r3, [r4, #0]
 8008d32:	bd38      	pop	{r3, r4, r5, pc}
 8008d34:	200007ec 	.word	0x200007ec

08008d38 <__swhatbuf_r>:
 8008d38:	b570      	push	{r4, r5, r6, lr}
 8008d3a:	460e      	mov	r6, r1
 8008d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d40:	2900      	cmp	r1, #0
 8008d42:	b096      	sub	sp, #88	; 0x58
 8008d44:	4614      	mov	r4, r2
 8008d46:	461d      	mov	r5, r3
 8008d48:	da07      	bge.n	8008d5a <__swhatbuf_r+0x22>
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	602b      	str	r3, [r5, #0]
 8008d4e:	89b3      	ldrh	r3, [r6, #12]
 8008d50:	061a      	lsls	r2, r3, #24
 8008d52:	d410      	bmi.n	8008d76 <__swhatbuf_r+0x3e>
 8008d54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d58:	e00e      	b.n	8008d78 <__swhatbuf_r+0x40>
 8008d5a:	466a      	mov	r2, sp
 8008d5c:	f000 f8d4 	bl	8008f08 <_fstat_r>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	dbf2      	blt.n	8008d4a <__swhatbuf_r+0x12>
 8008d64:	9a01      	ldr	r2, [sp, #4]
 8008d66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d6e:	425a      	negs	r2, r3
 8008d70:	415a      	adcs	r2, r3
 8008d72:	602a      	str	r2, [r5, #0]
 8008d74:	e7ee      	b.n	8008d54 <__swhatbuf_r+0x1c>
 8008d76:	2340      	movs	r3, #64	; 0x40
 8008d78:	2000      	movs	r0, #0
 8008d7a:	6023      	str	r3, [r4, #0]
 8008d7c:	b016      	add	sp, #88	; 0x58
 8008d7e:	bd70      	pop	{r4, r5, r6, pc}

08008d80 <__smakebuf_r>:
 8008d80:	898b      	ldrh	r3, [r1, #12]
 8008d82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008d84:	079d      	lsls	r5, r3, #30
 8008d86:	4606      	mov	r6, r0
 8008d88:	460c      	mov	r4, r1
 8008d8a:	d507      	bpl.n	8008d9c <__smakebuf_r+0x1c>
 8008d8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d90:	6023      	str	r3, [r4, #0]
 8008d92:	6123      	str	r3, [r4, #16]
 8008d94:	2301      	movs	r3, #1
 8008d96:	6163      	str	r3, [r4, #20]
 8008d98:	b002      	add	sp, #8
 8008d9a:	bd70      	pop	{r4, r5, r6, pc}
 8008d9c:	ab01      	add	r3, sp, #4
 8008d9e:	466a      	mov	r2, sp
 8008da0:	f7ff ffca 	bl	8008d38 <__swhatbuf_r>
 8008da4:	9900      	ldr	r1, [sp, #0]
 8008da6:	4605      	mov	r5, r0
 8008da8:	4630      	mov	r0, r6
 8008daa:	f7ff fa7b 	bl	80082a4 <_malloc_r>
 8008dae:	b948      	cbnz	r0, 8008dc4 <__smakebuf_r+0x44>
 8008db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008db4:	059a      	lsls	r2, r3, #22
 8008db6:	d4ef      	bmi.n	8008d98 <__smakebuf_r+0x18>
 8008db8:	f023 0303 	bic.w	r3, r3, #3
 8008dbc:	f043 0302 	orr.w	r3, r3, #2
 8008dc0:	81a3      	strh	r3, [r4, #12]
 8008dc2:	e7e3      	b.n	8008d8c <__smakebuf_r+0xc>
 8008dc4:	4b0d      	ldr	r3, [pc, #52]	; (8008dfc <__smakebuf_r+0x7c>)
 8008dc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008dc8:	89a3      	ldrh	r3, [r4, #12]
 8008dca:	6020      	str	r0, [r4, #0]
 8008dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dd0:	81a3      	strh	r3, [r4, #12]
 8008dd2:	9b00      	ldr	r3, [sp, #0]
 8008dd4:	6163      	str	r3, [r4, #20]
 8008dd6:	9b01      	ldr	r3, [sp, #4]
 8008dd8:	6120      	str	r0, [r4, #16]
 8008dda:	b15b      	cbz	r3, 8008df4 <__smakebuf_r+0x74>
 8008ddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008de0:	4630      	mov	r0, r6
 8008de2:	f000 f8a3 	bl	8008f2c <_isatty_r>
 8008de6:	b128      	cbz	r0, 8008df4 <__smakebuf_r+0x74>
 8008de8:	89a3      	ldrh	r3, [r4, #12]
 8008dea:	f023 0303 	bic.w	r3, r3, #3
 8008dee:	f043 0301 	orr.w	r3, r3, #1
 8008df2:	81a3      	strh	r3, [r4, #12]
 8008df4:	89a0      	ldrh	r0, [r4, #12]
 8008df6:	4305      	orrs	r5, r0
 8008df8:	81a5      	strh	r5, [r4, #12]
 8008dfa:	e7cd      	b.n	8008d98 <__smakebuf_r+0x18>
 8008dfc:	08007909 	.word	0x08007909

08008e00 <__ascii_mbtowc>:
 8008e00:	b082      	sub	sp, #8
 8008e02:	b901      	cbnz	r1, 8008e06 <__ascii_mbtowc+0x6>
 8008e04:	a901      	add	r1, sp, #4
 8008e06:	b142      	cbz	r2, 8008e1a <__ascii_mbtowc+0x1a>
 8008e08:	b14b      	cbz	r3, 8008e1e <__ascii_mbtowc+0x1e>
 8008e0a:	7813      	ldrb	r3, [r2, #0]
 8008e0c:	600b      	str	r3, [r1, #0]
 8008e0e:	7812      	ldrb	r2, [r2, #0]
 8008e10:	1e10      	subs	r0, r2, #0
 8008e12:	bf18      	it	ne
 8008e14:	2001      	movne	r0, #1
 8008e16:	b002      	add	sp, #8
 8008e18:	4770      	bx	lr
 8008e1a:	4610      	mov	r0, r2
 8008e1c:	e7fb      	b.n	8008e16 <__ascii_mbtowc+0x16>
 8008e1e:	f06f 0001 	mvn.w	r0, #1
 8008e22:	e7f8      	b.n	8008e16 <__ascii_mbtowc+0x16>

08008e24 <memmove>:
 8008e24:	4288      	cmp	r0, r1
 8008e26:	b510      	push	{r4, lr}
 8008e28:	eb01 0402 	add.w	r4, r1, r2
 8008e2c:	d902      	bls.n	8008e34 <memmove+0x10>
 8008e2e:	4284      	cmp	r4, r0
 8008e30:	4623      	mov	r3, r4
 8008e32:	d807      	bhi.n	8008e44 <memmove+0x20>
 8008e34:	1e43      	subs	r3, r0, #1
 8008e36:	42a1      	cmp	r1, r4
 8008e38:	d008      	beq.n	8008e4c <memmove+0x28>
 8008e3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e42:	e7f8      	b.n	8008e36 <memmove+0x12>
 8008e44:	4402      	add	r2, r0
 8008e46:	4601      	mov	r1, r0
 8008e48:	428a      	cmp	r2, r1
 8008e4a:	d100      	bne.n	8008e4e <memmove+0x2a>
 8008e4c:	bd10      	pop	{r4, pc}
 8008e4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e56:	e7f7      	b.n	8008e48 <memmove+0x24>

08008e58 <__malloc_lock>:
 8008e58:	4801      	ldr	r0, [pc, #4]	; (8008e60 <__malloc_lock+0x8>)
 8008e5a:	f7fe be2c 	b.w	8007ab6 <__retarget_lock_acquire_recursive>
 8008e5e:	bf00      	nop
 8008e60:	200007e4 	.word	0x200007e4

08008e64 <__malloc_unlock>:
 8008e64:	4801      	ldr	r0, [pc, #4]	; (8008e6c <__malloc_unlock+0x8>)
 8008e66:	f7fe be27 	b.w	8007ab8 <__retarget_lock_release_recursive>
 8008e6a:	bf00      	nop
 8008e6c:	200007e4 	.word	0x200007e4

08008e70 <_realloc_r>:
 8008e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e72:	4607      	mov	r7, r0
 8008e74:	4614      	mov	r4, r2
 8008e76:	460e      	mov	r6, r1
 8008e78:	b921      	cbnz	r1, 8008e84 <_realloc_r+0x14>
 8008e7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008e7e:	4611      	mov	r1, r2
 8008e80:	f7ff ba10 	b.w	80082a4 <_malloc_r>
 8008e84:	b922      	cbnz	r2, 8008e90 <_realloc_r+0x20>
 8008e86:	f7ff f9bd 	bl	8008204 <_free_r>
 8008e8a:	4625      	mov	r5, r4
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e90:	f000 f85c 	bl	8008f4c <_malloc_usable_size_r>
 8008e94:	42a0      	cmp	r0, r4
 8008e96:	d20f      	bcs.n	8008eb8 <_realloc_r+0x48>
 8008e98:	4621      	mov	r1, r4
 8008e9a:	4638      	mov	r0, r7
 8008e9c:	f7ff fa02 	bl	80082a4 <_malloc_r>
 8008ea0:	4605      	mov	r5, r0
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	d0f2      	beq.n	8008e8c <_realloc_r+0x1c>
 8008ea6:	4631      	mov	r1, r6
 8008ea8:	4622      	mov	r2, r4
 8008eaa:	f7fe fe0f 	bl	8007acc <memcpy>
 8008eae:	4631      	mov	r1, r6
 8008eb0:	4638      	mov	r0, r7
 8008eb2:	f7ff f9a7 	bl	8008204 <_free_r>
 8008eb6:	e7e9      	b.n	8008e8c <_realloc_r+0x1c>
 8008eb8:	4635      	mov	r5, r6
 8008eba:	e7e7      	b.n	8008e8c <_realloc_r+0x1c>

08008ebc <_read_r>:
 8008ebc:	b538      	push	{r3, r4, r5, lr}
 8008ebe:	4d07      	ldr	r5, [pc, #28]	; (8008edc <_read_r+0x20>)
 8008ec0:	4604      	mov	r4, r0
 8008ec2:	4608      	mov	r0, r1
 8008ec4:	4611      	mov	r1, r2
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	602a      	str	r2, [r5, #0]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	f7f8 fee2 	bl	8001c94 <_read>
 8008ed0:	1c43      	adds	r3, r0, #1
 8008ed2:	d102      	bne.n	8008eda <_read_r+0x1e>
 8008ed4:	682b      	ldr	r3, [r5, #0]
 8008ed6:	b103      	cbz	r3, 8008eda <_read_r+0x1e>
 8008ed8:	6023      	str	r3, [r4, #0]
 8008eda:	bd38      	pop	{r3, r4, r5, pc}
 8008edc:	200007ec 	.word	0x200007ec

08008ee0 <__ascii_wctomb>:
 8008ee0:	b149      	cbz	r1, 8008ef6 <__ascii_wctomb+0x16>
 8008ee2:	2aff      	cmp	r2, #255	; 0xff
 8008ee4:	bf85      	ittet	hi
 8008ee6:	238a      	movhi	r3, #138	; 0x8a
 8008ee8:	6003      	strhi	r3, [r0, #0]
 8008eea:	700a      	strbls	r2, [r1, #0]
 8008eec:	f04f 30ff 	movhi.w	r0, #4294967295
 8008ef0:	bf98      	it	ls
 8008ef2:	2001      	movls	r0, #1
 8008ef4:	4770      	bx	lr
 8008ef6:	4608      	mov	r0, r1
 8008ef8:	4770      	bx	lr

08008efa <abort>:
 8008efa:	b508      	push	{r3, lr}
 8008efc:	2006      	movs	r0, #6
 8008efe:	f000 f855 	bl	8008fac <raise>
 8008f02:	2001      	movs	r0, #1
 8008f04:	f7f8 febc 	bl	8001c80 <_exit>

08008f08 <_fstat_r>:
 8008f08:	b538      	push	{r3, r4, r5, lr}
 8008f0a:	4d07      	ldr	r5, [pc, #28]	; (8008f28 <_fstat_r+0x20>)
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	4604      	mov	r4, r0
 8008f10:	4608      	mov	r0, r1
 8008f12:	4611      	mov	r1, r2
 8008f14:	602b      	str	r3, [r5, #0]
 8008f16:	f7f8 ff02 	bl	8001d1e <_fstat>
 8008f1a:	1c43      	adds	r3, r0, #1
 8008f1c:	d102      	bne.n	8008f24 <_fstat_r+0x1c>
 8008f1e:	682b      	ldr	r3, [r5, #0]
 8008f20:	b103      	cbz	r3, 8008f24 <_fstat_r+0x1c>
 8008f22:	6023      	str	r3, [r4, #0]
 8008f24:	bd38      	pop	{r3, r4, r5, pc}
 8008f26:	bf00      	nop
 8008f28:	200007ec 	.word	0x200007ec

08008f2c <_isatty_r>:
 8008f2c:	b538      	push	{r3, r4, r5, lr}
 8008f2e:	4d06      	ldr	r5, [pc, #24]	; (8008f48 <_isatty_r+0x1c>)
 8008f30:	2300      	movs	r3, #0
 8008f32:	4604      	mov	r4, r0
 8008f34:	4608      	mov	r0, r1
 8008f36:	602b      	str	r3, [r5, #0]
 8008f38:	f7f8 ff01 	bl	8001d3e <_isatty>
 8008f3c:	1c43      	adds	r3, r0, #1
 8008f3e:	d102      	bne.n	8008f46 <_isatty_r+0x1a>
 8008f40:	682b      	ldr	r3, [r5, #0]
 8008f42:	b103      	cbz	r3, 8008f46 <_isatty_r+0x1a>
 8008f44:	6023      	str	r3, [r4, #0]
 8008f46:	bd38      	pop	{r3, r4, r5, pc}
 8008f48:	200007ec 	.word	0x200007ec

08008f4c <_malloc_usable_size_r>:
 8008f4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f50:	1f18      	subs	r0, r3, #4
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	bfbc      	itt	lt
 8008f56:	580b      	ldrlt	r3, [r1, r0]
 8008f58:	18c0      	addlt	r0, r0, r3
 8008f5a:	4770      	bx	lr

08008f5c <_raise_r>:
 8008f5c:	291f      	cmp	r1, #31
 8008f5e:	b538      	push	{r3, r4, r5, lr}
 8008f60:	4604      	mov	r4, r0
 8008f62:	460d      	mov	r5, r1
 8008f64:	d904      	bls.n	8008f70 <_raise_r+0x14>
 8008f66:	2316      	movs	r3, #22
 8008f68:	6003      	str	r3, [r0, #0]
 8008f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f6e:	bd38      	pop	{r3, r4, r5, pc}
 8008f70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008f72:	b112      	cbz	r2, 8008f7a <_raise_r+0x1e>
 8008f74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f78:	b94b      	cbnz	r3, 8008f8e <_raise_r+0x32>
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	f000 f830 	bl	8008fe0 <_getpid_r>
 8008f80:	462a      	mov	r2, r5
 8008f82:	4601      	mov	r1, r0
 8008f84:	4620      	mov	r0, r4
 8008f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f8a:	f000 b817 	b.w	8008fbc <_kill_r>
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d00a      	beq.n	8008fa8 <_raise_r+0x4c>
 8008f92:	1c59      	adds	r1, r3, #1
 8008f94:	d103      	bne.n	8008f9e <_raise_r+0x42>
 8008f96:	2316      	movs	r3, #22
 8008f98:	6003      	str	r3, [r0, #0]
 8008f9a:	2001      	movs	r0, #1
 8008f9c:	e7e7      	b.n	8008f6e <_raise_r+0x12>
 8008f9e:	2400      	movs	r4, #0
 8008fa0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	4798      	blx	r3
 8008fa8:	2000      	movs	r0, #0
 8008faa:	e7e0      	b.n	8008f6e <_raise_r+0x12>

08008fac <raise>:
 8008fac:	4b02      	ldr	r3, [pc, #8]	; (8008fb8 <raise+0xc>)
 8008fae:	4601      	mov	r1, r0
 8008fb0:	6818      	ldr	r0, [r3, #0]
 8008fb2:	f7ff bfd3 	b.w	8008f5c <_raise_r>
 8008fb6:	bf00      	nop
 8008fb8:	20000014 	.word	0x20000014

08008fbc <_kill_r>:
 8008fbc:	b538      	push	{r3, r4, r5, lr}
 8008fbe:	4d07      	ldr	r5, [pc, #28]	; (8008fdc <_kill_r+0x20>)
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	4604      	mov	r4, r0
 8008fc4:	4608      	mov	r0, r1
 8008fc6:	4611      	mov	r1, r2
 8008fc8:	602b      	str	r3, [r5, #0]
 8008fca:	f7f8 fe49 	bl	8001c60 <_kill>
 8008fce:	1c43      	adds	r3, r0, #1
 8008fd0:	d102      	bne.n	8008fd8 <_kill_r+0x1c>
 8008fd2:	682b      	ldr	r3, [r5, #0]
 8008fd4:	b103      	cbz	r3, 8008fd8 <_kill_r+0x1c>
 8008fd6:	6023      	str	r3, [r4, #0]
 8008fd8:	bd38      	pop	{r3, r4, r5, pc}
 8008fda:	bf00      	nop
 8008fdc:	200007ec 	.word	0x200007ec

08008fe0 <_getpid_r>:
 8008fe0:	f7f8 be36 	b.w	8001c50 <_getpid>

08008fe4 <_init>:
 8008fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe6:	bf00      	nop
 8008fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fea:	bc08      	pop	{r3}
 8008fec:	469e      	mov	lr, r3
 8008fee:	4770      	bx	lr

08008ff0 <_fini>:
 8008ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff2:	bf00      	nop
 8008ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ff6:	bc08      	pop	{r3}
 8008ff8:	469e      	mov	lr, r3
 8008ffa:	4770      	bx	lr
