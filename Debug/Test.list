
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ad4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011a4  08008c68  08008c68  00018c68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e0c  08009e0c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009e0c  08009e0c  00019e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e14  08009e14  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e14  08009e14  00019e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e18  08009e18  00019e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c4  200001e4  0800a000  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a8  0800a000  000207a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000176eb  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae9  00000000  00000000  000378ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  0003a3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00023ef8  00000000  00000000  0003b818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015eed  00000000  00000000  0005f710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000ddb96  00000000  00000000  000755fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  00153193  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001310  00000000  00000000  001531e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006860  00000000  00000000  001544f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c4c 	.word	0x08008c4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08008c4c 	.word	0x08008c4c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f46:	f000 fee2 	bl	8001d0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f4a:	f000 f885 	bl	8001058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4e:	f000 fa33 	bl	80013b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f52:	f000 fa01 	bl	8001358 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f56:	f000 f971 	bl	800123c <MX_I2C1_Init>
  MX_ADC1_Init();
 8000f5a:	f000 f8ff 	bl	800115c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000f5e:	f000 f9ad 	bl	80012bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //CAN_Config();
  HAL_Delay(2000);
 8000f62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f66:	f000 ff47 	bl	8001df8 <HAL_Delay>

  /* Ecran */
  ssd1306_Init();
 8000f6a:	f000 fa91 	bl	8001490 <ssd1306_Init>
  ssd1306_Fill(Black); // White pour mettre un fond blanc
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f000 fafa 	bl	8001568 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8000f74:	f000 fb1c 	bl	80015b0 <ssd1306_UpdateScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000f78:	2120      	movs	r1, #32
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7e:	f002 fa45 	bl	800340c <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 8000f82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f86:	f000 ff37 	bl	8001df8 <HAL_Delay>
    // Traitement des données
    // Test: Set GPIO pin high
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f94:	f002 fa22 	bl	80033dc <HAL_GPIO_WritePin>

    // Get ADC value
    HAL_ADC_Start(&hadc1);
 8000f98:	482b      	ldr	r0, [pc, #172]	; (8001048 <main+0x108>)
 8000f9a:	f001 fa61 	bl	8002460 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000f9e:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa2:	4829      	ldr	r0, [pc, #164]	; (8001048 <main+0x108>)
 8000fa4:	f001 fabf 	bl	8002526 <HAL_ADC_PollForConversion>
    raw = HAL_ADC_GetValue(&hadc1);
 8000fa8:	4827      	ldr	r0, [pc, #156]	; (8001048 <main+0x108>)
 8000faa:	f001 fb4b 	bl	8002644 <HAL_ADC_GetValue>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	82fb      	strh	r3, [r7, #22]
    volt= raw;
 8000fb2:	8afb      	ldrh	r3, [r7, #22]
 8000fb4:	ee07 3a90 	vmov	s15, r3
 8000fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fbc:	edc7 7a04 	vstr	s15, [r7, #16]
    volt=volt*(3.3/4095);
 8000fc0:	6938      	ldr	r0, [r7, #16]
 8000fc2:	f7ff fac1 	bl	8000548 <__aeabi_f2d>
 8000fc6:	a31e      	add	r3, pc, #120	; (adr r3, 8001040 <main+0x100>)
 8000fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fcc:	f7ff fb14 	bl	80005f8 <__aeabi_dmul>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	4610      	mov	r0, r2
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f7ff fde6 	bl	8000ba8 <__aeabi_d2f>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	613b      	str	r3, [r7, #16]

    // Test: Set GPIO pin low
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fea:	f002 f9f7 	bl	80033dc <HAL_GPIO_WritePin>
    //HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);

    // Pretend we have to do something else for a while
    //HAL_Delay(1);
    // Affichage des données
    sprintf(msg, "Tension (V):");     // %hu = unsigned short int. Si tu utilises RxData[0] au lieu de raw, remplacer 0 par le numéro de l'octet qui contient l'information à afficher
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	4916      	ldr	r1, [pc, #88]	; (800104c <main+0x10c>)
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f005 fbfe 	bl	80067f4 <siprintf>
    ssd1306_SetCursor(0,0);                       // Placer sur la ligne de son choix
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f000 fc0e 	bl	800181c <ssd1306_SetCursor>
    ssd1306_WriteString(msg, Font_11x18, White); // Choisir la taille et la couleur de la police
 8001000:	4a13      	ldr	r2, [pc, #76]	; (8001050 <main+0x110>)
 8001002:	1d38      	adds	r0, r7, #4
 8001004:	2301      	movs	r3, #1
 8001006:	ca06      	ldmia	r2, {r1, r2}
 8001008:	f000 fbe2 	bl	80017d0 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800100c:	f000 fad0 	bl	80015b0 <ssd1306_UpdateScreen>
    sprintf(msg,"%0.3f",volt);
 8001010:	6938      	ldr	r0, [r7, #16]
 8001012:	f7ff fa99 	bl	8000548 <__aeabi_f2d>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	1d38      	adds	r0, r7, #4
 800101c:	490d      	ldr	r1, [pc, #52]	; (8001054 <main+0x114>)
 800101e:	f005 fbe9 	bl	80067f4 <siprintf>
    ssd1306_SetCursor(0,30);
 8001022:	211e      	movs	r1, #30
 8001024:	2000      	movs	r0, #0
 8001026:	f000 fbf9 	bl	800181c <ssd1306_SetCursor>
    ssd1306_WriteString(msg, Font_11x18, White);
 800102a:	4a09      	ldr	r2, [pc, #36]	; (8001050 <main+0x110>)
 800102c:	1d38      	adds	r0, r7, #4
 800102e:	2301      	movs	r3, #1
 8001030:	ca06      	ldmia	r2, {r1, r2}
 8001032:	f000 fbcd 	bl	80017d0 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001036:	f000 fabb 	bl	80015b0 <ssd1306_UpdateScreen>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800103a:	e79d      	b.n	8000f78 <main+0x38>
 800103c:	f3af 8000 	nop.w
 8001040:	e734d9b4 	.word	0xe734d9b4
 8001044:	3f4a680c 	.word	0x3f4a680c
 8001048:	20000660 	.word	0x20000660
 800104c:	08008c68 	.word	0x08008c68
 8001050:	20000000 	.word	0x20000000
 8001054:	08008c78 	.word	0x08008c78

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b0ac      	sub	sp, #176	; 0xb0
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001062:	2244      	movs	r2, #68	; 0x44
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f004 ff3a 	bl	8005ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	2254      	movs	r2, #84	; 0x54
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f004 ff2c 	bl	8005ee0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001088:	2302      	movs	r3, #2
 800108a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800108c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001090:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001092:	2310      	movs	r3, #16
 8001094:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001096:	2302      	movs	r3, #2
 8001098:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800109c:	2302      	movs	r3, #2
 800109e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010a2:	2301      	movs	r3, #1
 80010a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010a8:	230a      	movs	r3, #10
 80010aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010ae:	2307      	movs	r3, #7
 80010b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010b4:	2302      	movs	r3, #2
 80010b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010ba:	2302      	movs	r3, #2
 80010bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010c4:	4618      	mov	r0, r3
 80010c6:	f002 fe23 	bl	8003d10 <HAL_RCC_OscConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80010d0:	f000 f9bc 	bl	800144c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d4:	230f      	movs	r3, #15
 80010d6:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d8:	2303      	movs	r3, #3
 80010da:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010ec:	2104      	movs	r1, #4
 80010ee:	4618      	mov	r0, r3
 80010f0:	f003 fa2e 	bl	8004550 <HAL_RCC_ClockConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010fa:	f000 f9a7 	bl	800144c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 80010fe:	f244 0342 	movw	r3, #16450	; 0x4042
 8001102:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001104:	2300      	movs	r3, #0
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001108:	2300      	movs	r3, #0
 800110a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800110c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001110:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001112:	2302      	movs	r3, #2
 8001114:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001116:	2301      	movs	r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800111a:	2308      	movs	r3, #8
 800111c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800111e:	2307      	movs	r3, #7
 8001120:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001122:	2302      	movs	r3, #2
 8001124:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001126:	2302      	movs	r3, #2
 8001128:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800112a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800112e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4618      	mov	r0, r3
 8001134:	f003 fc12 	bl	800495c <HAL_RCCEx_PeriphCLKConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800113e:	f000 f985 	bl	800144c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001142:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001146:	f002 fd8d 	bl	8003c64 <HAL_PWREx_ControlVoltageScaling>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001150:	f000 f97c 	bl	800144c <Error_Handler>
  }
}
 8001154:	bf00      	nop
 8001156:	37b0      	adds	r7, #176	; 0xb0
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001162:	463b      	mov	r3, r7
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
 8001170:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001172:	4b2f      	ldr	r3, [pc, #188]	; (8001230 <MX_ADC1_Init+0xd4>)
 8001174:	4a2f      	ldr	r2, [pc, #188]	; (8001234 <MX_ADC1_Init+0xd8>)
 8001176:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001178:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <MX_ADC1_Init+0xd4>)
 800117a:	2200      	movs	r2, #0
 800117c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800117e:	4b2c      	ldr	r3, [pc, #176]	; (8001230 <MX_ADC1_Init+0xd4>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001184:	4b2a      	ldr	r3, [pc, #168]	; (8001230 <MX_ADC1_Init+0xd4>)
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800118a:	4b29      	ldr	r3, [pc, #164]	; (8001230 <MX_ADC1_Init+0xd4>)
 800118c:	2201      	movs	r2, #1
 800118e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <MX_ADC1_Init+0xd4>)
 8001192:	2204      	movs	r2, #4
 8001194:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001196:	4b26      	ldr	r3, [pc, #152]	; (8001230 <MX_ADC1_Init+0xd4>)
 8001198:	2200      	movs	r2, #0
 800119a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <MX_ADC1_Init+0xd4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80011a2:	4b23      	ldr	r3, [pc, #140]	; (8001230 <MX_ADC1_Init+0xd4>)
 80011a4:	2202      	movs	r2, #2
 80011a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011a8:	4b21      	ldr	r3, [pc, #132]	; (8001230 <MX_ADC1_Init+0xd4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b0:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <MX_ADC1_Init+0xd4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <MX_ADC1_Init+0xd4>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <MX_ADC1_Init+0xd4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011c4:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_ADC1_Init+0xd4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <MX_ADC1_Init+0xd4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d2:	4817      	ldr	r0, [pc, #92]	; (8001230 <MX_ADC1_Init+0xd4>)
 80011d4:	f000 fffc 	bl	80021d0 <HAL_ADC_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80011de:	f000 f935 	bl	800144c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <MX_ADC1_Init+0xdc>)
 80011e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011e6:	2306      	movs	r3, #6
 80011e8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80011ea:	2302      	movs	r3, #2
 80011ec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ee:	237f      	movs	r3, #127	; 0x7f
 80011f0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011f2:	2304      	movs	r3, #4
 80011f4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011fa:	463b      	mov	r3, r7
 80011fc:	4619      	mov	r1, r3
 80011fe:	480c      	ldr	r0, [pc, #48]	; (8001230 <MX_ADC1_Init+0xd4>)
 8001200:	f001 fa2e 	bl	8002660 <HAL_ADC_ConfigChannel>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800120a:	f000 f91f 	bl	800144c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800120e:	230c      	movs	r3, #12
 8001210:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001212:	463b      	mov	r3, r7
 8001214:	4619      	mov	r1, r3
 8001216:	4806      	ldr	r0, [pc, #24]	; (8001230 <MX_ADC1_Init+0xd4>)
 8001218:	f001 fa22 	bl	8002660 <HAL_ADC_ConfigChannel>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8001222:	f000 f913 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000660 	.word	0x20000660
 8001234:	50040000 	.word	0x50040000
 8001238:	14f00020 	.word	0x14f00020

0800123c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001242:	4a1c      	ldr	r2, [pc, #112]	; (80012b4 <MX_I2C1_Init+0x78>)
 8001244:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001246:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001248:	4a1b      	ldr	r2, [pc, #108]	; (80012b8 <MX_I2C1_Init+0x7c>)
 800124a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800124c:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <MX_I2C1_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001252:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001254:	2201      	movs	r2, #1
 8001256:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001258:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <MX_I2C1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800125e:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_I2C1_Init+0x74>)
 800126c:	2200      	movs	r2, #0
 800126e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001276:	480e      	ldr	r0, [pc, #56]	; (80012b0 <MX_I2C1_Init+0x74>)
 8001278:	f002 f8e2 	bl	8003440 <HAL_I2C_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001282:	f000 f8e3 	bl	800144c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001286:	2100      	movs	r1, #0
 8001288:	4809      	ldr	r0, [pc, #36]	; (80012b0 <MX_I2C1_Init+0x74>)
 800128a:	f002 fc45 	bl	8003b18 <HAL_I2CEx_ConfigAnalogFilter>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001294:	f000 f8da 	bl	800144c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001298:	2100      	movs	r1, #0
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_I2C1_Init+0x74>)
 800129c:	f002 fc87 	bl	8003bae <HAL_I2CEx_ConfigDigitalFilter>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012a6:	f000 f8d1 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000614 	.word	0x20000614
 80012b4:	40005400 	.word	0x40005400
 80012b8:	10909cec 	.word	0x10909cec

080012bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c2:	f107 0310 	add.w	r3, r7, #16
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012da:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <MX_TIM2_Init+0x98>)
 80012dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <MX_TIM2_Init+0x98>)
 80012e4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_TIM2_Init+0x98>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_TIM2_Init+0x98>)
 80012f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <MX_TIM2_Init+0x98>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <MX_TIM2_Init+0x98>)
 8001300:	2280      	movs	r2, #128	; 0x80
 8001302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001304:	4813      	ldr	r0, [pc, #76]	; (8001354 <MX_TIM2_Init+0x98>)
 8001306:	f003 fe0f 	bl	8004f28 <HAL_TIM_Base_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001310:	f000 f89c 	bl	800144c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001318:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	4619      	mov	r1, r3
 8001320:	480c      	ldr	r0, [pc, #48]	; (8001354 <MX_TIM2_Init+0x98>)
 8001322:	f003 ff77 	bl	8005214 <HAL_TIM_ConfigClockSource>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 800132c:	f000 f88e 	bl	800144c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	4619      	mov	r1, r3
 800133c:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_TIM2_Init+0x98>)
 800133e:	f004 f95f 	bl	8005600 <HAL_TIMEx_MasterConfigSynchronization>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001348:	f000 f880 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	3720      	adds	r7, #32
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200006c4 	.word	0x200006c4

08001358 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <MX_USART2_UART_Init+0x58>)
 800135e:	4a15      	ldr	r2, [pc, #84]	; (80013b4 <MX_USART2_UART_Init+0x5c>)
 8001360:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <MX_USART2_UART_Init+0x58>)
 8001364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001368:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800136a:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_USART2_UART_Init+0x58>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <MX_USART2_UART_Init+0x58>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <MX_USART2_UART_Init+0x58>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_USART2_UART_Init+0x58>)
 800137e:	220c      	movs	r2, #12
 8001380:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <MX_USART2_UART_Init+0x58>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_USART2_UART_Init+0x58>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <MX_USART2_UART_Init+0x58>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_USART2_UART_Init+0x58>)
 8001396:	2200      	movs	r2, #0
 8001398:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_USART2_UART_Init+0x58>)
 800139c:	f004 f9b4 	bl	8005708 <HAL_UART_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013a6:	f000 f851 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000710 	.word	0x20000710
 80013b4:	40004400 	.word	0x40004400

080013b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <MX_GPIO_Init+0x8c>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	4a1c      	ldr	r2, [pc, #112]	; (8001444 <MX_GPIO_Init+0x8c>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013da:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_GPIO_Init+0x8c>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <MX_GPIO_Init+0x8c>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	4a16      	ldr	r2, [pc, #88]	; (8001444 <MX_GPIO_Init+0x8c>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <MX_GPIO_Init+0x8c>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_GPIO_Init+0x8c>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	4a10      	ldr	r2, [pc, #64]	; (8001444 <MX_GPIO_Init+0x8c>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_GPIO_Init+0x8c>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	2108      	movs	r1, #8
 800141a:	480b      	ldr	r0, [pc, #44]	; (8001448 <MX_GPIO_Init+0x90>)
 800141c:	f001 ffde 	bl	80033dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 8001420:	2308      	movs	r3, #8
 8001422:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001424:	2301      	movs	r3, #1
 8001426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	4619      	mov	r1, r3
 8001436:	4804      	ldr	r0, [pc, #16]	; (8001448 <MX_GPIO_Init+0x90>)
 8001438:	f001 fe66 	bl	8003108 <HAL_GPIO_Init>

}
 800143c:	bf00      	nop
 800143e:	3720      	adds	r7, #32
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40021000 	.word	0x40021000
 8001448:	48000400 	.word	0x48000400

0800144c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001450:	b672      	cpsid	i
}
 8001452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
    printf("Error");
 8001454:	4801      	ldr	r0, [pc, #4]	; (800145c <Error_Handler+0x10>)
 8001456:	f005 f9b5 	bl	80067c4 <iprintf>
 800145a:	e7fb      	b.n	8001454 <Error_Handler+0x8>
 800145c:	08008c80 	.word	0x08008c80

08001460 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af04      	add	r7, sp, #16
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800146a:	230a      	movs	r3, #10
 800146c:	9302      	str	r3, [sp, #8]
 800146e:	2301      	movs	r3, #1
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	1dfb      	adds	r3, r7, #7
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2301      	movs	r3, #1
 8001478:	2200      	movs	r2, #0
 800147a:	2178      	movs	r1, #120	; 0x78
 800147c:	4803      	ldr	r0, [pc, #12]	; (800148c <ssd1306_WriteCommand+0x2c>)
 800147e:	f002 f86f 	bl	8003560 <HAL_I2C_Mem_Write>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000614 	.word	0x20000614

08001490 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{	
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	HAL_Delay(100);
 8001494:	2064      	movs	r0, #100	; 0x64
 8001496:	f000 fcaf 	bl	8001df8 <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 800149a:	20ae      	movs	r0, #174	; 0xae
 800149c:	f7ff ffe0 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 80014a0:	2020      	movs	r0, #32
 80014a2:	f7ff ffdd 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80014a6:	2010      	movs	r0, #16
 80014a8:	f7ff ffda 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80014ac:	20b0      	movs	r0, #176	; 0xb0
 80014ae:	f7ff ffd7 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80014b2:	20c8      	movs	r0, #200	; 0xc8
 80014b4:	f7ff ffd4 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 80014b8:	2000      	movs	r0, #0
 80014ba:	f7ff ffd1 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 80014be:	2010      	movs	r0, #16
 80014c0:	f7ff ffce 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 80014c4:	2040      	movs	r0, #64	; 0x40
 80014c6:	f7ff ffcb 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 80014ca:	2081      	movs	r0, #129	; 0x81
 80014cc:	f7ff ffc8 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 80014d0:	20ff      	movs	r0, #255	; 0xff
 80014d2:	f7ff ffc5 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80014d6:	20a1      	movs	r0, #161	; 0xa1
 80014d8:	f7ff ffc2 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80014dc:	20a6      	movs	r0, #166	; 0xa6
 80014de:	f7ff ffbf 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80014e2:	20a8      	movs	r0, #168	; 0xa8
 80014e4:	f7ff ffbc 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 80014e8:	203f      	movs	r0, #63	; 0x3f
 80014ea:	f7ff ffb9 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80014ee:	20a4      	movs	r0, #164	; 0xa4
 80014f0:	f7ff ffb6 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 80014f4:	20d3      	movs	r0, #211	; 0xd3
 80014f6:	f7ff ffb3 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80014fa:	2000      	movs	r0, #0
 80014fc:	f7ff ffb0 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001500:	20d5      	movs	r0, #213	; 0xd5
 8001502:	f7ff ffad 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001506:	20f0      	movs	r0, #240	; 0xf0
 8001508:	f7ff ffaa 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800150c:	20d9      	movs	r0, #217	; 0xd9
 800150e:	f7ff ffa7 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8001512:	2022      	movs	r0, #34	; 0x22
 8001514:	f7ff ffa4 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8001518:	20da      	movs	r0, #218	; 0xda
 800151a:	f7ff ffa1 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 800151e:	2012      	movs	r0, #18
 8001520:	f7ff ff9e 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8001524:	20db      	movs	r0, #219	; 0xdb
 8001526:	f7ff ff9b 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800152a:	2020      	movs	r0, #32
 800152c:	f7ff ff98 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001530:	208d      	movs	r0, #141	; 0x8d
 8001532:	f7ff ff95 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8001536:	2014      	movs	r0, #20
 8001538:	f7ff ff92 	bl	8001460 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800153c:	20af      	movs	r0, #175	; 0xaf
 800153e:	f7ff ff8f 	bl	8001460 <ssd1306_WriteCommand>
	
	// Clear screen
	ssd1306_Fill(Black);
 8001542:	2000      	movs	r0, #0
 8001544:	f000 f810 	bl	8001568 <ssd1306_Fill>
	
	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8001548:	f000 f832 	bl	80015b0 <ssd1306_UpdateScreen>
	
	// Set default values for screen object
	SSD1306.CurrentX = 0;
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <ssd1306_Init+0xd4>)
 800154e:	2200      	movs	r2, #0
 8001550:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001552:	4b04      	ldr	r3, [pc, #16]	; (8001564 <ssd1306_Init+0xd4>)
 8001554:	2200      	movs	r2, #0
 8001556:	805a      	strh	r2, [r3, #2]
	
	SSD1306.Initialized = 1;
 8001558:	4b02      	ldr	r3, [pc, #8]	; (8001564 <ssd1306_Init+0xd4>)
 800155a:	2201      	movs	r2, #1
 800155c:	715a      	strb	r2, [r3, #5]
	
	return 1;
 800155e:	2301      	movs	r3, #1
}
 8001560:	4618      	mov	r0, r3
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000600 	.word	0x20000600

08001568 <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color) 
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	e00d      	b.n	8001594 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <ssd1306_Fill+0x1a>
 800157e:	2100      	movs	r1, #0
 8001580:	e000      	b.n	8001584 <ssd1306_Fill+0x1c>
 8001582:	21ff      	movs	r1, #255	; 0xff
 8001584:	4a09      	ldr	r2, [pc, #36]	; (80015ac <ssd1306_Fill+0x44>)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4413      	add	r3, r2
 800158a:	460a      	mov	r2, r1
 800158c:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	3301      	adds	r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800159a:	d3ed      	bcc.n	8001578 <ssd1306_Fill+0x10>
	}
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000200 	.word	0x20000200

080015b0 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void) 
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 80015b6:	2300      	movs	r3, #0
 80015b8:	71fb      	strb	r3, [r7, #7]
 80015ba:	e01d      	b.n	80015f8 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	3b50      	subs	r3, #80	; 0x50
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff ff4c 	bl	8001460 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 80015c8:	2000      	movs	r0, #0
 80015ca:	f7ff ff49 	bl	8001460 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 80015ce:	2010      	movs	r0, #16
 80015d0:	f7ff ff46 	bl	8001460 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	01db      	lsls	r3, r3, #7
 80015d8:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <ssd1306_UpdateScreen+0x58>)
 80015da:	4413      	add	r3, r2
 80015dc:	2264      	movs	r2, #100	; 0x64
 80015de:	9202      	str	r2, [sp, #8]
 80015e0:	2280      	movs	r2, #128	; 0x80
 80015e2:	9201      	str	r2, [sp, #4]
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	2301      	movs	r3, #1
 80015e8:	2240      	movs	r2, #64	; 0x40
 80015ea:	2178      	movs	r1, #120	; 0x78
 80015ec:	4807      	ldr	r0, [pc, #28]	; (800160c <ssd1306_UpdateScreen+0x5c>)
 80015ee:	f001 ffb7 	bl	8003560 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	3301      	adds	r3, #1
 80015f6:	71fb      	strb	r3, [r7, #7]
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	2b07      	cmp	r3, #7
 80015fc:	d9de      	bls.n	80015bc <ssd1306_UpdateScreen+0xc>
	}
}
 80015fe:	bf00      	nop
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000200 	.word	0x20000200
 800160c:	20000614 	.word	0x20000614

08001610 <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
 800161a:	460b      	mov	r3, r1
 800161c:	71bb      	strb	r3, [r7, #6]
 800161e:	4613      	mov	r3, r2
 8001620:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) 
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	2b00      	cmp	r3, #0
 8001628:	db48      	blt.n	80016bc <ssd1306_DrawPixel+0xac>
 800162a:	79bb      	ldrb	r3, [r7, #6]
 800162c:	2b3f      	cmp	r3, #63	; 0x3f
 800162e:	d845      	bhi.n	80016bc <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}
	
	// Check if pixel should be inverted
	if (SSD1306.Inverted) 
 8001630:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <ssd1306_DrawPixel+0xb8>)
 8001632:	791b      	ldrb	r3, [r3, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d006      	beq.n	8001646 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8001638:	797b      	ldrb	r3, [r7, #5]
 800163a:	2b00      	cmp	r3, #0
 800163c:	bf0c      	ite	eq
 800163e:	2301      	moveq	r3, #1
 8001640:	2300      	movne	r3, #0
 8001642:	b2db      	uxtb	r3, r3
 8001644:	717b      	strb	r3, [r7, #5]
	}
	
	// Draw in the right color
	if (color == White)
 8001646:	797b      	ldrb	r3, [r7, #5]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d11a      	bne.n	8001682 <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800164c:	79fa      	ldrb	r2, [r7, #7]
 800164e:	79bb      	ldrb	r3, [r7, #6]
 8001650:	08db      	lsrs	r3, r3, #3
 8001652:	b2d8      	uxtb	r0, r3
 8001654:	4603      	mov	r3, r0
 8001656:	01db      	lsls	r3, r3, #7
 8001658:	4413      	add	r3, r2
 800165a:	4a1c      	ldr	r2, [pc, #112]	; (80016cc <ssd1306_DrawPixel+0xbc>)
 800165c:	5cd3      	ldrb	r3, [r2, r3]
 800165e:	b25a      	sxtb	r2, r3
 8001660:	79bb      	ldrb	r3, [r7, #6]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	2101      	movs	r1, #1
 8001668:	fa01 f303 	lsl.w	r3, r1, r3
 800166c:	b25b      	sxtb	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	b259      	sxtb	r1, r3
 8001672:	79fa      	ldrb	r2, [r7, #7]
 8001674:	4603      	mov	r3, r0
 8001676:	01db      	lsls	r3, r3, #7
 8001678:	4413      	add	r3, r2
 800167a:	b2c9      	uxtb	r1, r1
 800167c:	4a13      	ldr	r2, [pc, #76]	; (80016cc <ssd1306_DrawPixel+0xbc>)
 800167e:	54d1      	strb	r1, [r2, r3]
 8001680:	e01d      	b.n	80016be <ssd1306_DrawPixel+0xae>
	} 
	else 
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001682:	79fa      	ldrb	r2, [r7, #7]
 8001684:	79bb      	ldrb	r3, [r7, #6]
 8001686:	08db      	lsrs	r3, r3, #3
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	4603      	mov	r3, r0
 800168c:	01db      	lsls	r3, r3, #7
 800168e:	4413      	add	r3, r2
 8001690:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <ssd1306_DrawPixel+0xbc>)
 8001692:	5cd3      	ldrb	r3, [r2, r3]
 8001694:	b25a      	sxtb	r2, r3
 8001696:	79bb      	ldrb	r3, [r7, #6]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	2101      	movs	r1, #1
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	b25b      	sxtb	r3, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	4013      	ands	r3, r2
 80016aa:	b259      	sxtb	r1, r3
 80016ac:	79fa      	ldrb	r2, [r7, #7]
 80016ae:	4603      	mov	r3, r0
 80016b0:	01db      	lsls	r3, r3, #7
 80016b2:	4413      	add	r3, r2
 80016b4:	b2c9      	uxtb	r1, r1
 80016b6:	4a05      	ldr	r2, [pc, #20]	; (80016cc <ssd1306_DrawPixel+0xbc>)
 80016b8:	54d1      	strb	r1, [r2, r3]
 80016ba:	e000      	b.n	80016be <ssd1306_DrawPixel+0xae>
		return;
 80016bc:	bf00      	nop
	}
}
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	20000600 	.word	0x20000600
 80016cc:	20000200 	.word	0x20000200

080016d0 <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 80016d0:	b590      	push	{r4, r7, lr}
 80016d2:	b089      	sub	sp, #36	; 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4604      	mov	r4, r0
 80016d8:	1d38      	adds	r0, r7, #4
 80016da:	e880 0006 	stmia.w	r0, {r1, r2}
 80016de:	461a      	mov	r2, r3
 80016e0:	4623      	mov	r3, r4
 80016e2:	73fb      	strb	r3, [r7, #15]
 80016e4:	4613      	mov	r3, r2
 80016e6:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;
	
	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 80016e8:	4b38      	ldr	r3, [pc, #224]	; (80017cc <ssd1306_WriteChar+0xfc>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	793b      	ldrb	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	2b7f      	cmp	r3, #127	; 0x7f
 80016f4:	dc06      	bgt.n	8001704 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 80016f6:	4b35      	ldr	r3, [pc, #212]	; (80017cc <ssd1306_WriteChar+0xfc>)
 80016f8:	885b      	ldrh	r3, [r3, #2]
 80016fa:	461a      	mov	r2, r3
 80016fc:	797b      	ldrb	r3, [r7, #5]
 80016fe:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001700:	2b3f      	cmp	r3, #63	; 0x3f
 8001702:	dd01      	ble.n	8001708 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8001704:	2300      	movs	r3, #0
 8001706:	e05d      	b.n	80017c4 <ssd1306_WriteChar+0xf4>
	}
	
	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
 800170c:	e04c      	b.n	80017a8 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	3b20      	subs	r3, #32
 8001714:	7979      	ldrb	r1, [r7, #5]
 8001716:	fb01 f303 	mul.w	r3, r1, r3
 800171a:	4619      	mov	r1, r3
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	440b      	add	r3, r1
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	4413      	add	r3, r2
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8001728:	2300      	movs	r3, #0
 800172a:	61bb      	str	r3, [r7, #24]
 800172c:	e034      	b.n	8001798 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000) 
 800172e:	697a      	ldr	r2, [r7, #20]
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d012      	beq.n	8001764 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800173e:	4b23      	ldr	r3, [pc, #140]	; (80017cc <ssd1306_WriteChar+0xfc>)
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	4413      	add	r3, r2
 800174a:	b2d8      	uxtb	r0, r3
 800174c:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <ssd1306_WriteChar+0xfc>)
 800174e:	885b      	ldrh	r3, [r3, #2]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	4413      	add	r3, r2
 8001758:	b2db      	uxtb	r3, r3
 800175a:	7bba      	ldrb	r2, [r7, #14]
 800175c:	4619      	mov	r1, r3
 800175e:	f7ff ff57 	bl	8001610 <ssd1306_DrawPixel>
 8001762:	e016      	b.n	8001792 <ssd1306_WriteChar+0xc2>
			} 
			else 
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001764:	4b19      	ldr	r3, [pc, #100]	; (80017cc <ssd1306_WriteChar+0xfc>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	4413      	add	r3, r2
 8001770:	b2d8      	uxtb	r0, r3
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <ssd1306_WriteChar+0xfc>)
 8001774:	885b      	ldrh	r3, [r3, #2]
 8001776:	b2da      	uxtb	r2, r3
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	4413      	add	r3, r2
 800177e:	b2d9      	uxtb	r1, r3
 8001780:	7bbb      	ldrb	r3, [r7, #14]
 8001782:	2b00      	cmp	r3, #0
 8001784:	bf0c      	ite	eq
 8001786:	2301      	moveq	r3, #1
 8001788:	2300      	movne	r3, #0
 800178a:	b2db      	uxtb	r3, r3
 800178c:	461a      	mov	r2, r3
 800178e:	f7ff ff3f 	bl	8001610 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	3301      	adds	r3, #1
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	793b      	ldrb	r3, [r7, #4]
 800179a:	461a      	mov	r2, r3
 800179c:	69bb      	ldr	r3, [r7, #24]
 800179e:	4293      	cmp	r3, r2
 80017a0:	d3c5      	bcc.n	800172e <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3301      	adds	r3, #1
 80017a6:	61fb      	str	r3, [r7, #28]
 80017a8:	797b      	ldrb	r3, [r7, #5]
 80017aa:	461a      	mov	r2, r3
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d3ad      	bcc.n	800170e <ssd1306_WriteChar+0x3e>
			}
		}
	}
	
	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 80017b2:	4b06      	ldr	r3, [pc, #24]	; (80017cc <ssd1306_WriteChar+0xfc>)
 80017b4:	881a      	ldrh	r2, [r3, #0]
 80017b6:	793b      	ldrb	r3, [r7, #4]
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	b29a      	uxth	r2, r3
 80017be:	4b03      	ldr	r3, [pc, #12]	; (80017cc <ssd1306_WriteChar+0xfc>)
 80017c0:	801a      	strh	r2, [r3, #0]
	
	// Return written char for validation
	return ch;
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3724      	adds	r7, #36	; 0x24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd90      	pop	{r4, r7, pc}
 80017cc:	20000600 	.word	0x20000600

080017d0 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	1d38      	adds	r0, r7, #4
 80017da:	e880 0006 	stmia.w	r0, {r1, r2}
 80017de:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str) 
 80017e0:	e012      	b.n	8001808 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	7818      	ldrb	r0, [r3, #0]
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	1d3a      	adds	r2, r7, #4
 80017ea:	ca06      	ldmia	r2, {r1, r2}
 80017ec:	f7ff ff70 	bl	80016d0 <ssd1306_WriteChar>
 80017f0:	4603      	mov	r3, r0
 80017f2:	461a      	mov	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d002      	beq.n	8001802 <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	e008      	b.n	8001814 <ssd1306_WriteString+0x44>
		}
		
		// Next char
		str++;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	3301      	adds	r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
	while (*str) 
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1e8      	bne.n	80017e2 <ssd1306_WriteString+0x12>
	}
	
	// Everything ok
	return *str;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	781b      	ldrb	r3, [r3, #0]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y) 
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	460a      	mov	r2, r1
 8001826:	71fb      	strb	r3, [r7, #7]
 8001828:	4613      	mov	r3, r2
 800182a:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	b29a      	uxth	r2, r3
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <ssd1306_SetCursor+0x2c>)
 8001832:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001834:	79bb      	ldrb	r3, [r7, #6]
 8001836:	b29a      	uxth	r2, r3
 8001838:	4b03      	ldr	r3, [pc, #12]	; (8001848 <ssd1306_SetCursor+0x2c>)
 800183a:	805a      	strh	r2, [r3, #2]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	20000600 	.word	0x20000600

0800184c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001852:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <HAL_MspInit+0x44>)
 8001854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001856:	4a0e      	ldr	r2, [pc, #56]	; (8001890 <HAL_MspInit+0x44>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6613      	str	r3, [r2, #96]	; 0x60
 800185e:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <HAL_MspInit+0x44>)
 8001860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HAL_MspInit+0x44>)
 800186c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186e:	4a08      	ldr	r2, [pc, #32]	; (8001890 <HAL_MspInit+0x44>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001874:	6593      	str	r3, [r2, #88]	; 0x58
 8001876:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_MspInit+0x44>)
 8001878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000

08001894 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a15      	ldr	r2, [pc, #84]	; (8001908 <HAL_ADC_MspInit+0x74>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d124      	bne.n	8001900 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <HAL_ADC_MspInit+0x78>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ba:	4a14      	ldr	r2, [pc, #80]	; (800190c <HAL_ADC_MspInit+0x78>)
 80018bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c2:	4b12      	ldr	r3, [pc, #72]	; (800190c <HAL_ADC_MspInit+0x78>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <HAL_ADC_MspInit+0x78>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d2:	4a0e      	ldr	r2, [pc, #56]	; (800190c <HAL_ADC_MspInit+0x78>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_ADC_MspInit+0x78>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018e6:	2303      	movs	r3, #3
 80018e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018ea:	230b      	movs	r3, #11
 80018ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f2:	f107 0314 	add.w	r3, r7, #20
 80018f6:	4619      	mov	r1, r3
 80018f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fc:	f001 fc04 	bl	8003108 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001900:	bf00      	nop
 8001902:	3728      	adds	r7, #40	; 0x28
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	50040000 	.word	0x50040000
 800190c:	40021000 	.word	0x40021000

08001910 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a18      	ldr	r2, [pc, #96]	; (8001990 <HAL_I2C_MspInit+0x80>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d129      	bne.n	8001986 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	4b18      	ldr	r3, [pc, #96]	; (8001994 <HAL_I2C_MspInit+0x84>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	4a17      	ldr	r2, [pc, #92]	; (8001994 <HAL_I2C_MspInit+0x84>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <HAL_I2C_MspInit+0x84>)
 8001940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800194a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800194e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001950:	2312      	movs	r3, #18
 8001952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001954:	2301      	movs	r3, #1
 8001956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800195c:	2304      	movs	r3, #4
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001960:	f107 0314 	add.w	r3, r7, #20
 8001964:	4619      	mov	r1, r3
 8001966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196a:	f001 fbcd 	bl	8003108 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <HAL_I2C_MspInit+0x84>)
 8001970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001972:	4a08      	ldr	r2, [pc, #32]	; (8001994 <HAL_I2C_MspInit+0x84>)
 8001974:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001978:	6593      	str	r3, [r2, #88]	; 0x58
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_I2C_MspInit+0x84>)
 800197c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001986:	bf00      	nop
 8001988:	3728      	adds	r7, #40	; 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40005400 	.word	0x40005400
 8001994:	40021000 	.word	0x40021000

08001998 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a8:	d113      	bne.n	80019d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <HAL_TIM_Base_MspInit+0x44>)
 80019ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ae:	4a0b      	ldr	r2, [pc, #44]	; (80019dc <HAL_TIM_Base_MspInit+0x44>)
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6593      	str	r3, [r2, #88]	; 0x58
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <HAL_TIM_Base_MspInit+0x44>)
 80019b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2100      	movs	r1, #0
 80019c6:	201c      	movs	r0, #28
 80019c8:	f001 fb67 	bl	800309a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019cc:	201c      	movs	r0, #28
 80019ce:	f001 fb80 	bl	80030d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40021000 	.word	0x40021000

080019e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a17      	ldr	r2, [pc, #92]	; (8001a5c <HAL_UART_MspInit+0x7c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d128      	bne.n	8001a54 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a02:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <HAL_UART_MspInit+0x80>)
 8001a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a06:	4a16      	ldr	r2, [pc, #88]	; (8001a60 <HAL_UART_MspInit+0x80>)
 8001a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a0e:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <HAL_UART_MspInit+0x80>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <HAL_UART_MspInit+0x80>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <HAL_UART_MspInit+0x80>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <HAL_UART_MspInit+0x80>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a32:	230c      	movs	r3, #12
 8001a34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a42:	2307      	movs	r3, #7
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a50:	f001 fb5a 	bl	8003108 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a54:	bf00      	nop
 8001a56:	3728      	adds	r7, #40	; 0x28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40004400 	.word	0x40004400
 8001a60:	40021000 	.word	0x40021000

08001a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a68:	e7fe      	b.n	8001a68 <NMI_Handler+0x4>

08001a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6e:	e7fe      	b.n	8001a6e <HardFault_Handler+0x4>

08001a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <MemManage_Handler+0x4>

08001a76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <BusFault_Handler+0x4>

08001a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a80:	e7fe      	b.n	8001a80 <UsageFault_Handler+0x4>

08001a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab0:	f000 f982 	bl	8001db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <TIM2_IRQHandler+0x10>)
 8001abe:	f003 fa8a 	bl	8004fd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200006c4 	.word	0x200006c4

08001acc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
	return 1;
 8001ad0:	2301      	movs	r3, #1
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <_kill>:

int _kill(int pid, int sig)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ae6:	f004 f9d1 	bl	8005e8c <__errno>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2216      	movs	r2, #22
 8001aee:	601a      	str	r2, [r3, #0]
	return -1;
 8001af0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_exit>:

void _exit (int status)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ffe7 	bl	8001adc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b0e:	e7fe      	b.n	8001b0e <_exit+0x12>

08001b10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	e00a      	b.n	8001b38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b22:	f3af 8000 	nop.w
 8001b26:	4601      	mov	r1, r0
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	60ba      	str	r2, [r7, #8]
 8001b2e:	b2ca      	uxtb	r2, r1
 8001b30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	3301      	adds	r3, #1
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	dbf0      	blt.n	8001b22 <_read+0x12>
	}

return len;
 8001b40:	687b      	ldr	r3, [r7, #4]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b086      	sub	sp, #24
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	e009      	b.n	8001b70 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	60ba      	str	r2, [r7, #8]
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	dbf1      	blt.n	8001b5c <_write+0x12>
	}
	return len;
 8001b78:	687b      	ldr	r3, [r7, #4]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <_close>:

int _close(int file)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
	return -1;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001baa:	605a      	str	r2, [r3, #4]
	return 0;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr

08001bba <_isatty>:

int _isatty(int file)
{
 8001bba:	b480      	push	{r7}
 8001bbc:	b083      	sub	sp, #12
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
	return 1;
 8001bc2:	2301      	movs	r3, #1
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
	return 0;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3714      	adds	r7, #20
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf4:	4a14      	ldr	r2, [pc, #80]	; (8001c48 <_sbrk+0x5c>)
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <_sbrk+0x60>)
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <_sbrk+0x64>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d102      	bne.n	8001c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <_sbrk+0x64>)
 8001c0a:	4a12      	ldr	r2, [pc, #72]	; (8001c54 <_sbrk+0x68>)
 8001c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d207      	bcs.n	8001c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c1c:	f004 f936 	bl	8005e8c <__errno>
 8001c20:	4603      	mov	r3, r0
 8001c22:	220c      	movs	r2, #12
 8001c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c26:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2a:	e009      	b.n	8001c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c2c:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c32:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <_sbrk+0x64>)
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	4a05      	ldr	r2, [pc, #20]	; (8001c50 <_sbrk+0x64>)
 8001c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20010000 	.word	0x20010000
 8001c4c:	00000400 	.word	0x00000400
 8001c50:	20000608 	.word	0x20000608
 8001c54:	200007a8 	.word	0x200007a8

08001c58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <SystemInit+0x5c>)
 8001c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c62:	4a14      	ldr	r2, [pc, #80]	; (8001cb4 <SystemInit+0x5c>)
 8001c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <SystemInit+0x60>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a11      	ldr	r2, [pc, #68]	; (8001cb8 <SystemInit+0x60>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <SystemInit+0x60>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <SystemInit+0x60>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a0d      	ldr	r2, [pc, #52]	; (8001cb8 <SystemInit+0x60>)
 8001c84:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001c88:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001c8c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <SystemInit+0x60>)
 8001c90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c94:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c96:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <SystemInit+0x60>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a07      	ldr	r2, [pc, #28]	; (8001cb8 <SystemInit+0x60>)
 8001c9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ca0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001ca2:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <SystemInit+0x60>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000ed00 	.word	0xe000ed00
 8001cb8:	40021000 	.word	0x40021000

08001cbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cc0:	f7ff ffca 	bl	8001c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001cc4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001cc6:	e003      	b.n	8001cd0 <LoopCopyDataInit>

08001cc8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001cca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ccc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001cce:	3104      	adds	r1, #4

08001cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001cd0:	480a      	ldr	r0, [pc, #40]	; (8001cfc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001cd4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001cd6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001cd8:	d3f6      	bcc.n	8001cc8 <CopyDataInit>
	ldr	r2, =_sbss
 8001cda:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001cdc:	e002      	b.n	8001ce4 <LoopFillZerobss>

08001cde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001cde:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ce0:	f842 3b04 	str.w	r3, [r2], #4

08001ce4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <LoopForever+0x16>)
	cmp	r2, r3
 8001ce6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ce8:	d3f9      	bcc.n	8001cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cea:	f004 f8d5 	bl	8005e98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cee:	f7ff f927 	bl	8000f40 <main>

08001cf2 <LoopForever>:

LoopForever:
    b LoopForever
 8001cf2:	e7fe      	b.n	8001cf2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001cf4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001cf8:	08009e1c 	.word	0x08009e1c
	ldr	r0, =_sdata
 8001cfc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d00:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 8001d04:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8001d08:	200007a8 	.word	0x200007a8

08001d0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d0c:	e7fe      	b.n	8001d0c <ADC1_IRQHandler>

08001d0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d18:	2003      	movs	r0, #3
 8001d1a:	f001 f9b3 	bl	8003084 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f000 f80e 	bl	8001d40 <HAL_InitTick>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	71fb      	strb	r3, [r7, #7]
 8001d2e:	e001      	b.n	8001d34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d30:	f7ff fd8c 	bl	800184c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d34:	79fb      	ldrb	r3, [r7, #7]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d4c:	4b17      	ldr	r3, [pc, #92]	; (8001dac <HAL_InitTick+0x6c>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d023      	beq.n	8001d9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d54:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <HAL_InitTick+0x70>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b14      	ldr	r3, [pc, #80]	; (8001dac <HAL_InitTick+0x6c>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f001 f9bf 	bl	80030ee <HAL_SYSTICK_Config>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10f      	bne.n	8001d96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b0f      	cmp	r3, #15
 8001d7a:	d809      	bhi.n	8001d90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295
 8001d84:	f001 f989 	bl	800309a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d88:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <HAL_InitTick+0x74>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	e007      	b.n	8001da0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	73fb      	strb	r3, [r7, #15]
 8001d94:	e004      	b.n	8001da0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	73fb      	strb	r3, [r7, #15]
 8001d9a:	e001      	b.n	8001da0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000010 	.word	0x20000010
 8001db0:	20000008 	.word	0x20000008
 8001db4:	2000000c 	.word	0x2000000c

08001db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_IncTick+0x20>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_IncTick+0x24>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	4a04      	ldr	r2, [pc, #16]	; (8001ddc <HAL_IncTick+0x24>)
 8001dca:	6013      	str	r3, [r2, #0]
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20000010 	.word	0x20000010
 8001ddc:	20000794 	.word	0x20000794

08001de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return uwTick;
 8001de4:	4b03      	ldr	r3, [pc, #12]	; (8001df4 <HAL_GetTick+0x14>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20000794 	.word	0x20000794

08001df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e00:	f7ff ffee 	bl	8001de0 <HAL_GetTick>
 8001e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e10:	d005      	beq.n	8001e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <HAL_Delay+0x44>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e1e:	bf00      	nop
 8001e20:	f7ff ffde 	bl	8001de0 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d8f7      	bhi.n	8001e20 <HAL_Delay+0x28>
  {
  }
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000010 	.word	0x20000010

08001e40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	609a      	str	r2, [r3, #8]
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b087      	sub	sp, #28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	3360      	adds	r3, #96	; 0x60
 8001eba:	461a      	mov	r2, r3
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <LL_ADC_SetOffset+0x44>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ee0:	bf00      	nop
 8001ee2:	371c      	adds	r7, #28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	03fff000 	.word	0x03fff000

08001ef0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3360      	adds	r3, #96	; 0x60
 8001efe:	461a      	mov	r2, r3
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3360      	adds	r3, #96	; 0x60
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	431a      	orrs	r2, r3
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f46:	bf00      	nop
 8001f48:	371c      	adds	r7, #28
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b087      	sub	sp, #28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	3330      	adds	r3, #48	; 0x30
 8001f88:	461a      	mov	r2, r3
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	4413      	add	r3, r2
 8001f96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	211f      	movs	r1, #31
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	401a      	ands	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	0e9b      	lsrs	r3, r3, #26
 8001fb0:	f003 011f 	and.w	r1, r3, #31
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f003 031f 	and.w	r3, r3, #31
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fc4:	bf00      	nop
 8001fc6:	371c      	adds	r7, #28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	3314      	adds	r3, #20
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	0e5b      	lsrs	r3, r3, #25
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	4413      	add	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	0d1b      	lsrs	r3, r3, #20
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	2107      	movs	r1, #7
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	401a      	ands	r2, r3
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	0d1b      	lsrs	r3, r3, #20
 800200a:	f003 031f 	and.w	r3, r3, #31
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	fa01 f303 	lsl.w	r3, r1, r3
 8002014:	431a      	orrs	r2, r3
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800201a:	bf00      	nop
 800201c:	371c      	adds	r7, #28
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002040:	43db      	mvns	r3, r3
 8002042:	401a      	ands	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f003 0318 	and.w	r3, r3, #24
 800204a:	4908      	ldr	r1, [pc, #32]	; (800206c <LL_ADC_SetChannelSingleDiff+0x44>)
 800204c:	40d9      	lsrs	r1, r3
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	400b      	ands	r3, r1
 8002052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002056:	431a      	orrs	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	0007ffff 	.word	0x0007ffff

08002070 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002080:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6093      	str	r3, [r2, #8]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020a8:	d101      	bne.n	80020ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80020cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020f8:	d101      	bne.n	80020fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800211c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002120:	f043 0201 	orr.w	r2, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b01      	cmp	r3, #1
 8002146:	d101      	bne.n	800214c <LL_ADC_IsEnabled+0x18>
 8002148:	2301      	movs	r3, #1
 800214a:	e000      	b.n	800214e <LL_ADC_IsEnabled+0x1a>
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800216a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800216e:	f043 0204 	orr.w	r2, r3, #4
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	2b04      	cmp	r3, #4
 8002194:	d101      	bne.n	800219a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d101      	bne.n	80021c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021dc:	2300      	movs	r3, #0
 80021de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e12c      	b.n	8002444 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d109      	bne.n	800220c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff fb4b 	bl	8001894 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff ff3f 	bl	8002094 <LL_ADC_IsDeepPowerDownEnabled>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d004      	beq.n	8002226 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff25 	bl	8002070 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff ff5a 	bl	80020e4 <LL_ADC_IsInternalRegulatorEnabled>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d115      	bne.n	8002262 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff ff3e 	bl	80020bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002240:	4b82      	ldr	r3, [pc, #520]	; (800244c <HAL_ADC_Init+0x27c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	099b      	lsrs	r3, r3, #6
 8002246:	4a82      	ldr	r2, [pc, #520]	; (8002450 <HAL_ADC_Init+0x280>)
 8002248:	fba2 2303 	umull	r2, r3, r2, r3
 800224c:	099b      	lsrs	r3, r3, #6
 800224e:	3301      	adds	r3, #1
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002254:	e002      	b.n	800225c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	3b01      	subs	r3, #1
 800225a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1f9      	bne.n	8002256 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff ff3c 	bl	80020e4 <LL_ADC_IsInternalRegulatorEnabled>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10d      	bne.n	800228e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002276:	f043 0210 	orr.w	r2, r3, #16
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002282:	f043 0201 	orr.w	r2, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff ff75 	bl	8002182 <LL_ADC_REG_IsConversionOngoing>
 8002298:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f040 80c5 	bne.w	8002432 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f040 80c1 	bne.w	8002432 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80022b8:	f043 0202 	orr.w	r2, r3, #2
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff35 	bl	8002134 <LL_ADC_IsEnabled>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10b      	bne.n	80022e8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022d0:	4860      	ldr	r0, [pc, #384]	; (8002454 <HAL_ADC_Init+0x284>)
 80022d2:	f7ff ff2f 	bl	8002134 <LL_ADC_IsEnabled>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d105      	bne.n	80022e8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	4619      	mov	r1, r3
 80022e2:	485d      	ldr	r0, [pc, #372]	; (8002458 <HAL_ADC_Init+0x288>)
 80022e4:	f7ff fdac 	bl	8001e40 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	7e5b      	ldrb	r3, [r3, #25]
 80022ec:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022f2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80022f8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80022fe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002306:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d106      	bne.n	8002324 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	3b01      	subs	r3, #1
 800231c:	045b      	lsls	r3, r3, #17
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4313      	orrs	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002328:	2b00      	cmp	r3, #0
 800232a:	d009      	beq.n	8002340 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002338:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4313      	orrs	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68da      	ldr	r2, [r3, #12]
 8002346:	4b45      	ldr	r3, [pc, #276]	; (800245c <HAL_ADC_Init+0x28c>)
 8002348:	4013      	ands	r3, r2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	69b9      	ldr	r1, [r7, #24]
 8002350:	430b      	orrs	r3, r1
 8002352:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff12 	bl	8002182 <LL_ADC_REG_IsConversionOngoing>
 800235e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff1f 	bl	80021a8 <LL_ADC_INJ_IsConversionOngoing>
 800236a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d13d      	bne.n	80023ee <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d13a      	bne.n	80023ee <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800237c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002384:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002394:	f023 0302 	bic.w	r3, r3, #2
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	69b9      	ldr	r1, [r7, #24]
 800239e:	430b      	orrs	r3, r1
 80023a0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d118      	bne.n	80023de <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80023b6:	f023 0304 	bic.w	r3, r3, #4
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023c2:	4311      	orrs	r1, r2
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80023c8:	4311      	orrs	r1, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023ce:	430a      	orrs	r2, r1
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	611a      	str	r2, [r3, #16]
 80023dc:	e007      	b.n	80023ee <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0201 	bic.w	r2, r2, #1
 80023ec:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d10c      	bne.n	8002410 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fc:	f023 010f 	bic.w	r1, r3, #15
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	1e5a      	subs	r2, r3, #1
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	631a      	str	r2, [r3, #48]	; 0x30
 800240e:	e007      	b.n	8002420 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 020f 	bic.w	r2, r2, #15
 800241e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002424:	f023 0303 	bic.w	r3, r3, #3
 8002428:	f043 0201 	orr.w	r2, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	655a      	str	r2, [r3, #84]	; 0x54
 8002430:	e007      	b.n	8002442 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002436:	f043 0210 	orr.w	r2, r3, #16
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002442:	7ffb      	ldrb	r3, [r7, #31]
}
 8002444:	4618      	mov	r0, r3
 8002446:	3720      	adds	r7, #32
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000008 	.word	0x20000008
 8002450:	053e2d63 	.word	0x053e2d63
 8002454:	50040000 	.word	0x50040000
 8002458:	50040300 	.word	0x50040300
 800245c:	fff0c007 	.word	0xfff0c007

08002460 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fe88 	bl	8002182 <LL_ADC_REG_IsConversionOngoing>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d14f      	bne.n	8002518 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_ADC_Start+0x26>
 8002482:	2302      	movs	r3, #2
 8002484:	e04b      	b.n	800251e <HAL_ADC_Start+0xbe>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fcc6 	bl	8002e20 <ADC_Enable>
 8002494:	4603      	mov	r3, r0
 8002496:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d137      	bne.n	800250e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024a6:	f023 0301 	bic.w	r3, r3, #1
 80024aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024be:	d106      	bne.n	80024ce <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	f023 0206 	bic.w	r2, r3, #6
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	659a      	str	r2, [r3, #88]	; 0x58
 80024cc:	e002      	b.n	80024d4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	221c      	movs	r2, #28
 80024da:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d007      	beq.n	8002502 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fe27 	bl	800215a <LL_ADC_REG_StartConversion>
 800250c:	e006      	b.n	800251c <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002516:	e001      	b.n	800251c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002518:	2302      	movs	r3, #2
 800251a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800251c:	7bfb      	ldrb	r3, [r7, #15]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b086      	sub	sp, #24
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	2b08      	cmp	r3, #8
 8002536:	d102      	bne.n	800253e <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002538:	2308      	movs	r3, #8
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	e010      	b.n	8002560 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d007      	beq.n	800255c <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002550:	f043 0220 	orr.w	r2, r3, #32
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e06f      	b.n	800263c <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800255c:	2304      	movs	r3, #4
 800255e:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002560:	f7ff fc3e 	bl	8001de0 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002566:	e021      	b.n	80025ac <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256e:	d01d      	beq.n	80025ac <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002570:	f7ff fc36 	bl	8001de0 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d302      	bcc.n	8002586 <HAL_ADC_PollForConversion+0x60>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d112      	bne.n	80025ac <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	4013      	ands	r3, r2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10b      	bne.n	80025ac <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002598:	f043 0204 	orr.w	r2, r3, #4
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e047      	b.n	800263c <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0d6      	beq.n	8002568 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fcc1 	bl	8001f52 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d01c      	beq.n	8002610 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	7e5b      	ldrb	r3, [r3, #25]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d118      	bne.n	8002610 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d111      	bne.n	8002610 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d105      	bne.n	8002610 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002608:	f043 0201 	orr.w	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	2b08      	cmp	r3, #8
 800261c:	d104      	bne.n	8002628 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	2208      	movs	r2, #8
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	e008      	b.n	800263a <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d103      	bne.n	800263a <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	220c      	movs	r2, #12
 8002638:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b0b6      	sub	sp, #216	; 0xd8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800266a:	2300      	movs	r3, #0
 800266c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_ADC_ConfigChannel+0x22>
 800267e:	2302      	movs	r3, #2
 8002680:	e3b9      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x796>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fd77 	bl	8002182 <LL_ADC_REG_IsConversionOngoing>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	f040 839e 	bne.w	8002dd8 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b05      	cmp	r3, #5
 80026a2:	d824      	bhi.n	80026ee <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	3b02      	subs	r3, #2
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d81b      	bhi.n	80026e6 <HAL_ADC_ConfigChannel+0x86>
 80026ae:	a201      	add	r2, pc, #4	; (adr r2, 80026b4 <HAL_ADC_ConfigChannel+0x54>)
 80026b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b4:	080026c5 	.word	0x080026c5
 80026b8:	080026cd 	.word	0x080026cd
 80026bc:	080026d5 	.word	0x080026d5
 80026c0:	080026dd 	.word	0x080026dd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	220c      	movs	r2, #12
 80026c8:	605a      	str	r2, [r3, #4]
          break;
 80026ca:	e011      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	2212      	movs	r2, #18
 80026d0:	605a      	str	r2, [r3, #4]
          break;
 80026d2:	e00d      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2218      	movs	r2, #24
 80026d8:	605a      	str	r2, [r3, #4]
          break;
 80026da:	e009      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026e2:	605a      	str	r2, [r3, #4]
          break;
 80026e4:	e004      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2206      	movs	r2, #6
 80026ea:	605a      	str	r2, [r3, #4]
          break;
 80026ec:	e000      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80026ee:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	f7ff fc3b 	bl	8001f78 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff fd3b 	bl	8002182 <LL_ADC_REG_IsConversionOngoing>
 800270c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fd47 	bl	80021a8 <LL_ADC_INJ_IsConversionOngoing>
 800271a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800271e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002722:	2b00      	cmp	r3, #0
 8002724:	f040 81a6 	bne.w	8002a74 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002728:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800272c:	2b00      	cmp	r3, #0
 800272e:	f040 81a1 	bne.w	8002a74 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	6819      	ldr	r1, [r3, #0]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	461a      	mov	r2, r3
 8002740:	f7ff fc46 	bl	8001fd0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	695a      	ldr	r2, [r3, #20]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	08db      	lsrs	r3, r3, #3
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b04      	cmp	r3, #4
 8002764:	d00a      	beq.n	800277c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	6919      	ldr	r1, [r3, #16]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002776:	f7ff fb97 	bl	8001ea8 <LL_ADC_SetOffset>
 800277a:	e17b      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2100      	movs	r1, #0
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fbb4 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 8002788:	4603      	mov	r3, r0
 800278a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10a      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x148>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2100      	movs	r1, #0
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fba9 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 800279e:	4603      	mov	r3, r0
 80027a0:	0e9b      	lsrs	r3, r3, #26
 80027a2:	f003 021f 	and.w	r2, r3, #31
 80027a6:	e01e      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x186>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fb9e 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80027ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80027d6:	2320      	movs	r3, #32
 80027d8:	e004      	b.n	80027e4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80027da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d105      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x19e>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	0e9b      	lsrs	r3, r3, #26
 80027f8:	f003 031f 	and.w	r3, r3, #31
 80027fc:	e018      	b.n	8002830 <HAL_ADC_ConfigChannel+0x1d0>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002806:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800280a:	fa93 f3a3 	rbit	r3, r3
 800280e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002812:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002816:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800281a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002822:	2320      	movs	r3, #32
 8002824:	e004      	b.n	8002830 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002826:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002830:	429a      	cmp	r2, r3
 8002832:	d106      	bne.n	8002842 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2200      	movs	r2, #0
 800283a:	2100      	movs	r1, #0
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff fb6d 	bl	8001f1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2101      	movs	r1, #1
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fb51 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 800284e:	4603      	mov	r3, r0
 8002850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10a      	bne.n	800286e <HAL_ADC_ConfigChannel+0x20e>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2101      	movs	r1, #1
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fb46 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 8002864:	4603      	mov	r3, r0
 8002866:	0e9b      	lsrs	r3, r3, #26
 8002868:	f003 021f 	and.w	r2, r3, #31
 800286c:	e01e      	b.n	80028ac <HAL_ADC_ConfigChannel+0x24c>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2101      	movs	r1, #1
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fb3b 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 800287a:	4603      	mov	r3, r0
 800287c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002884:	fa93 f3a3 	rbit	r3, r3
 8002888:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800288c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002890:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002894:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800289c:	2320      	movs	r3, #32
 800289e:	e004      	b.n	80028aa <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80028a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d105      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x264>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	0e9b      	lsrs	r3, r3, #26
 80028be:	f003 031f 	and.w	r3, r3, #31
 80028c2:	e018      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x296>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028d0:	fa93 f3a3 	rbit	r3, r3
 80028d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80028d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80028e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80028e8:	2320      	movs	r3, #32
 80028ea:	e004      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80028ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028f0:	fab3 f383 	clz	r3, r3
 80028f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d106      	bne.n	8002908 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2200      	movs	r2, #0
 8002900:	2101      	movs	r1, #1
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff fb0a 	bl	8001f1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2102      	movs	r1, #2
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff faee 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 8002914:	4603      	mov	r3, r0
 8002916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10a      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x2d4>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2102      	movs	r1, #2
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff fae3 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 800292a:	4603      	mov	r3, r0
 800292c:	0e9b      	lsrs	r3, r3, #26
 800292e:	f003 021f 	and.w	r2, r3, #31
 8002932:	e01e      	b.n	8002972 <HAL_ADC_ConfigChannel+0x312>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2102      	movs	r1, #2
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fad8 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 8002940:	4603      	mov	r3, r0
 8002942:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002952:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002956:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800295a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002962:	2320      	movs	r3, #32
 8002964:	e004      	b.n	8002970 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002966:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297a:	2b00      	cmp	r3, #0
 800297c:	d105      	bne.n	800298a <HAL_ADC_ConfigChannel+0x32a>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	0e9b      	lsrs	r3, r3, #26
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	e016      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x358>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002992:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800299c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800299e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80029a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80029aa:	2320      	movs	r3, #32
 80029ac:	e004      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80029ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029b2:	fab3 f383 	clz	r3, r3
 80029b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d106      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2200      	movs	r2, #0
 80029c2:	2102      	movs	r1, #2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff faa9 	bl	8001f1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2103      	movs	r1, #3
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff fa8d 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 80029d6:	4603      	mov	r3, r0
 80029d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10a      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x396>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2103      	movs	r1, #3
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fa82 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 80029ec:	4603      	mov	r3, r0
 80029ee:	0e9b      	lsrs	r3, r3, #26
 80029f0:	f003 021f 	and.w	r2, r3, #31
 80029f4:	e017      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x3c6>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2103      	movs	r1, #3
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fa77 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 8002a02:	4603      	mov	r3, r0
 8002a04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a08:	fa93 f3a3 	rbit	r3, r3
 8002a0c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002a0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a10:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002a12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002a18:	2320      	movs	r3, #32
 8002a1a:	e003      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002a1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d105      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x3de>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	0e9b      	lsrs	r3, r3, #26
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	e011      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x402>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a46:	fa93 f3a3 	rbit	r3, r3
 8002a4a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002a56:	2320      	movs	r3, #32
 8002a58:	e003      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a5c:	fab3 f383 	clz	r3, r3
 8002a60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d106      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2103      	movs	r1, #3
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff fa54 	bl	8001f1c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff fb5b 	bl	8002134 <LL_ADC_IsEnabled>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f040 813f 	bne.w	8002d04 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6818      	ldr	r0, [r3, #0]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	6819      	ldr	r1, [r3, #0]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	461a      	mov	r2, r3
 8002a94:	f7ff fac8 	bl	8002028 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	4a8e      	ldr	r2, [pc, #568]	; (8002cd8 <HAL_ADC_ConfigChannel+0x678>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	f040 8130 	bne.w	8002d04 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10b      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x46c>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	0e9b      	lsrs	r3, r3, #26
 8002aba:	3301      	adds	r3, #1
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	2b09      	cmp	r3, #9
 8002ac2:	bf94      	ite	ls
 8002ac4:	2301      	movls	r3, #1
 8002ac6:	2300      	movhi	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	e019      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x4a0>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ad4:	fa93 f3a3 	rbit	r3, r3
 8002ad8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ada:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002adc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ade:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002ae4:	2320      	movs	r3, #32
 8002ae6:	e003      	b.n	8002af0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002ae8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002aea:	fab3 f383 	clz	r3, r3
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	3301      	adds	r3, #1
 8002af2:	f003 031f 	and.w	r3, r3, #31
 8002af6:	2b09      	cmp	r3, #9
 8002af8:	bf94      	ite	ls
 8002afa:	2301      	movls	r3, #1
 8002afc:	2300      	movhi	r3, #0
 8002afe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d079      	beq.n	8002bf8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d107      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x4c0>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	0e9b      	lsrs	r3, r3, #26
 8002b16:	3301      	adds	r3, #1
 8002b18:	069b      	lsls	r3, r3, #26
 8002b1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b1e:	e015      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x4ec>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b28:	fa93 f3a3 	rbit	r3, r3
 8002b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b30:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002b38:	2320      	movs	r3, #32
 8002b3a:	e003      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b3e:	fab3 f383 	clz	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	3301      	adds	r3, #1
 8002b46:	069b      	lsls	r3, r3, #26
 8002b48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d109      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x50c>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	0e9b      	lsrs	r3, r3, #26
 8002b5e:	3301      	adds	r3, #1
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	2101      	movs	r1, #1
 8002b66:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6a:	e017      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x53c>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b74:	fa93 f3a3 	rbit	r3, r3
 8002b78:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b7c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002b84:	2320      	movs	r3, #32
 8002b86:	e003      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b8a:	fab3 f383 	clz	r3, r3
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	3301      	adds	r3, #1
 8002b92:	f003 031f 	and.w	r3, r3, #31
 8002b96:	2101      	movs	r1, #1
 8002b98:	fa01 f303 	lsl.w	r3, r1, r3
 8002b9c:	ea42 0103 	orr.w	r1, r2, r3
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10a      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x562>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	0e9b      	lsrs	r3, r3, #26
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f003 021f 	and.w	r2, r3, #31
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	051b      	lsls	r3, r3, #20
 8002bc0:	e018      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x594>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bca:	fa93 f3a3 	rbit	r3, r3
 8002bce:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002bda:	2320      	movs	r3, #32
 8002bdc:	e003      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be0:	fab3 f383 	clz	r3, r3
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	3301      	adds	r3, #1
 8002be8:	f003 021f 	and.w	r2, r3, #31
 8002bec:	4613      	mov	r3, r2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	4413      	add	r3, r2
 8002bf2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bf4:	430b      	orrs	r3, r1
 8002bf6:	e080      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d107      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x5b4>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	0e9b      	lsrs	r3, r3, #26
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	069b      	lsls	r3, r3, #26
 8002c0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c12:	e015      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x5e0>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c24:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002c2c:	2320      	movs	r3, #32
 8002c2e:	e003      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	3301      	adds	r3, #1
 8002c3a:	069b      	lsls	r3, r3, #26
 8002c3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d109      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x600>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	0e9b      	lsrs	r3, r3, #26
 8002c52:	3301      	adds	r3, #1
 8002c54:	f003 031f 	and.w	r3, r3, #31
 8002c58:	2101      	movs	r1, #1
 8002c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5e:	e017      	b.n	8002c90 <HAL_ADC_ConfigChannel+0x630>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	fa93 f3a3 	rbit	r3, r3
 8002c6c:	61fb      	str	r3, [r7, #28]
  return result;
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002c78:	2320      	movs	r3, #32
 8002c7a:	e003      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	fab3 f383 	clz	r3, r3
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	3301      	adds	r3, #1
 8002c86:	f003 031f 	and.w	r3, r3, #31
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c90:	ea42 0103 	orr.w	r1, r2, r3
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10d      	bne.n	8002cbc <HAL_ADC_ConfigChannel+0x65c>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	0e9b      	lsrs	r3, r3, #26
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	f003 021f 	and.w	r2, r3, #31
 8002cac:	4613      	mov	r3, r2
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3b1e      	subs	r3, #30
 8002cb4:	051b      	lsls	r3, r3, #20
 8002cb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cba:	e01d      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x698>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	fa93 f3a3 	rbit	r3, r3
 8002cc8:	613b      	str	r3, [r7, #16]
  return result;
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d103      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002cd4:	2320      	movs	r3, #32
 8002cd6:	e005      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x684>
 8002cd8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	fab3 f383 	clz	r3, r3
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	f003 021f 	and.w	r2, r3, #31
 8002cea:	4613      	mov	r3, r2
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	4413      	add	r3, r2
 8002cf0:	3b1e      	subs	r3, #30
 8002cf2:	051b      	lsls	r3, r3, #20
 8002cf4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	6892      	ldr	r2, [r2, #8]
 8002cfe:	4619      	mov	r1, r3
 8002d00:	f7ff f966 	bl	8001fd0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b3d      	ldr	r3, [pc, #244]	; (8002e00 <HAL_ADC_ConfigChannel+0x7a0>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d06c      	beq.n	8002dea <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d10:	483c      	ldr	r0, [pc, #240]	; (8002e04 <HAL_ADC_ConfigChannel+0x7a4>)
 8002d12:	f7ff f8bb 	bl	8001e8c <LL_ADC_GetCommonPathInternalCh>
 8002d16:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a3a      	ldr	r2, [pc, #232]	; (8002e08 <HAL_ADC_ConfigChannel+0x7a8>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d127      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d121      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a35      	ldr	r2, [pc, #212]	; (8002e0c <HAL_ADC_ConfigChannel+0x7ac>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d157      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d42:	4619      	mov	r1, r3
 8002d44:	482f      	ldr	r0, [pc, #188]	; (8002e04 <HAL_ADC_ConfigChannel+0x7a4>)
 8002d46:	f7ff f88e 	bl	8001e66 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d4a:	4b31      	ldr	r3, [pc, #196]	; (8002e10 <HAL_ADC_ConfigChannel+0x7b0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	099b      	lsrs	r3, r3, #6
 8002d50:	4a30      	ldr	r2, [pc, #192]	; (8002e14 <HAL_ADC_ConfigChannel+0x7b4>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	099b      	lsrs	r3, r3, #6
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4413      	add	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d64:	e002      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f9      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d72:	e03a      	b.n	8002dea <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a27      	ldr	r2, [pc, #156]	; (8002e18 <HAL_ADC_ConfigChannel+0x7b8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d113      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x746>
 8002d7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10d      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a1f      	ldr	r2, [pc, #124]	; (8002e0c <HAL_ADC_ConfigChannel+0x7ac>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d12a      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4819      	ldr	r0, [pc, #100]	; (8002e04 <HAL_ADC_ConfigChannel+0x7a4>)
 8002da0:	f7ff f861 	bl	8001e66 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002da4:	e021      	b.n	8002dea <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a1c      	ldr	r2, [pc, #112]	; (8002e1c <HAL_ADC_ConfigChannel+0x7bc>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d11c      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002db0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002db4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d116      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a12      	ldr	r2, [pc, #72]	; (8002e0c <HAL_ADC_ConfigChannel+0x7ac>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d111      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dce:	4619      	mov	r1, r3
 8002dd0:	480c      	ldr	r0, [pc, #48]	; (8002e04 <HAL_ADC_ConfigChannel+0x7a4>)
 8002dd2:	f7ff f848 	bl	8001e66 <LL_ADC_SetCommonPathInternalCh>
 8002dd6:	e008      	b.n	8002dea <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ddc:	f043 0220 	orr.w	r2, r3, #32
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002df2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	37d8      	adds	r7, #216	; 0xd8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	80080000 	.word	0x80080000
 8002e04:	50040300 	.word	0x50040300
 8002e08:	c7520000 	.word	0xc7520000
 8002e0c:	50040000 	.word	0x50040000
 8002e10:	20000008 	.word	0x20000008
 8002e14:	053e2d63 	.word	0x053e2d63
 8002e18:	cb840000 	.word	0xcb840000
 8002e1c:	80000001 	.word	0x80000001

08002e20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff f981 	bl	8002134 <LL_ADC_IsEnabled>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d14d      	bne.n	8002ed4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	4b28      	ldr	r3, [pc, #160]	; (8002ee0 <ADC_Enable+0xc0>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00d      	beq.n	8002e62 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e4a:	f043 0210 	orr.w	r2, r3, #16
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e56:	f043 0201 	orr.w	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e039      	b.n	8002ed6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff f950 	bl	800210c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002e6c:	f7fe ffb8 	bl	8001de0 <HAL_GetTick>
 8002e70:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e72:	e028      	b.n	8002ec6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff f95b 	bl	8002134 <LL_ADC_IsEnabled>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d104      	bne.n	8002e8e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff f93f 	bl	800210c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002e8e:	f7fe ffa7 	bl	8001de0 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d914      	bls.n	8002ec6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d00d      	beq.n	8002ec6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eae:	f043 0210 	orr.w	r2, r3, #16
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eba:	f043 0201 	orr.w	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e007      	b.n	8002ed6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d1cf      	bne.n	8002e74 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	8000003f 	.word	0x8000003f

08002ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f00:	4013      	ands	r3, r2
 8002f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f16:	4a04      	ldr	r2, [pc, #16]	; (8002f28 <__NVIC_SetPriorityGrouping+0x44>)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	60d3      	str	r3, [r2, #12]
}
 8002f1c:	bf00      	nop
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f30:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <__NVIC_GetPriorityGrouping+0x18>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	0a1b      	lsrs	r3, r3, #8
 8002f36:	f003 0307 	and.w	r3, r3, #7
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	e000ed00 	.word	0xe000ed00

08002f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	db0b      	blt.n	8002f72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	f003 021f 	and.w	r2, r3, #31
 8002f60:	4907      	ldr	r1, [pc, #28]	; (8002f80 <__NVIC_EnableIRQ+0x38>)
 8002f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	2001      	movs	r0, #1
 8002f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	e000e100 	.word	0xe000e100

08002f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	6039      	str	r1, [r7, #0]
 8002f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	db0a      	blt.n	8002fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	490c      	ldr	r1, [pc, #48]	; (8002fd0 <__NVIC_SetPriority+0x4c>)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	0112      	lsls	r2, r2, #4
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fac:	e00a      	b.n	8002fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	4908      	ldr	r1, [pc, #32]	; (8002fd4 <__NVIC_SetPriority+0x50>)
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	3b04      	subs	r3, #4
 8002fbc:	0112      	lsls	r2, r2, #4
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	761a      	strb	r2, [r3, #24]
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000e100 	.word	0xe000e100
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	; 0x24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f1c3 0307 	rsb	r3, r3, #7
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	bf28      	it	cs
 8002ff6:	2304      	movcs	r3, #4
 8002ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	2b06      	cmp	r3, #6
 8003000:	d902      	bls.n	8003008 <NVIC_EncodePriority+0x30>
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3b03      	subs	r3, #3
 8003006:	e000      	b.n	800300a <NVIC_EncodePriority+0x32>
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800300c:	f04f 32ff 	mov.w	r2, #4294967295
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43da      	mvns	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	401a      	ands	r2, r3
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003020:	f04f 31ff 	mov.w	r1, #4294967295
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	43d9      	mvns	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003030:	4313      	orrs	r3, r2
         );
}
 8003032:	4618      	mov	r0, r3
 8003034:	3724      	adds	r7, #36	; 0x24
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
	...

08003040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3b01      	subs	r3, #1
 800304c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003050:	d301      	bcc.n	8003056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003052:	2301      	movs	r3, #1
 8003054:	e00f      	b.n	8003076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003056:	4a0a      	ldr	r2, [pc, #40]	; (8003080 <SysTick_Config+0x40>)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3b01      	subs	r3, #1
 800305c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800305e:	210f      	movs	r1, #15
 8003060:	f04f 30ff 	mov.w	r0, #4294967295
 8003064:	f7ff ff8e 	bl	8002f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <SysTick_Config+0x40>)
 800306a:	2200      	movs	r2, #0
 800306c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800306e:	4b04      	ldr	r3, [pc, #16]	; (8003080 <SysTick_Config+0x40>)
 8003070:	2207      	movs	r2, #7
 8003072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	e000e010 	.word	0xe000e010

08003084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7ff ff29 	bl	8002ee4 <__NVIC_SetPriorityGrouping>
}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b086      	sub	sp, #24
 800309e:	af00      	add	r7, sp, #0
 80030a0:	4603      	mov	r3, r0
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
 80030a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030ac:	f7ff ff3e 	bl	8002f2c <__NVIC_GetPriorityGrouping>
 80030b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68b9      	ldr	r1, [r7, #8]
 80030b6:	6978      	ldr	r0, [r7, #20]
 80030b8:	f7ff ff8e 	bl	8002fd8 <NVIC_EncodePriority>
 80030bc:	4602      	mov	r2, r0
 80030be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff ff5d 	bl	8002f84 <__NVIC_SetPriority>
}
 80030ca:	bf00      	nop
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	4603      	mov	r3, r0
 80030da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff ff31 	bl	8002f48 <__NVIC_EnableIRQ>
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff ffa2 	bl	8003040 <SysTick_Config>
 80030fc:	4603      	mov	r3, r0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003108:	b480      	push	{r7}
 800310a:	b087      	sub	sp, #28
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003112:	2300      	movs	r3, #0
 8003114:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003116:	e148      	b.n	80033aa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	2101      	movs	r1, #1
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	fa01 f303 	lsl.w	r3, r1, r3
 8003124:	4013      	ands	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 813a 	beq.w	80033a4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d00b      	beq.n	8003150 <HAL_GPIO_Init+0x48>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d007      	beq.n	8003150 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003144:	2b11      	cmp	r3, #17
 8003146:	d003      	beq.n	8003150 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b12      	cmp	r3, #18
 800314e:	d130      	bne.n	80031b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	2203      	movs	r2, #3
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4013      	ands	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003186:	2201      	movs	r2, #1
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4013      	ands	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	091b      	lsrs	r3, r3, #4
 800319c:	f003 0201 	and.w	r2, r3, #1
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	2203      	movs	r2, #3
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	4013      	ands	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	689a      	ldr	r2, [r3, #8]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	4313      	orrs	r3, r2
 80031da:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0xea>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b12      	cmp	r3, #18
 80031f0:	d123      	bne.n	800323a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	08da      	lsrs	r2, r3, #3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3208      	adds	r2, #8
 80031fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	220f      	movs	r2, #15
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	43db      	mvns	r3, r3
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4013      	ands	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	08da      	lsrs	r2, r3, #3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3208      	adds	r2, #8
 8003234:	6939      	ldr	r1, [r7, #16]
 8003236:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	2203      	movs	r2, #3
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43db      	mvns	r3, r3
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4013      	ands	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 0203 	and.w	r2, r3, #3
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 8094 	beq.w	80033a4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800327c:	4b52      	ldr	r3, [pc, #328]	; (80033c8 <HAL_GPIO_Init+0x2c0>)
 800327e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003280:	4a51      	ldr	r2, [pc, #324]	; (80033c8 <HAL_GPIO_Init+0x2c0>)
 8003282:	f043 0301 	orr.w	r3, r3, #1
 8003286:	6613      	str	r3, [r2, #96]	; 0x60
 8003288:	4b4f      	ldr	r3, [pc, #316]	; (80033c8 <HAL_GPIO_Init+0x2c0>)
 800328a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003294:	4a4d      	ldr	r2, [pc, #308]	; (80033cc <HAL_GPIO_Init+0x2c4>)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	089b      	lsrs	r3, r3, #2
 800329a:	3302      	adds	r3, #2
 800329c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	220f      	movs	r2, #15
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4013      	ands	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032be:	d00d      	beq.n	80032dc <HAL_GPIO_Init+0x1d4>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a43      	ldr	r2, [pc, #268]	; (80033d0 <HAL_GPIO_Init+0x2c8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d007      	beq.n	80032d8 <HAL_GPIO_Init+0x1d0>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a42      	ldr	r2, [pc, #264]	; (80033d4 <HAL_GPIO_Init+0x2cc>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d101      	bne.n	80032d4 <HAL_GPIO_Init+0x1cc>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e004      	b.n	80032de <HAL_GPIO_Init+0x1d6>
 80032d4:	2307      	movs	r3, #7
 80032d6:	e002      	b.n	80032de <HAL_GPIO_Init+0x1d6>
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <HAL_GPIO_Init+0x1d6>
 80032dc:	2300      	movs	r3, #0
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	f002 0203 	and.w	r2, r2, #3
 80032e4:	0092      	lsls	r2, r2, #2
 80032e6:	4093      	lsls	r3, r2
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032ee:	4937      	ldr	r1, [pc, #220]	; (80033cc <HAL_GPIO_Init+0x2c4>)
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	089b      	lsrs	r3, r3, #2
 80032f4:	3302      	adds	r3, #2
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80032fc:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <HAL_GPIO_Init+0x2d0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	43db      	mvns	r3, r3
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4013      	ands	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4313      	orrs	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003320:	4a2d      	ldr	r2, [pc, #180]	; (80033d8 <HAL_GPIO_Init+0x2d0>)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003326:	4b2c      	ldr	r3, [pc, #176]	; (80033d8 <HAL_GPIO_Init+0x2d0>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	43db      	mvns	r3, r3
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4013      	ands	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4313      	orrs	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800334a:	4a23      	ldr	r2, [pc, #140]	; (80033d8 <HAL_GPIO_Init+0x2d0>)
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003350:	4b21      	ldr	r3, [pc, #132]	; (80033d8 <HAL_GPIO_Init+0x2d0>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	43db      	mvns	r3, r3
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4013      	ands	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003374:	4a18      	ldr	r2, [pc, #96]	; (80033d8 <HAL_GPIO_Init+0x2d0>)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800337a:	4b17      	ldr	r3, [pc, #92]	; (80033d8 <HAL_GPIO_Init+0x2d0>)
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	43db      	mvns	r3, r3
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4013      	ands	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800339e:	4a0e      	ldr	r2, [pc, #56]	; (80033d8 <HAL_GPIO_Init+0x2d0>)
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	3301      	adds	r3, #1
 80033a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	fa22 f303 	lsr.w	r3, r2, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f47f aeaf 	bne.w	8003118 <HAL_GPIO_Init+0x10>
  }
}
 80033ba:	bf00      	nop
 80033bc:	bf00      	nop
 80033be:	371c      	adds	r7, #28
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	40021000 	.word	0x40021000
 80033cc:	40010000 	.word	0x40010000
 80033d0:	48000400 	.word	0x48000400
 80033d4:	48000800 	.word	0x48000800
 80033d8:	40010400 	.word	0x40010400

080033dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	807b      	strh	r3, [r7, #2]
 80033e8:	4613      	mov	r3, r2
 80033ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033ec:	787b      	ldrb	r3, [r7, #1]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033f2:	887a      	ldrh	r2, [r7, #2]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033f8:	e002      	b.n	8003400 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033fa:	887a      	ldrh	r2, [r7, #2]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800341e:	887a      	ldrh	r2, [r7, #2]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4013      	ands	r3, r2
 8003424:	041a      	lsls	r2, r3, #16
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	43d9      	mvns	r1, r3
 800342a:	887b      	ldrh	r3, [r7, #2]
 800342c:	400b      	ands	r3, r1
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	619a      	str	r2, [r3, #24]
}
 8003434:	bf00      	nop
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e081      	b.n	8003556 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7fe fa52 	bl	8001910 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2224      	movs	r2, #36	; 0x24
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0201 	bic.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003490:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d107      	bne.n	80034ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	e006      	b.n	80034c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80034c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d104      	bne.n	80034da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6812      	ldr	r2, [r2, #0]
 80034e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68da      	ldr	r2, [r3, #12]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691a      	ldr	r2, [r3, #16]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	ea42 0103 	orr.w	r1, r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	021a      	lsls	r2, r3, #8
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69d9      	ldr	r1, [r3, #28]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1a      	ldr	r2, [r3, #32]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0201 	orr.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b088      	sub	sp, #32
 8003564:	af02      	add	r7, sp, #8
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	4608      	mov	r0, r1
 800356a:	4611      	mov	r1, r2
 800356c:	461a      	mov	r2, r3
 800356e:	4603      	mov	r3, r0
 8003570:	817b      	strh	r3, [r7, #10]
 8003572:	460b      	mov	r3, r1
 8003574:	813b      	strh	r3, [r7, #8]
 8003576:	4613      	mov	r3, r2
 8003578:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b20      	cmp	r3, #32
 8003584:	f040 80f9 	bne.w	800377a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <HAL_I2C_Mem_Write+0x34>
 800358e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003590:	2b00      	cmp	r3, #0
 8003592:	d105      	bne.n	80035a0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800359a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0ed      	b.n	800377c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d101      	bne.n	80035ae <HAL_I2C_Mem_Write+0x4e>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e0e6      	b.n	800377c <HAL_I2C_Mem_Write+0x21c>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035b6:	f7fe fc13 	bl	8001de0 <HAL_GetTick>
 80035ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	2319      	movs	r3, #25
 80035c2:	2201      	movs	r2, #1
 80035c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f955 	bl	8003878 <I2C_WaitOnFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e0d1      	b.n	800377c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2221      	movs	r2, #33	; 0x21
 80035dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2240      	movs	r2, #64	; 0x40
 80035e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a3a      	ldr	r2, [r7, #32]
 80035f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003600:	88f8      	ldrh	r0, [r7, #6]
 8003602:	893a      	ldrh	r2, [r7, #8]
 8003604:	8979      	ldrh	r1, [r7, #10]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	9301      	str	r3, [sp, #4]
 800360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	4603      	mov	r3, r0
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 f8b9 	bl	8003788 <I2C_RequestMemoryWrite>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0a9      	b.n	800377c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800362c:	b29b      	uxth	r3, r3
 800362e:	2bff      	cmp	r3, #255	; 0xff
 8003630:	d90e      	bls.n	8003650 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	22ff      	movs	r2, #255	; 0xff
 8003636:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363c:	b2da      	uxtb	r2, r3
 800363e:	8979      	ldrh	r1, [r7, #10]
 8003640:	2300      	movs	r3, #0
 8003642:	9300      	str	r3, [sp, #0]
 8003644:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 fa37 	bl	8003abc <I2C_TransferConfig>
 800364e:	e00f      	b.n	8003670 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365e:	b2da      	uxtb	r2, r3
 8003660:	8979      	ldrh	r1, [r7, #10]
 8003662:	2300      	movs	r3, #0
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 fa26 	bl	8003abc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f000 f93f 	bl	80038f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e07b      	b.n	800377c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	781a      	ldrb	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	1c5a      	adds	r2, r3, #1
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ac:	3b01      	subs	r3, #1
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d034      	beq.n	8003728 <HAL_I2C_Mem_Write+0x1c8>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d130      	bne.n	8003728 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036cc:	2200      	movs	r2, #0
 80036ce:	2180      	movs	r1, #128	; 0x80
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f8d1 	bl	8003878 <I2C_WaitOnFlagUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e04d      	b.n	800377c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	2bff      	cmp	r3, #255	; 0xff
 80036e8:	d90e      	bls.n	8003708 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	22ff      	movs	r2, #255	; 0xff
 80036ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	8979      	ldrh	r1, [r7, #10]
 80036f8:	2300      	movs	r3, #0
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 f9db 	bl	8003abc <I2C_TransferConfig>
 8003706:	e00f      	b.n	8003728 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370c:	b29a      	uxth	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003716:	b2da      	uxtb	r2, r3
 8003718:	8979      	ldrh	r1, [r7, #10]
 800371a:	2300      	movs	r3, #0
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 f9ca 	bl	8003abc <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d19e      	bne.n	8003670 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f91e 	bl	8003978 <I2C_WaitOnSTOPFlagUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e01a      	b.n	800377c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2220      	movs	r2, #32
 800374c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6859      	ldr	r1, [r3, #4]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	4b0a      	ldr	r3, [pc, #40]	; (8003784 <HAL_I2C_Mem_Write+0x224>)
 800375a:	400b      	ands	r3, r1
 800375c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2220      	movs	r2, #32
 8003762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	e000      	b.n	800377c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800377a:	2302      	movs	r3, #2
  }
}
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	fe00e800 	.word	0xfe00e800

08003788 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af02      	add	r7, sp, #8
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	4608      	mov	r0, r1
 8003792:	4611      	mov	r1, r2
 8003794:	461a      	mov	r2, r3
 8003796:	4603      	mov	r3, r0
 8003798:	817b      	strh	r3, [r7, #10]
 800379a:	460b      	mov	r3, r1
 800379c:	813b      	strh	r3, [r7, #8]
 800379e:	4613      	mov	r3, r2
 80037a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	8979      	ldrh	r1, [r7, #10]
 80037a8:	4b20      	ldr	r3, [pc, #128]	; (800382c <I2C_RequestMemoryWrite+0xa4>)
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 f983 	bl	8003abc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	69b9      	ldr	r1, [r7, #24]
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f89c 	bl	80038f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e02c      	b.n	8003824 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037ca:	88fb      	ldrh	r3, [r7, #6]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d105      	bne.n	80037dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037d0:	893b      	ldrh	r3, [r7, #8]
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	629a      	str	r2, [r3, #40]	; 0x28
 80037da:	e015      	b.n	8003808 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80037dc:	893b      	ldrh	r3, [r7, #8]
 80037de:	0a1b      	lsrs	r3, r3, #8
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	69b9      	ldr	r1, [r7, #24]
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 f882 	bl	80038f8 <I2C_WaitOnTXISFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e012      	b.n	8003824 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037fe:	893b      	ldrh	r3, [r7, #8]
 8003800:	b2da      	uxtb	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	2200      	movs	r2, #0
 8003810:	2180      	movs	r1, #128	; 0x80
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f000 f830 	bl	8003878 <I2C_WaitOnFlagUntilTimeout>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	80002000 	.word	0x80002000

08003830 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b02      	cmp	r3, #2
 8003844:	d103      	bne.n	800384e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2200      	movs	r2, #0
 800384c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b01      	cmp	r3, #1
 800385a:	d007      	beq.n	800386c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	619a      	str	r2, [r3, #24]
  }
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	4613      	mov	r3, r2
 8003886:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003888:	e022      	b.n	80038d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003890:	d01e      	beq.n	80038d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003892:	f7fe faa5 	bl	8001de0 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d302      	bcc.n	80038a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d113      	bne.n	80038d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ac:	f043 0220 	orr.w	r2, r3, #32
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e00f      	b.n	80038f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699a      	ldr	r2, [r3, #24]
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	4013      	ands	r3, r2
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	429a      	cmp	r2, r3
 80038de:	bf0c      	ite	eq
 80038e0:	2301      	moveq	r3, #1
 80038e2:	2300      	movne	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	461a      	mov	r2, r3
 80038e8:	79fb      	ldrb	r3, [r7, #7]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d0cd      	beq.n	800388a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003904:	e02c      	b.n	8003960 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 f870 	bl	80039f0 <I2C_IsAcknowledgeFailed>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e02a      	b.n	8003970 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003920:	d01e      	beq.n	8003960 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003922:	f7fe fa5d 	bl	8001de0 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	429a      	cmp	r2, r3
 8003930:	d302      	bcc.n	8003938 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d113      	bne.n	8003960 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393c:	f043 0220 	orr.w	r2, r3, #32
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e007      	b.n	8003970 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b02      	cmp	r3, #2
 800396c:	d1cb      	bne.n	8003906 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003984:	e028      	b.n	80039d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 f830 	bl	80039f0 <I2C_IsAcknowledgeFailed>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e026      	b.n	80039e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800399a:	f7fe fa21 	bl	8001de0 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d302      	bcc.n	80039b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d113      	bne.n	80039d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b4:	f043 0220 	orr.w	r2, r3, #32
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e007      	b.n	80039e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	f003 0320 	and.w	r3, r3, #32
 80039e2:	2b20      	cmp	r3, #32
 80039e4:	d1cf      	bne.n	8003986 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	60f8      	str	r0, [r7, #12]
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	f003 0310 	and.w	r3, r3, #16
 8003a06:	2b10      	cmp	r3, #16
 8003a08:	d151      	bne.n	8003aae <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a0a:	e022      	b.n	8003a52 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a12:	d01e      	beq.n	8003a52 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a14:	f7fe f9e4 	bl	8001de0 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d302      	bcc.n	8003a2a <I2C_IsAcknowledgeFailed+0x3a>
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d113      	bne.n	8003a52 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2e:	f043 0220 	orr.w	r2, r3, #32
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e02e      	b.n	8003ab0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d1d5      	bne.n	8003a0c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2210      	movs	r2, #16
 8003a66:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f7ff fedd 	bl	8003830 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6859      	ldr	r1, [r3, #4]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	4b0d      	ldr	r3, [pc, #52]	; (8003ab8 <I2C_IsAcknowledgeFailed+0xc8>)
 8003a82:	400b      	ands	r3, r1
 8003a84:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8a:	f043 0204 	orr.w	r2, r3, #4
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	fe00e800 	.word	0xfe00e800

08003abc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	607b      	str	r3, [r7, #4]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	817b      	strh	r3, [r7, #10]
 8003aca:	4613      	mov	r3, r2
 8003acc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	0d5b      	lsrs	r3, r3, #21
 8003ad8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003adc:	4b0d      	ldr	r3, [pc, #52]	; (8003b14 <I2C_TransferConfig+0x58>)
 8003ade:	430b      	orrs	r3, r1
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	ea02 0103 	and.w	r1, r2, r3
 8003ae6:	897b      	ldrh	r3, [r7, #10]
 8003ae8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003aec:	7a7b      	ldrb	r3, [r7, #9]
 8003aee:	041b      	lsls	r3, r3, #16
 8003af0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	431a      	orrs	r2, r3
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	431a      	orrs	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003b06:	bf00      	nop
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	03ff63ff 	.word	0x03ff63ff

08003b18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b20      	cmp	r3, #32
 8003b2c:	d138      	bne.n	8003ba0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e032      	b.n	8003ba2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2224      	movs	r2, #36	; 0x24
 8003b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0201 	bic.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6819      	ldr	r1, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	e000      	b.n	8003ba2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ba0:	2302      	movs	r3, #2
  }
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b085      	sub	sp, #20
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	d139      	bne.n	8003c38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e033      	b.n	8003c3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2224      	movs	r2, #36	; 0x24
 8003bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0201 	bic.w	r2, r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	021b      	lsls	r3, r3, #8
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0201 	orr.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	e000      	b.n	8003c3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c38:	2302      	movs	r3, #2
  }
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
	...

08003c48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c4c:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40007000 	.word	0x40007000

08003c64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c72:	d130      	bne.n	8003cd6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c74:	4b23      	ldr	r3, [pc, #140]	; (8003d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c80:	d038      	beq.n	8003cf4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c82:	4b20      	ldr	r3, [pc, #128]	; (8003d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c8a:	4a1e      	ldr	r2, [pc, #120]	; (8003d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c92:	4b1d      	ldr	r3, [pc, #116]	; (8003d08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2232      	movs	r2, #50	; 0x32
 8003c98:	fb02 f303 	mul.w	r3, r2, r3
 8003c9c:	4a1b      	ldr	r2, [pc, #108]	; (8003d0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca2:	0c9b      	lsrs	r3, r3, #18
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ca8:	e002      	b.n	8003cb0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3b01      	subs	r3, #1
 8003cae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cb0:	4b14      	ldr	r3, [pc, #80]	; (8003d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cbc:	d102      	bne.n	8003cc4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1f2      	bne.n	8003caa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cc4:	4b0f      	ldr	r3, [pc, #60]	; (8003d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd0:	d110      	bne.n	8003cf4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e00f      	b.n	8003cf6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cd6:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce2:	d007      	beq.n	8003cf4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ce4:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cec:	4a05      	ldr	r2, [pc, #20]	; (8003d04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cf2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	40007000 	.word	0x40007000
 8003d08:	20000008 	.word	0x20000008
 8003d0c:	431bde83 	.word	0x431bde83

08003d10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b088      	sub	sp, #32
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d102      	bne.n	8003d24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	f000 bc11 	b.w	8004546 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d24:	4ba0      	ldr	r3, [pc, #640]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 030c 	and.w	r3, r3, #12
 8003d2c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d2e:	4b9e      	ldr	r3, [pc, #632]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	f003 0303 	and.w	r3, r3, #3
 8003d36:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80e4 	beq.w	8003f0e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d007      	beq.n	8003d5c <HAL_RCC_OscConfig+0x4c>
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	2b0c      	cmp	r3, #12
 8003d50:	f040 808b 	bne.w	8003e6a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	f040 8087 	bne.w	8003e6a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d5c:	4b92      	ldr	r3, [pc, #584]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <HAL_RCC_OscConfig+0x64>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d101      	bne.n	8003d74 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e3e8      	b.n	8004546 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1a      	ldr	r2, [r3, #32]
 8003d78:	4b8b      	ldr	r3, [pc, #556]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d004      	beq.n	8003d8e <HAL_RCC_OscConfig+0x7e>
 8003d84:	4b88      	ldr	r3, [pc, #544]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d8c:	e005      	b.n	8003d9a <HAL_RCC_OscConfig+0x8a>
 8003d8e:	4b86      	ldr	r3, [pc, #536]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d94:	091b      	lsrs	r3, r3, #4
 8003d96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d223      	bcs.n	8003de6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fd7a 	bl	800489c <RCC_SetFlashLatencyFromMSIRange>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e3c9      	b.n	8004546 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003db2:	4b7d      	ldr	r3, [pc, #500]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a7c      	ldr	r2, [pc, #496]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003db8:	f043 0308 	orr.w	r3, r3, #8
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	4b7a      	ldr	r3, [pc, #488]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	4977      	ldr	r1, [pc, #476]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dd0:	4b75      	ldr	r3, [pc, #468]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	021b      	lsls	r3, r3, #8
 8003dde:	4972      	ldr	r1, [pc, #456]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	604b      	str	r3, [r1, #4]
 8003de4:	e025      	b.n	8003e32 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003de6:	4b70      	ldr	r3, [pc, #448]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a6f      	ldr	r2, [pc, #444]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003dec:	f043 0308 	orr.w	r3, r3, #8
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	4b6d      	ldr	r3, [pc, #436]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	496a      	ldr	r1, [pc, #424]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e04:	4b68      	ldr	r3, [pc, #416]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	021b      	lsls	r3, r3, #8
 8003e12:	4965      	ldr	r1, [pc, #404]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 fd3a 	bl	800489c <RCC_SetFlashLatencyFromMSIRange>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e389      	b.n	8004546 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e32:	f000 fc6f 	bl	8004714 <HAL_RCC_GetSysClockFreq>
 8003e36:	4602      	mov	r2, r0
 8003e38:	4b5b      	ldr	r3, [pc, #364]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	091b      	lsrs	r3, r3, #4
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	495a      	ldr	r1, [pc, #360]	; (8003fac <HAL_RCC_OscConfig+0x29c>)
 8003e44:	5ccb      	ldrb	r3, [r1, r3]
 8003e46:	f003 031f 	and.w	r3, r3, #31
 8003e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4e:	4a58      	ldr	r2, [pc, #352]	; (8003fb0 <HAL_RCC_OscConfig+0x2a0>)
 8003e50:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e52:	4b58      	ldr	r3, [pc, #352]	; (8003fb4 <HAL_RCC_OscConfig+0x2a4>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fd ff72 	bl	8001d40 <HAL_InitTick>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d052      	beq.n	8003f0c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
 8003e68:	e36d      	b.n	8004546 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d032      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e72:	4b4d      	ldr	r3, [pc, #308]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a4c      	ldr	r2, [pc, #304]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003e78:	f043 0301 	orr.w	r3, r3, #1
 8003e7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e7e:	f7fd ffaf 	bl	8001de0 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e86:	f7fd ffab 	bl	8001de0 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e356      	b.n	8004546 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e98:	4b43      	ldr	r3, [pc, #268]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0f0      	beq.n	8003e86 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ea4:	4b40      	ldr	r3, [pc, #256]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a3f      	ldr	r2, [pc, #252]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003eaa:	f043 0308 	orr.w	r3, r3, #8
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	4b3d      	ldr	r3, [pc, #244]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	493a      	ldr	r1, [pc, #232]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ec2:	4b39      	ldr	r3, [pc, #228]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	021b      	lsls	r3, r3, #8
 8003ed0:	4935      	ldr	r1, [pc, #212]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	604b      	str	r3, [r1, #4]
 8003ed6:	e01a      	b.n	8003f0e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ed8:	4b33      	ldr	r3, [pc, #204]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a32      	ldr	r2, [pc, #200]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003ede:	f023 0301 	bic.w	r3, r3, #1
 8003ee2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ee4:	f7fd ff7c 	bl	8001de0 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003eec:	f7fd ff78 	bl	8001de0 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e323      	b.n	8004546 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003efe:	4b2a      	ldr	r3, [pc, #168]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1f0      	bne.n	8003eec <HAL_RCC_OscConfig+0x1dc>
 8003f0a:	e000      	b.n	8003f0e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d073      	beq.n	8004002 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d005      	beq.n	8003f2c <HAL_RCC_OscConfig+0x21c>
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	2b0c      	cmp	r3, #12
 8003f24:	d10e      	bne.n	8003f44 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2b03      	cmp	r3, #3
 8003f2a:	d10b      	bne.n	8003f44 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f2c:	4b1e      	ldr	r3, [pc, #120]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d063      	beq.n	8004000 <HAL_RCC_OscConfig+0x2f0>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d15f      	bne.n	8004000 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e300      	b.n	8004546 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f4c:	d106      	bne.n	8003f5c <HAL_RCC_OscConfig+0x24c>
 8003f4e:	4b16      	ldr	r3, [pc, #88]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a15      	ldr	r2, [pc, #84]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	e01d      	b.n	8003f98 <HAL_RCC_OscConfig+0x288>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f64:	d10c      	bne.n	8003f80 <HAL_RCC_OscConfig+0x270>
 8003f66:	4b10      	ldr	r3, [pc, #64]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a0f      	ldr	r2, [pc, #60]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	4b0d      	ldr	r3, [pc, #52]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a0c      	ldr	r2, [pc, #48]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	e00b      	b.n	8003f98 <HAL_RCC_OscConfig+0x288>
 8003f80:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a08      	ldr	r2, [pc, #32]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a05      	ldr	r2, [pc, #20]	; (8003fa8 <HAL_RCC_OscConfig+0x298>)
 8003f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d01b      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa0:	f7fd ff1e 	bl	8001de0 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fa6:	e010      	b.n	8003fca <HAL_RCC_OscConfig+0x2ba>
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	080099e4 	.word	0x080099e4
 8003fb0:	20000008 	.word	0x20000008
 8003fb4:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb8:	f7fd ff12 	bl	8001de0 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b64      	cmp	r3, #100	; 0x64
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e2bd      	b.n	8004546 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fca:	4baf      	ldr	r3, [pc, #700]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0f0      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x2a8>
 8003fd6:	e014      	b.n	8004002 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd8:	f7fd ff02 	bl	8001de0 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fe0:	f7fd fefe 	bl	8001de0 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b64      	cmp	r3, #100	; 0x64
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e2a9      	b.n	8004546 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ff2:	4ba5      	ldr	r3, [pc, #660]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1f0      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x2d0>
 8003ffe:	e000      	b.n	8004002 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d060      	beq.n	80040d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	2b04      	cmp	r3, #4
 8004012:	d005      	beq.n	8004020 <HAL_RCC_OscConfig+0x310>
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	2b0c      	cmp	r3, #12
 8004018:	d119      	bne.n	800404e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2b02      	cmp	r3, #2
 800401e:	d116      	bne.n	800404e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004020:	4b99      	ldr	r3, [pc, #612]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_RCC_OscConfig+0x328>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e286      	b.n	8004546 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004038:	4b93      	ldr	r3, [pc, #588]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	061b      	lsls	r3, r3, #24
 8004046:	4990      	ldr	r1, [pc, #576]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 8004048:	4313      	orrs	r3, r2
 800404a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800404c:	e040      	b.n	80040d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d023      	beq.n	800409e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004056:	4b8c      	ldr	r3, [pc, #560]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a8b      	ldr	r2, [pc, #556]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 800405c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004062:	f7fd febd 	bl	8001de0 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800406a:	f7fd feb9 	bl	8001de0 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e264      	b.n	8004546 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800407c:	4b82      	ldr	r3, [pc, #520]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0f0      	beq.n	800406a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004088:	4b7f      	ldr	r3, [pc, #508]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	061b      	lsls	r3, r3, #24
 8004096:	497c      	ldr	r1, [pc, #496]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 8004098:	4313      	orrs	r3, r2
 800409a:	604b      	str	r3, [r1, #4]
 800409c:	e018      	b.n	80040d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800409e:	4b7a      	ldr	r3, [pc, #488]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a79      	ldr	r2, [pc, #484]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 80040a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040aa:	f7fd fe99 	bl	8001de0 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040b2:	f7fd fe95 	bl	8001de0 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e240      	b.n	8004546 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040c4:	4b70      	ldr	r3, [pc, #448]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1f0      	bne.n	80040b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d03c      	beq.n	8004156 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d01c      	beq.n	800411e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040e4:	4b68      	ldr	r3, [pc, #416]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 80040e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ea:	4a67      	ldr	r2, [pc, #412]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f4:	f7fd fe74 	bl	8001de0 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040fc:	f7fd fe70 	bl	8001de0 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e21b      	b.n	8004546 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800410e:	4b5e      	ldr	r3, [pc, #376]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 8004110:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0ef      	beq.n	80040fc <HAL_RCC_OscConfig+0x3ec>
 800411c:	e01b      	b.n	8004156 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800411e:	4b5a      	ldr	r3, [pc, #360]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 8004120:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004124:	4a58      	ldr	r2, [pc, #352]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 8004126:	f023 0301 	bic.w	r3, r3, #1
 800412a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412e:	f7fd fe57 	bl	8001de0 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004136:	f7fd fe53 	bl	8001de0 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e1fe      	b.n	8004546 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004148:	4b4f      	ldr	r3, [pc, #316]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 800414a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1ef      	bne.n	8004136 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 80a6 	beq.w	80042b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004164:	2300      	movs	r3, #0
 8004166:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004168:	4b47      	ldr	r3, [pc, #284]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 800416a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10d      	bne.n	8004190 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004174:	4b44      	ldr	r3, [pc, #272]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 8004176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004178:	4a43      	ldr	r2, [pc, #268]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 800417a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800417e:	6593      	str	r3, [r2, #88]	; 0x58
 8004180:	4b41      	ldr	r3, [pc, #260]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 8004182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004188:	60bb      	str	r3, [r7, #8]
 800418a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800418c:	2301      	movs	r3, #1
 800418e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004190:	4b3e      	ldr	r3, [pc, #248]	; (800428c <HAL_RCC_OscConfig+0x57c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004198:	2b00      	cmp	r3, #0
 800419a:	d118      	bne.n	80041ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800419c:	4b3b      	ldr	r3, [pc, #236]	; (800428c <HAL_RCC_OscConfig+0x57c>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a3a      	ldr	r2, [pc, #232]	; (800428c <HAL_RCC_OscConfig+0x57c>)
 80041a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041a8:	f7fd fe1a 	bl	8001de0 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b0:	f7fd fe16 	bl	8001de0 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e1c1      	b.n	8004546 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041c2:	4b32      	ldr	r3, [pc, #200]	; (800428c <HAL_RCC_OscConfig+0x57c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d0f0      	beq.n	80041b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d108      	bne.n	80041e8 <HAL_RCC_OscConfig+0x4d8>
 80041d6:	4b2c      	ldr	r3, [pc, #176]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 80041d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041dc:	4a2a      	ldr	r2, [pc, #168]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 80041de:	f043 0301 	orr.w	r3, r3, #1
 80041e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041e6:	e024      	b.n	8004232 <HAL_RCC_OscConfig+0x522>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	2b05      	cmp	r3, #5
 80041ee:	d110      	bne.n	8004212 <HAL_RCC_OscConfig+0x502>
 80041f0:	4b25      	ldr	r3, [pc, #148]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 80041f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f6:	4a24      	ldr	r2, [pc, #144]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 80041f8:	f043 0304 	orr.w	r3, r3, #4
 80041fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004200:	4b21      	ldr	r3, [pc, #132]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004206:	4a20      	ldr	r2, [pc, #128]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004210:	e00f      	b.n	8004232 <HAL_RCC_OscConfig+0x522>
 8004212:	4b1d      	ldr	r3, [pc, #116]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 8004214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004218:	4a1b      	ldr	r2, [pc, #108]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 800421a:	f023 0301 	bic.w	r3, r3, #1
 800421e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004222:	4b19      	ldr	r3, [pc, #100]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004228:	4a17      	ldr	r2, [pc, #92]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 800422a:	f023 0304 	bic.w	r3, r3, #4
 800422e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d016      	beq.n	8004268 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800423a:	f7fd fdd1 	bl	8001de0 <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004240:	e00a      	b.n	8004258 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004242:	f7fd fdcd 	bl	8001de0 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004250:	4293      	cmp	r3, r2
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e176      	b.n	8004546 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <HAL_RCC_OscConfig+0x578>)
 800425a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0ed      	beq.n	8004242 <HAL_RCC_OscConfig+0x532>
 8004266:	e01a      	b.n	800429e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004268:	f7fd fdba 	bl	8001de0 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800426e:	e00f      	b.n	8004290 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004270:	f7fd fdb6 	bl	8001de0 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	f241 3288 	movw	r2, #5000	; 0x1388
 800427e:	4293      	cmp	r3, r2
 8004280:	d906      	bls.n	8004290 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e15f      	b.n	8004546 <HAL_RCC_OscConfig+0x836>
 8004286:	bf00      	nop
 8004288:	40021000 	.word	0x40021000
 800428c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004290:	4baa      	ldr	r3, [pc, #680]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 8004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1e8      	bne.n	8004270 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800429e:	7ffb      	ldrb	r3, [r7, #31]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d105      	bne.n	80042b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042a4:	4ba5      	ldr	r3, [pc, #660]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 80042a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a8:	4aa4      	ldr	r2, [pc, #656]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 80042aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d03c      	beq.n	8004336 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d01c      	beq.n	80042fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80042c4:	4b9d      	ldr	r3, [pc, #628]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 80042c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042ca:	4a9c      	ldr	r2, [pc, #624]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 80042cc:	f043 0301 	orr.w	r3, r3, #1
 80042d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d4:	f7fd fd84 	bl	8001de0 <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042dc:	f7fd fd80 	bl	8001de0 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e12b      	b.n	8004546 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042ee:	4b93      	ldr	r3, [pc, #588]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 80042f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d0ef      	beq.n	80042dc <HAL_RCC_OscConfig+0x5cc>
 80042fc:	e01b      	b.n	8004336 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042fe:	4b8f      	ldr	r3, [pc, #572]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 8004300:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004304:	4a8d      	ldr	r2, [pc, #564]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 8004306:	f023 0301 	bic.w	r3, r3, #1
 800430a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800430e:	f7fd fd67 	bl	8001de0 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004316:	f7fd fd63 	bl	8001de0 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e10e      	b.n	8004546 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004328:	4b84      	ldr	r3, [pc, #528]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 800432a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1ef      	bne.n	8004316 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 8102 	beq.w	8004544 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	2b02      	cmp	r3, #2
 8004346:	f040 80c5 	bne.w	80044d4 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800434a:	4b7c      	ldr	r3, [pc, #496]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	f003 0203 	and.w	r2, r3, #3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435a:	429a      	cmp	r2, r3
 800435c:	d12c      	bne.n	80043b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	3b01      	subs	r3, #1
 800436a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800436c:	429a      	cmp	r2, r3
 800436e:	d123      	bne.n	80043b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800437c:	429a      	cmp	r2, r3
 800437e:	d11b      	bne.n	80043b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800438c:	429a      	cmp	r2, r3
 800438e:	d113      	bne.n	80043b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439a:	085b      	lsrs	r3, r3, #1
 800439c:	3b01      	subs	r3, #1
 800439e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d109      	bne.n	80043b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	085b      	lsrs	r3, r3, #1
 80043b0:	3b01      	subs	r3, #1
 80043b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d067      	beq.n	8004488 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	2b0c      	cmp	r3, #12
 80043bc:	d062      	beq.n	8004484 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80043be:	4b5f      	ldr	r3, [pc, #380]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e0bb      	b.n	8004546 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043ce:	4b5b      	ldr	r3, [pc, #364]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a5a      	ldr	r2, [pc, #360]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 80043d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043da:	f7fd fd01 	bl	8001de0 <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043e0:	e008      	b.n	80043f4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e2:	f7fd fcfd 	bl	8001de0 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e0a8      	b.n	8004546 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f4:	4b51      	ldr	r3, [pc, #324]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1f0      	bne.n	80043e2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004400:	4b4e      	ldr	r3, [pc, #312]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	4b4e      	ldr	r3, [pc, #312]	; (8004540 <HAL_RCC_OscConfig+0x830>)
 8004406:	4013      	ands	r3, r2
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004410:	3a01      	subs	r2, #1
 8004412:	0112      	lsls	r2, r2, #4
 8004414:	4311      	orrs	r1, r2
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800441a:	0212      	lsls	r2, r2, #8
 800441c:	4311      	orrs	r1, r2
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004422:	0852      	lsrs	r2, r2, #1
 8004424:	3a01      	subs	r2, #1
 8004426:	0552      	lsls	r2, r2, #21
 8004428:	4311      	orrs	r1, r2
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800442e:	0852      	lsrs	r2, r2, #1
 8004430:	3a01      	subs	r2, #1
 8004432:	0652      	lsls	r2, r2, #25
 8004434:	4311      	orrs	r1, r2
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800443a:	06d2      	lsls	r2, r2, #27
 800443c:	430a      	orrs	r2, r1
 800443e:	493f      	ldr	r1, [pc, #252]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 8004440:	4313      	orrs	r3, r2
 8004442:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004444:	4b3d      	ldr	r3, [pc, #244]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a3c      	ldr	r2, [pc, #240]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 800444a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800444e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004450:	4b3a      	ldr	r3, [pc, #232]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	4a39      	ldr	r2, [pc, #228]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 8004456:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800445a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800445c:	f7fd fcc0 	bl	8001de0 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004464:	f7fd fcbc 	bl	8001de0 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e067      	b.n	8004546 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004476:	4b31      	ldr	r3, [pc, #196]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d0f0      	beq.n	8004464 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004482:	e05f      	b.n	8004544 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e05e      	b.n	8004546 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004488:	4b2c      	ldr	r3, [pc, #176]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d157      	bne.n	8004544 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004494:	4b29      	ldr	r3, [pc, #164]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a28      	ldr	r2, [pc, #160]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 800449a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800449e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044a0:	4b26      	ldr	r3, [pc, #152]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	4a25      	ldr	r2, [pc, #148]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 80044a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80044ac:	f7fd fc98 	bl	8001de0 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b4:	f7fd fc94 	bl	8001de0 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e03f      	b.n	8004546 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044c6:	4b1d      	ldr	r3, [pc, #116]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0f0      	beq.n	80044b4 <HAL_RCC_OscConfig+0x7a4>
 80044d2:	e037      	b.n	8004544 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	2b0c      	cmp	r3, #12
 80044d8:	d02d      	beq.n	8004536 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044da:	4b18      	ldr	r3, [pc, #96]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a17      	ldr	r2, [pc, #92]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 80044e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044e4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044e6:	4b15      	ldr	r3, [pc, #84]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d105      	bne.n	80044fe <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80044f2:	4b12      	ldr	r3, [pc, #72]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	4a11      	ldr	r2, [pc, #68]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 80044f8:	f023 0303 	bic.w	r3, r3, #3
 80044fc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80044fe:	4b0f      	ldr	r3, [pc, #60]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	4a0e      	ldr	r2, [pc, #56]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 8004504:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800450c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450e:	f7fd fc67 	bl	8001de0 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004516:	f7fd fc63 	bl	8001de0 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e00e      	b.n	8004546 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004528:	4b04      	ldr	r3, [pc, #16]	; (800453c <HAL_RCC_OscConfig+0x82c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1f0      	bne.n	8004516 <HAL_RCC_OscConfig+0x806>
 8004534:	e006      	b.n	8004544 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e005      	b.n	8004546 <HAL_RCC_OscConfig+0x836>
 800453a:	bf00      	nop
 800453c:	40021000 	.word	0x40021000
 8004540:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3720      	adds	r7, #32
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop

08004550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e0c8      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004564:	4b66      	ldr	r3, [pc, #408]	; (8004700 <HAL_RCC_ClockConfig+0x1b0>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d910      	bls.n	8004594 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004572:	4b63      	ldr	r3, [pc, #396]	; (8004700 <HAL_RCC_ClockConfig+0x1b0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f023 0207 	bic.w	r2, r3, #7
 800457a:	4961      	ldr	r1, [pc, #388]	; (8004700 <HAL_RCC_ClockConfig+0x1b0>)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	4313      	orrs	r3, r2
 8004580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004582:	4b5f      	ldr	r3, [pc, #380]	; (8004700 <HAL_RCC_ClockConfig+0x1b0>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d001      	beq.n	8004594 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e0b0      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b00      	cmp	r3, #0
 800459e:	d04c      	beq.n	800463a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d107      	bne.n	80045b8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045a8:	4b56      	ldr	r3, [pc, #344]	; (8004704 <HAL_RCC_ClockConfig+0x1b4>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d121      	bne.n	80045f8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e09e      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d107      	bne.n	80045d0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045c0:	4b50      	ldr	r3, [pc, #320]	; (8004704 <HAL_RCC_ClockConfig+0x1b4>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d115      	bne.n	80045f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e092      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d107      	bne.n	80045e8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045d8:	4b4a      	ldr	r3, [pc, #296]	; (8004704 <HAL_RCC_ClockConfig+0x1b4>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d109      	bne.n	80045f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e086      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045e8:	4b46      	ldr	r3, [pc, #280]	; (8004704 <HAL_RCC_ClockConfig+0x1b4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e07e      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045f8:	4b42      	ldr	r3, [pc, #264]	; (8004704 <HAL_RCC_ClockConfig+0x1b4>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f023 0203 	bic.w	r2, r3, #3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	493f      	ldr	r1, [pc, #252]	; (8004704 <HAL_RCC_ClockConfig+0x1b4>)
 8004606:	4313      	orrs	r3, r2
 8004608:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800460a:	f7fd fbe9 	bl	8001de0 <HAL_GetTick>
 800460e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004610:	e00a      	b.n	8004628 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004612:	f7fd fbe5 	bl	8001de0 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004620:	4293      	cmp	r3, r2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e066      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004628:	4b36      	ldr	r3, [pc, #216]	; (8004704 <HAL_RCC_ClockConfig+0x1b4>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 020c 	and.w	r2, r3, #12
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	429a      	cmp	r2, r3
 8004638:	d1eb      	bne.n	8004612 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d008      	beq.n	8004658 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004646:	4b2f      	ldr	r3, [pc, #188]	; (8004704 <HAL_RCC_ClockConfig+0x1b4>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	492c      	ldr	r1, [pc, #176]	; (8004704 <HAL_RCC_ClockConfig+0x1b4>)
 8004654:	4313      	orrs	r3, r2
 8004656:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004658:	4b29      	ldr	r3, [pc, #164]	; (8004700 <HAL_RCC_ClockConfig+0x1b0>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d210      	bcs.n	8004688 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004666:	4b26      	ldr	r3, [pc, #152]	; (8004700 <HAL_RCC_ClockConfig+0x1b0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f023 0207 	bic.w	r2, r3, #7
 800466e:	4924      	ldr	r1, [pc, #144]	; (8004700 <HAL_RCC_ClockConfig+0x1b0>)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	4313      	orrs	r3, r2
 8004674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004676:	4b22      	ldr	r3, [pc, #136]	; (8004700 <HAL_RCC_ClockConfig+0x1b0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	429a      	cmp	r2, r3
 8004682:	d001      	beq.n	8004688 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e036      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004694:	4b1b      	ldr	r3, [pc, #108]	; (8004704 <HAL_RCC_ClockConfig+0x1b4>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4918      	ldr	r1, [pc, #96]	; (8004704 <HAL_RCC_ClockConfig+0x1b4>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d009      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046b2:	4b14      	ldr	r3, [pc, #80]	; (8004704 <HAL_RCC_ClockConfig+0x1b4>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4910      	ldr	r1, [pc, #64]	; (8004704 <HAL_RCC_ClockConfig+0x1b4>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046c6:	f000 f825 	bl	8004714 <HAL_RCC_GetSysClockFreq>
 80046ca:	4602      	mov	r2, r0
 80046cc:	4b0d      	ldr	r3, [pc, #52]	; (8004704 <HAL_RCC_ClockConfig+0x1b4>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	091b      	lsrs	r3, r3, #4
 80046d2:	f003 030f 	and.w	r3, r3, #15
 80046d6:	490c      	ldr	r1, [pc, #48]	; (8004708 <HAL_RCC_ClockConfig+0x1b8>)
 80046d8:	5ccb      	ldrb	r3, [r1, r3]
 80046da:	f003 031f 	and.w	r3, r3, #31
 80046de:	fa22 f303 	lsr.w	r3, r2, r3
 80046e2:	4a0a      	ldr	r2, [pc, #40]	; (800470c <HAL_RCC_ClockConfig+0x1bc>)
 80046e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046e6:	4b0a      	ldr	r3, [pc, #40]	; (8004710 <HAL_RCC_ClockConfig+0x1c0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fd fb28 	bl	8001d40 <HAL_InitTick>
 80046f0:	4603      	mov	r3, r0
 80046f2:	72fb      	strb	r3, [r7, #11]

  return status;
 80046f4:	7afb      	ldrb	r3, [r7, #11]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40022000 	.word	0x40022000
 8004704:	40021000 	.word	0x40021000
 8004708:	080099e4 	.word	0x080099e4
 800470c:	20000008 	.word	0x20000008
 8004710:	2000000c 	.word	0x2000000c

08004714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004714:	b480      	push	{r7}
 8004716:	b089      	sub	sp, #36	; 0x24
 8004718:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800471a:	2300      	movs	r3, #0
 800471c:	61fb      	str	r3, [r7, #28]
 800471e:	2300      	movs	r3, #0
 8004720:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004722:	4b3e      	ldr	r3, [pc, #248]	; (800481c <HAL_RCC_GetSysClockFreq+0x108>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 030c 	and.w	r3, r3, #12
 800472a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800472c:	4b3b      	ldr	r3, [pc, #236]	; (800481c <HAL_RCC_GetSysClockFreq+0x108>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d005      	beq.n	8004748 <HAL_RCC_GetSysClockFreq+0x34>
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	2b0c      	cmp	r3, #12
 8004740:	d121      	bne.n	8004786 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d11e      	bne.n	8004786 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004748:	4b34      	ldr	r3, [pc, #208]	; (800481c <HAL_RCC_GetSysClockFreq+0x108>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0308 	and.w	r3, r3, #8
 8004750:	2b00      	cmp	r3, #0
 8004752:	d107      	bne.n	8004764 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004754:	4b31      	ldr	r3, [pc, #196]	; (800481c <HAL_RCC_GetSysClockFreq+0x108>)
 8004756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800475a:	0a1b      	lsrs	r3, r3, #8
 800475c:	f003 030f 	and.w	r3, r3, #15
 8004760:	61fb      	str	r3, [r7, #28]
 8004762:	e005      	b.n	8004770 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004764:	4b2d      	ldr	r3, [pc, #180]	; (800481c <HAL_RCC_GetSysClockFreq+0x108>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	091b      	lsrs	r3, r3, #4
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004770:	4a2b      	ldr	r2, [pc, #172]	; (8004820 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004778:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10d      	bne.n	800479c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004784:	e00a      	b.n	800479c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	2b04      	cmp	r3, #4
 800478a:	d102      	bne.n	8004792 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800478c:	4b25      	ldr	r3, [pc, #148]	; (8004824 <HAL_RCC_GetSysClockFreq+0x110>)
 800478e:	61bb      	str	r3, [r7, #24]
 8004790:	e004      	b.n	800479c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	2b08      	cmp	r3, #8
 8004796:	d101      	bne.n	800479c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004798:	4b23      	ldr	r3, [pc, #140]	; (8004828 <HAL_RCC_GetSysClockFreq+0x114>)
 800479a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	2b0c      	cmp	r3, #12
 80047a0:	d134      	bne.n	800480c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047a2:	4b1e      	ldr	r3, [pc, #120]	; (800481c <HAL_RCC_GetSysClockFreq+0x108>)
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d003      	beq.n	80047ba <HAL_RCC_GetSysClockFreq+0xa6>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b03      	cmp	r3, #3
 80047b6:	d003      	beq.n	80047c0 <HAL_RCC_GetSysClockFreq+0xac>
 80047b8:	e005      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047ba:	4b1a      	ldr	r3, [pc, #104]	; (8004824 <HAL_RCC_GetSysClockFreq+0x110>)
 80047bc:	617b      	str	r3, [r7, #20]
      break;
 80047be:	e005      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047c0:	4b19      	ldr	r3, [pc, #100]	; (8004828 <HAL_RCC_GetSysClockFreq+0x114>)
 80047c2:	617b      	str	r3, [r7, #20]
      break;
 80047c4:	e002      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	617b      	str	r3, [r7, #20]
      break;
 80047ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047cc:	4b13      	ldr	r3, [pc, #76]	; (800481c <HAL_RCC_GetSysClockFreq+0x108>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	091b      	lsrs	r3, r3, #4
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	3301      	adds	r3, #1
 80047d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047da:	4b10      	ldr	r3, [pc, #64]	; (800481c <HAL_RCC_GetSysClockFreq+0x108>)
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	0a1b      	lsrs	r3, r3, #8
 80047e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	fb02 f203 	mul.w	r2, r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047f2:	4b0a      	ldr	r3, [pc, #40]	; (800481c <HAL_RCC_GetSysClockFreq+0x108>)
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	0e5b      	lsrs	r3, r3, #25
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	3301      	adds	r3, #1
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	fbb2 f3f3 	udiv	r3, r2, r3
 800480a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800480c:	69bb      	ldr	r3, [r7, #24]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3724      	adds	r7, #36	; 0x24
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40021000 	.word	0x40021000
 8004820:	080099fc 	.word	0x080099fc
 8004824:	00f42400 	.word	0x00f42400
 8004828:	007a1200 	.word	0x007a1200

0800482c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004830:	4b03      	ldr	r3, [pc, #12]	; (8004840 <HAL_RCC_GetHCLKFreq+0x14>)
 8004832:	681b      	ldr	r3, [r3, #0]
}
 8004834:	4618      	mov	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	20000008 	.word	0x20000008

08004844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004848:	f7ff fff0 	bl	800482c <HAL_RCC_GetHCLKFreq>
 800484c:	4602      	mov	r2, r0
 800484e:	4b06      	ldr	r3, [pc, #24]	; (8004868 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	0a1b      	lsrs	r3, r3, #8
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	4904      	ldr	r1, [pc, #16]	; (800486c <HAL_RCC_GetPCLK1Freq+0x28>)
 800485a:	5ccb      	ldrb	r3, [r1, r3]
 800485c:	f003 031f 	and.w	r3, r3, #31
 8004860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004864:	4618      	mov	r0, r3
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40021000 	.word	0x40021000
 800486c:	080099f4 	.word	0x080099f4

08004870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004874:	f7ff ffda 	bl	800482c <HAL_RCC_GetHCLKFreq>
 8004878:	4602      	mov	r2, r0
 800487a:	4b06      	ldr	r3, [pc, #24]	; (8004894 <HAL_RCC_GetPCLK2Freq+0x24>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	0adb      	lsrs	r3, r3, #11
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	4904      	ldr	r1, [pc, #16]	; (8004898 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004886:	5ccb      	ldrb	r3, [r1, r3]
 8004888:	f003 031f 	and.w	r3, r3, #31
 800488c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004890:	4618      	mov	r0, r3
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40021000 	.word	0x40021000
 8004898:	080099f4 	.word	0x080099f4

0800489c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048a4:	2300      	movs	r3, #0
 80048a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048a8:	4b2a      	ldr	r3, [pc, #168]	; (8004954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048b4:	f7ff f9c8 	bl	8003c48 <HAL_PWREx_GetVoltageRange>
 80048b8:	6178      	str	r0, [r7, #20]
 80048ba:	e014      	b.n	80048e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048bc:	4b25      	ldr	r3, [pc, #148]	; (8004954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c0:	4a24      	ldr	r2, [pc, #144]	; (8004954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c6:	6593      	str	r3, [r2, #88]	; 0x58
 80048c8:	4b22      	ldr	r3, [pc, #136]	; (8004954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048d4:	f7ff f9b8 	bl	8003c48 <HAL_PWREx_GetVoltageRange>
 80048d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048da:	4b1e      	ldr	r3, [pc, #120]	; (8004954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048de:	4a1d      	ldr	r2, [pc, #116]	; (8004954 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ec:	d10b      	bne.n	8004906 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b80      	cmp	r3, #128	; 0x80
 80048f2:	d919      	bls.n	8004928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2ba0      	cmp	r3, #160	; 0xa0
 80048f8:	d902      	bls.n	8004900 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048fa:	2302      	movs	r3, #2
 80048fc:	613b      	str	r3, [r7, #16]
 80048fe:	e013      	b.n	8004928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004900:	2301      	movs	r3, #1
 8004902:	613b      	str	r3, [r7, #16]
 8004904:	e010      	b.n	8004928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b80      	cmp	r3, #128	; 0x80
 800490a:	d902      	bls.n	8004912 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800490c:	2303      	movs	r3, #3
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	e00a      	b.n	8004928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b80      	cmp	r3, #128	; 0x80
 8004916:	d102      	bne.n	800491e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004918:	2302      	movs	r3, #2
 800491a:	613b      	str	r3, [r7, #16]
 800491c:	e004      	b.n	8004928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b70      	cmp	r3, #112	; 0x70
 8004922:	d101      	bne.n	8004928 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004924:	2301      	movs	r3, #1
 8004926:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004928:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f023 0207 	bic.w	r2, r3, #7
 8004930:	4909      	ldr	r1, [pc, #36]	; (8004958 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004938:	4b07      	ldr	r3, [pc, #28]	; (8004958 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	429a      	cmp	r2, r3
 8004944:	d001      	beq.n	800494a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3718      	adds	r7, #24
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40021000 	.word	0x40021000
 8004958:	40022000 	.word	0x40022000

0800495c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004964:	2300      	movs	r3, #0
 8004966:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004968:	2300      	movs	r3, #0
 800496a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004974:	2b00      	cmp	r3, #0
 8004976:	d031      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004980:	d01a      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004982:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004986:	d814      	bhi.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004988:	2b00      	cmp	r3, #0
 800498a:	d009      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800498c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004990:	d10f      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004992:	4bac      	ldr	r3, [pc, #688]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	4aab      	ldr	r2, [pc, #684]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800499c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800499e:	e00c      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3304      	adds	r3, #4
 80049a4:	2100      	movs	r1, #0
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 f9cc 	bl	8004d44 <RCCEx_PLLSAI1_Config>
 80049ac:	4603      	mov	r3, r0
 80049ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049b0:	e003      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	74fb      	strb	r3, [r7, #19]
      break;
 80049b6:	e000      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80049b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049ba:	7cfb      	ldrb	r3, [r7, #19]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10b      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049c0:	4ba0      	ldr	r3, [pc, #640]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ce:	499d      	ldr	r1, [pc, #628]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049d6:	e001      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d8:	7cfb      	ldrb	r3, [r7, #19]
 80049da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 8099 	beq.w	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049ea:	2300      	movs	r3, #0
 80049ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049ee:	4b95      	ldr	r3, [pc, #596]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80049f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80049fa:	2301      	movs	r3, #1
 80049fc:	e000      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80049fe:	2300      	movs	r3, #0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00d      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a04:	4b8f      	ldr	r3, [pc, #572]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a08:	4a8e      	ldr	r2, [pc, #568]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a0e:	6593      	str	r3, [r2, #88]	; 0x58
 8004a10:	4b8c      	ldr	r3, [pc, #560]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a18:	60bb      	str	r3, [r7, #8]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a20:	4b89      	ldr	r3, [pc, #548]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a88      	ldr	r2, [pc, #544]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a2c:	f7fd f9d8 	bl	8001de0 <HAL_GetTick>
 8004a30:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a32:	e009      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a34:	f7fd f9d4 	bl	8001de0 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d902      	bls.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	74fb      	strb	r3, [r7, #19]
        break;
 8004a46:	e005      	b.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a48:	4b7f      	ldr	r3, [pc, #508]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0ef      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004a54:	7cfb      	ldrb	r3, [r7, #19]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d155      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a5a:	4b7a      	ldr	r3, [pc, #488]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a64:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d01e      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d019      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a76:	4b73      	ldr	r3, [pc, #460]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a80:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a82:	4b70      	ldr	r3, [pc, #448]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a88:	4a6e      	ldr	r2, [pc, #440]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a92:	4b6c      	ldr	r3, [pc, #432]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a98:	4a6a      	ldr	r2, [pc, #424]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004aa2:	4a68      	ldr	r2, [pc, #416]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d016      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fd f994 	bl	8001de0 <HAL_GetTick>
 8004ab8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004aba:	e00b      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004abc:	f7fd f990 	bl	8001de0 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d902      	bls.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	74fb      	strb	r3, [r7, #19]
            break;
 8004ad2:	e006      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ad4:	4b5b      	ldr	r3, [pc, #364]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0ec      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004ae2:	7cfb      	ldrb	r3, [r7, #19]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10b      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ae8:	4b56      	ldr	r3, [pc, #344]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af6:	4953      	ldr	r1, [pc, #332]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004afe:	e004      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b00:	7cfb      	ldrb	r3, [r7, #19]
 8004b02:	74bb      	strb	r3, [r7, #18]
 8004b04:	e001      	b.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b06:	7cfb      	ldrb	r3, [r7, #19]
 8004b08:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b0a:	7c7b      	ldrb	r3, [r7, #17]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d105      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b10:	4b4c      	ldr	r3, [pc, #304]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b14:	4a4b      	ldr	r2, [pc, #300]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b1a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b28:	4b46      	ldr	r3, [pc, #280]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2e:	f023 0203 	bic.w	r2, r3, #3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	4943      	ldr	r1, [pc, #268]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b4a:	4b3e      	ldr	r3, [pc, #248]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b50:	f023 020c 	bic.w	r2, r3, #12
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	493a      	ldr	r1, [pc, #232]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0320 	and.w	r3, r3, #32
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b6c:	4b35      	ldr	r3, [pc, #212]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7a:	4932      	ldr	r1, [pc, #200]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b8e:	4b2d      	ldr	r3, [pc, #180]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9c:	4929      	ldr	r1, [pc, #164]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00a      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004bb0:	4b24      	ldr	r3, [pc, #144]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	4921      	ldr	r1, [pc, #132]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bd2:	4b1c      	ldr	r3, [pc, #112]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be0:	4918      	ldr	r1, [pc, #96]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00a      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bf4:	4b13      	ldr	r3, [pc, #76]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c02:	4910      	ldr	r1, [pc, #64]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d02c      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c16:	4b0b      	ldr	r3, [pc, #44]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	4907      	ldr	r1, [pc, #28]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c34:	d10a      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c36:	4b03      	ldr	r3, [pc, #12]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	4a02      	ldr	r2, [pc, #8]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004c3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c40:	60d3      	str	r3, [r2, #12]
 8004c42:	e015      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004c44:	40021000 	.word	0x40021000
 8004c48:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c54:	d10c      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f000 f871 	bl	8004d44 <RCCEx_PLLSAI1_Config>
 8004c62:	4603      	mov	r3, r0
 8004c64:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c66:	7cfb      	ldrb	r3, [r7, #19]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8004c6c:	7cfb      	ldrb	r3, [r7, #19]
 8004c6e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d028      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c7c:	4b30      	ldr	r3, [pc, #192]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8a:	492d      	ldr	r1, [pc, #180]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c9a:	d106      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c9c:	4b28      	ldr	r3, [pc, #160]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	4a27      	ldr	r2, [pc, #156]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004ca2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ca6:	60d3      	str	r3, [r2, #12]
 8004ca8:	e011      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004cb2:	d10c      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	2101      	movs	r1, #1
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 f842 	bl	8004d44 <RCCEx_PLLSAI1_Config>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cc4:	7cfb      	ldrb	r3, [r7, #19]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8004cca:	7cfb      	ldrb	r3, [r7, #19]
 8004ccc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d01c      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004cda:	4b19      	ldr	r3, [pc, #100]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce8:	4915      	ldr	r1, [pc, #84]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cf8:	d10c      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	2102      	movs	r1, #2
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 f81f 	bl	8004d44 <RCCEx_PLLSAI1_Config>
 8004d06:	4603      	mov	r3, r0
 8004d08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d0a:	7cfb      	ldrb	r3, [r7, #19]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d001      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004d10:	7cfb      	ldrb	r3, [r7, #19]
 8004d12:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d20:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d26:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2e:	4904      	ldr	r1, [pc, #16]	; (8004d40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d36:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3718      	adds	r7, #24
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40021000 	.word	0x40021000

08004d44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d52:	4b74      	ldr	r3, [pc, #464]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d018      	beq.n	8004d90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d5e:	4b71      	ldr	r3, [pc, #452]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f003 0203 	and.w	r2, r3, #3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d10d      	bne.n	8004d8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
       ||
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d009      	beq.n	8004d8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004d76:	4b6b      	ldr	r3, [pc, #428]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	091b      	lsrs	r3, r3, #4
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
       ||
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d047      	beq.n	8004e1a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	73fb      	strb	r3, [r7, #15]
 8004d8e:	e044      	b.n	8004e1a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d018      	beq.n	8004dca <RCCEx_PLLSAI1_Config+0x86>
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d825      	bhi.n	8004de8 <RCCEx_PLLSAI1_Config+0xa4>
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d002      	beq.n	8004da6 <RCCEx_PLLSAI1_Config+0x62>
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d009      	beq.n	8004db8 <RCCEx_PLLSAI1_Config+0x74>
 8004da4:	e020      	b.n	8004de8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004da6:	4b5f      	ldr	r3, [pc, #380]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d11d      	bne.n	8004dee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004db6:	e01a      	b.n	8004dee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004db8:	4b5a      	ldr	r3, [pc, #360]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d116      	bne.n	8004df2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dc8:	e013      	b.n	8004df2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004dca:	4b56      	ldr	r3, [pc, #344]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10f      	bne.n	8004df6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004dd6:	4b53      	ldr	r3, [pc, #332]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d109      	bne.n	8004df6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004de6:	e006      	b.n	8004df6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	73fb      	strb	r3, [r7, #15]
      break;
 8004dec:	e004      	b.n	8004df8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dee:	bf00      	nop
 8004df0:	e002      	b.n	8004df8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004df2:	bf00      	nop
 8004df4:	e000      	b.n	8004df8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004df6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004df8:	7bfb      	ldrb	r3, [r7, #15]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10d      	bne.n	8004e1a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004dfe:	4b49      	ldr	r3, [pc, #292]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6819      	ldr	r1, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	011b      	lsls	r3, r3, #4
 8004e12:	430b      	orrs	r3, r1
 8004e14:	4943      	ldr	r1, [pc, #268]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d17c      	bne.n	8004f1a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e20:	4b40      	ldr	r3, [pc, #256]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a3f      	ldr	r2, [pc, #252]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e2c:	f7fc ffd8 	bl	8001de0 <HAL_GetTick>
 8004e30:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e32:	e009      	b.n	8004e48 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e34:	f7fc ffd4 	bl	8001de0 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d902      	bls.n	8004e48 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	73fb      	strb	r3, [r7, #15]
        break;
 8004e46:	e005      	b.n	8004e54 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e48:	4b36      	ldr	r3, [pc, #216]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1ef      	bne.n	8004e34 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d15f      	bne.n	8004f1a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d110      	bne.n	8004e82 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e60:	4b30      	ldr	r3, [pc, #192]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004e68:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	6892      	ldr	r2, [r2, #8]
 8004e70:	0211      	lsls	r1, r2, #8
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	68d2      	ldr	r2, [r2, #12]
 8004e76:	06d2      	lsls	r2, r2, #27
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	492a      	ldr	r1, [pc, #168]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	610b      	str	r3, [r1, #16]
 8004e80:	e027      	b.n	8004ed2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d112      	bne.n	8004eae <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e88:	4b26      	ldr	r3, [pc, #152]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004e90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6892      	ldr	r2, [r2, #8]
 8004e98:	0211      	lsls	r1, r2, #8
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6912      	ldr	r2, [r2, #16]
 8004e9e:	0852      	lsrs	r2, r2, #1
 8004ea0:	3a01      	subs	r2, #1
 8004ea2:	0552      	lsls	r2, r2, #21
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	491f      	ldr	r1, [pc, #124]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	610b      	str	r3, [r1, #16]
 8004eac:	e011      	b.n	8004ed2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004eae:	4b1d      	ldr	r3, [pc, #116]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004eb6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6892      	ldr	r2, [r2, #8]
 8004ebe:	0211      	lsls	r1, r2, #8
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6952      	ldr	r2, [r2, #20]
 8004ec4:	0852      	lsrs	r2, r2, #1
 8004ec6:	3a01      	subs	r2, #1
 8004ec8:	0652      	lsls	r2, r2, #25
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	4915      	ldr	r1, [pc, #84]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ed2:	4b14      	ldr	r3, [pc, #80]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a13      	ldr	r2, [pc, #76]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ed8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004edc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ede:	f7fc ff7f 	bl	8001de0 <HAL_GetTick>
 8004ee2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ee4:	e009      	b.n	8004efa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ee6:	f7fc ff7b 	bl	8001de0 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d902      	bls.n	8004efa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	73fb      	strb	r3, [r7, #15]
          break;
 8004ef8:	e005      	b.n	8004f06 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004efa:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0ef      	beq.n	8004ee6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d106      	bne.n	8004f1a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f0c:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f0e:	691a      	ldr	r2, [r3, #16]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	4903      	ldr	r1, [pc, #12]	; (8004f24 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	40021000 	.word	0x40021000

08004f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e049      	b.n	8004fce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f7fc fd22 	bl	8001998 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3304      	adds	r3, #4
 8004f64:	4619      	mov	r1, r3
 8004f66:	4610      	mov	r0, r2
 8004f68:	f000 fa4c 	bl	8005404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b082      	sub	sp, #8
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d122      	bne.n	8005032 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d11b      	bne.n	8005032 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f06f 0202 	mvn.w	r2, #2
 8005002:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	f003 0303 	and.w	r3, r3, #3
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f9d5 	bl	80053c8 <HAL_TIM_IC_CaptureCallback>
 800501e:	e005      	b.n	800502c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f9c7 	bl	80053b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f9d8 	bl	80053dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	f003 0304 	and.w	r3, r3, #4
 800503c:	2b04      	cmp	r3, #4
 800503e:	d122      	bne.n	8005086 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f003 0304 	and.w	r3, r3, #4
 800504a:	2b04      	cmp	r3, #4
 800504c:	d11b      	bne.n	8005086 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f06f 0204 	mvn.w	r2, #4
 8005056:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f9ab 	bl	80053c8 <HAL_TIM_IC_CaptureCallback>
 8005072:	e005      	b.n	8005080 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f99d 	bl	80053b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f9ae 	bl	80053dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	f003 0308 	and.w	r3, r3, #8
 8005090:	2b08      	cmp	r3, #8
 8005092:	d122      	bne.n	80050da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f003 0308 	and.w	r3, r3, #8
 800509e:	2b08      	cmp	r3, #8
 80050a0:	d11b      	bne.n	80050da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f06f 0208 	mvn.w	r2, #8
 80050aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2204      	movs	r2, #4
 80050b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	f003 0303 	and.w	r3, r3, #3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d003      	beq.n	80050c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f981 	bl	80053c8 <HAL_TIM_IC_CaptureCallback>
 80050c6:	e005      	b.n	80050d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f973 	bl	80053b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f984 	bl	80053dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	f003 0310 	and.w	r3, r3, #16
 80050e4:	2b10      	cmp	r3, #16
 80050e6:	d122      	bne.n	800512e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f003 0310 	and.w	r3, r3, #16
 80050f2:	2b10      	cmp	r3, #16
 80050f4:	d11b      	bne.n	800512e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f06f 0210 	mvn.w	r2, #16
 80050fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2208      	movs	r2, #8
 8005104:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005110:	2b00      	cmp	r3, #0
 8005112:	d003      	beq.n	800511c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f957 	bl	80053c8 <HAL_TIM_IC_CaptureCallback>
 800511a:	e005      	b.n	8005128 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f949 	bl	80053b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f95a 	bl	80053dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b01      	cmp	r3, #1
 800513a:	d10e      	bne.n	800515a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f003 0301 	and.w	r3, r3, #1
 8005146:	2b01      	cmp	r3, #1
 8005148:	d107      	bne.n	800515a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f06f 0201 	mvn.w	r2, #1
 8005152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f923 	bl	80053a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005164:	2b80      	cmp	r3, #128	; 0x80
 8005166:	d10e      	bne.n	8005186 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005172:	2b80      	cmp	r3, #128	; 0x80
 8005174:	d107      	bne.n	8005186 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800517e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 faad 	bl	80056e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005194:	d10e      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a0:	2b80      	cmp	r3, #128	; 0x80
 80051a2:	d107      	bne.n	80051b4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80051ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 faa0 	bl	80056f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051be:	2b40      	cmp	r3, #64	; 0x40
 80051c0:	d10e      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051cc:	2b40      	cmp	r3, #64	; 0x40
 80051ce:	d107      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f908 	bl	80053f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b20      	cmp	r3, #32
 80051ec:	d10e      	bne.n	800520c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0320 	and.w	r3, r3, #32
 80051f8:	2b20      	cmp	r3, #32
 80051fa:	d107      	bne.n	800520c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0220 	mvn.w	r2, #32
 8005204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fa60 	bl	80056cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800520c:	bf00      	nop
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005224:	2b01      	cmp	r3, #1
 8005226:	d101      	bne.n	800522c <HAL_TIM_ConfigClockSource+0x18>
 8005228:	2302      	movs	r3, #2
 800522a:	e0b5      	b.n	8005398 <HAL_TIM_ConfigClockSource+0x184>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800524a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800524e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005256:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005268:	d03e      	beq.n	80052e8 <HAL_TIM_ConfigClockSource+0xd4>
 800526a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800526e:	f200 8087 	bhi.w	8005380 <HAL_TIM_ConfigClockSource+0x16c>
 8005272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005276:	f000 8085 	beq.w	8005384 <HAL_TIM_ConfigClockSource+0x170>
 800527a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800527e:	d87f      	bhi.n	8005380 <HAL_TIM_ConfigClockSource+0x16c>
 8005280:	2b70      	cmp	r3, #112	; 0x70
 8005282:	d01a      	beq.n	80052ba <HAL_TIM_ConfigClockSource+0xa6>
 8005284:	2b70      	cmp	r3, #112	; 0x70
 8005286:	d87b      	bhi.n	8005380 <HAL_TIM_ConfigClockSource+0x16c>
 8005288:	2b60      	cmp	r3, #96	; 0x60
 800528a:	d050      	beq.n	800532e <HAL_TIM_ConfigClockSource+0x11a>
 800528c:	2b60      	cmp	r3, #96	; 0x60
 800528e:	d877      	bhi.n	8005380 <HAL_TIM_ConfigClockSource+0x16c>
 8005290:	2b50      	cmp	r3, #80	; 0x50
 8005292:	d03c      	beq.n	800530e <HAL_TIM_ConfigClockSource+0xfa>
 8005294:	2b50      	cmp	r3, #80	; 0x50
 8005296:	d873      	bhi.n	8005380 <HAL_TIM_ConfigClockSource+0x16c>
 8005298:	2b40      	cmp	r3, #64	; 0x40
 800529a:	d058      	beq.n	800534e <HAL_TIM_ConfigClockSource+0x13a>
 800529c:	2b40      	cmp	r3, #64	; 0x40
 800529e:	d86f      	bhi.n	8005380 <HAL_TIM_ConfigClockSource+0x16c>
 80052a0:	2b30      	cmp	r3, #48	; 0x30
 80052a2:	d064      	beq.n	800536e <HAL_TIM_ConfigClockSource+0x15a>
 80052a4:	2b30      	cmp	r3, #48	; 0x30
 80052a6:	d86b      	bhi.n	8005380 <HAL_TIM_ConfigClockSource+0x16c>
 80052a8:	2b20      	cmp	r3, #32
 80052aa:	d060      	beq.n	800536e <HAL_TIM_ConfigClockSource+0x15a>
 80052ac:	2b20      	cmp	r3, #32
 80052ae:	d867      	bhi.n	8005380 <HAL_TIM_ConfigClockSource+0x16c>
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d05c      	beq.n	800536e <HAL_TIM_ConfigClockSource+0x15a>
 80052b4:	2b10      	cmp	r3, #16
 80052b6:	d05a      	beq.n	800536e <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80052b8:	e062      	b.n	8005380 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6818      	ldr	r0, [r3, #0]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	6899      	ldr	r1, [r3, #8]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f000 f979 	bl	80055c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	609a      	str	r2, [r3, #8]
      break;
 80052e6:	e04e      	b.n	8005386 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6818      	ldr	r0, [r3, #0]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	6899      	ldr	r1, [r3, #8]
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f000 f962 	bl	80055c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	689a      	ldr	r2, [r3, #8]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800530a:	609a      	str	r2, [r3, #8]
      break;
 800530c:	e03b      	b.n	8005386 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6818      	ldr	r0, [r3, #0]
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	6859      	ldr	r1, [r3, #4]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	461a      	mov	r2, r3
 800531c:	f000 f8d6 	bl	80054cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2150      	movs	r1, #80	; 0x50
 8005326:	4618      	mov	r0, r3
 8005328:	f000 f92f 	bl	800558a <TIM_ITRx_SetConfig>
      break;
 800532c:	e02b      	b.n	8005386 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6818      	ldr	r0, [r3, #0]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	6859      	ldr	r1, [r3, #4]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	461a      	mov	r2, r3
 800533c:	f000 f8f5 	bl	800552a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2160      	movs	r1, #96	; 0x60
 8005346:	4618      	mov	r0, r3
 8005348:	f000 f91f 	bl	800558a <TIM_ITRx_SetConfig>
      break;
 800534c:	e01b      	b.n	8005386 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	6859      	ldr	r1, [r3, #4]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	461a      	mov	r2, r3
 800535c:	f000 f8b6 	bl	80054cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2140      	movs	r1, #64	; 0x40
 8005366:	4618      	mov	r0, r3
 8005368:	f000 f90f 	bl	800558a <TIM_ITRx_SetConfig>
      break;
 800536c:	e00b      	b.n	8005386 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4619      	mov	r1, r3
 8005378:	4610      	mov	r0, r2
 800537a:	f000 f906 	bl	800558a <TIM_ITRx_SetConfig>
        break;
 800537e:	e002      	b.n	8005386 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005380:	bf00      	nop
 8005382:	e000      	b.n	8005386 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005384:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005404:	b480      	push	{r7}
 8005406:	b085      	sub	sp, #20
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a2a      	ldr	r2, [pc, #168]	; (80054c0 <TIM_Base_SetConfig+0xbc>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d003      	beq.n	8005424 <TIM_Base_SetConfig+0x20>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005422:	d108      	bne.n	8005436 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a21      	ldr	r2, [pc, #132]	; (80054c0 <TIM_Base_SetConfig+0xbc>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d00b      	beq.n	8005456 <TIM_Base_SetConfig+0x52>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005444:	d007      	beq.n	8005456 <TIM_Base_SetConfig+0x52>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a1e      	ldr	r2, [pc, #120]	; (80054c4 <TIM_Base_SetConfig+0xc0>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d003      	beq.n	8005456 <TIM_Base_SetConfig+0x52>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a1d      	ldr	r2, [pc, #116]	; (80054c8 <TIM_Base_SetConfig+0xc4>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d108      	bne.n	8005468 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800545c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	4313      	orrs	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	4313      	orrs	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a0c      	ldr	r2, [pc, #48]	; (80054c0 <TIM_Base_SetConfig+0xbc>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d007      	beq.n	80054a4 <TIM_Base_SetConfig+0xa0>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a0b      	ldr	r2, [pc, #44]	; (80054c4 <TIM_Base_SetConfig+0xc0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d003      	beq.n	80054a4 <TIM_Base_SetConfig+0xa0>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a0a      	ldr	r2, [pc, #40]	; (80054c8 <TIM_Base_SetConfig+0xc4>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d103      	bne.n	80054ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	691a      	ldr	r2, [r3, #16]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	615a      	str	r2, [r3, #20]
}
 80054b2:	bf00      	nop
 80054b4:	3714      	adds	r7, #20
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	40012c00 	.word	0x40012c00
 80054c4:	40014000 	.word	0x40014000
 80054c8:	40014400 	.word	0x40014400

080054cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a1b      	ldr	r3, [r3, #32]
 80054dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	f023 0201 	bic.w	r2, r3, #1
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4313      	orrs	r3, r2
 8005500:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f023 030a 	bic.w	r3, r3, #10
 8005508:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	4313      	orrs	r3, r2
 8005510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	621a      	str	r2, [r3, #32]
}
 800551e:	bf00      	nop
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800552a:	b480      	push	{r7}
 800552c:	b087      	sub	sp, #28
 800552e:	af00      	add	r7, sp, #0
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	f023 0210 	bic.w	r2, r3, #16
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005554:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	031b      	lsls	r3, r3, #12
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	4313      	orrs	r3, r2
 800555e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005566:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4313      	orrs	r3, r2
 8005570:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	621a      	str	r2, [r3, #32]
}
 800557e:	bf00      	nop
 8005580:	371c      	adds	r7, #28
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800558a:	b480      	push	{r7}
 800558c:	b085      	sub	sp, #20
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
 8005592:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f043 0307 	orr.w	r3, r3, #7
 80055ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	609a      	str	r2, [r3, #8]
}
 80055b4:	bf00      	nop
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
 80055cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	021a      	lsls	r2, r3, #8
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	609a      	str	r2, [r3, #8]
}
 80055f4:	bf00      	nop
 80055f6:	371c      	adds	r7, #28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005614:	2302      	movs	r3, #2
 8005616:	e04f      	b.n	80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a21      	ldr	r2, [pc, #132]	; (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d108      	bne.n	8005654 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005648:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	4313      	orrs	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a14      	ldr	r2, [pc, #80]	; (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d009      	beq.n	800568c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005680:	d004      	beq.n	800568c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a10      	ldr	r2, [pc, #64]	; (80056c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d10c      	bne.n	80056a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005692:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	4313      	orrs	r3, r2
 800569c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	40012c00 	.word	0x40012c00
 80056c8:	40014000 	.word	0x40014000

080056cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e040      	b.n	800579c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800571e:	2b00      	cmp	r3, #0
 8005720:	d106      	bne.n	8005730 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fc f958 	bl	80019e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2224      	movs	r2, #36	; 0x24
 8005734:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 0201 	bic.w	r2, r2, #1
 8005744:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 f82c 	bl	80057a4 <UART_SetConfig>
 800574c:	4603      	mov	r3, r0
 800574e:	2b01      	cmp	r3, #1
 8005750:	d101      	bne.n	8005756 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e022      	b.n	800579c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fa2c 	bl	8005bbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	685a      	ldr	r2, [r3, #4]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005772:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005782:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fab3 	bl	8005d00 <UART_CheckIdleState>
 800579a:	4603      	mov	r3, r0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057a4:	b5b0      	push	{r4, r5, r7, lr}
 80057a6:	b088      	sub	sp, #32
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057ac:	2300      	movs	r3, #0
 80057ae:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	431a      	orrs	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	431a      	orrs	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	69db      	ldr	r3, [r3, #28]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	4baf      	ldr	r3, [pc, #700]	; (8005a8c <UART_SetConfig+0x2e8>)
 80057d0:	4013      	ands	r3, r2
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	6812      	ldr	r2, [r2, #0]
 80057d6:	69f9      	ldr	r1, [r7, #28]
 80057d8:	430b      	orrs	r3, r1
 80057da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4aa4      	ldr	r2, [pc, #656]	; (8005a90 <UART_SetConfig+0x2ec>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d004      	beq.n	800580c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	69fa      	ldr	r2, [r7, #28]
 8005808:	4313      	orrs	r3, r2
 800580a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	69fa      	ldr	r2, [r7, #28]
 800581c:	430a      	orrs	r2, r1
 800581e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a9b      	ldr	r2, [pc, #620]	; (8005a94 <UART_SetConfig+0x2f0>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d121      	bne.n	800586e <UART_SetConfig+0xca>
 800582a:	4b9b      	ldr	r3, [pc, #620]	; (8005a98 <UART_SetConfig+0x2f4>)
 800582c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005830:	f003 0303 	and.w	r3, r3, #3
 8005834:	2b03      	cmp	r3, #3
 8005836:	d817      	bhi.n	8005868 <UART_SetConfig+0xc4>
 8005838:	a201      	add	r2, pc, #4	; (adr r2, 8005840 <UART_SetConfig+0x9c>)
 800583a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583e:	bf00      	nop
 8005840:	08005851 	.word	0x08005851
 8005844:	0800585d 	.word	0x0800585d
 8005848:	08005857 	.word	0x08005857
 800584c:	08005863 	.word	0x08005863
 8005850:	2301      	movs	r3, #1
 8005852:	76fb      	strb	r3, [r7, #27]
 8005854:	e070      	b.n	8005938 <UART_SetConfig+0x194>
 8005856:	2302      	movs	r3, #2
 8005858:	76fb      	strb	r3, [r7, #27]
 800585a:	e06d      	b.n	8005938 <UART_SetConfig+0x194>
 800585c:	2304      	movs	r3, #4
 800585e:	76fb      	strb	r3, [r7, #27]
 8005860:	e06a      	b.n	8005938 <UART_SetConfig+0x194>
 8005862:	2308      	movs	r3, #8
 8005864:	76fb      	strb	r3, [r7, #27]
 8005866:	e067      	b.n	8005938 <UART_SetConfig+0x194>
 8005868:	2310      	movs	r3, #16
 800586a:	76fb      	strb	r3, [r7, #27]
 800586c:	e064      	b.n	8005938 <UART_SetConfig+0x194>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a8a      	ldr	r2, [pc, #552]	; (8005a9c <UART_SetConfig+0x2f8>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d132      	bne.n	80058de <UART_SetConfig+0x13a>
 8005878:	4b87      	ldr	r3, [pc, #540]	; (8005a98 <UART_SetConfig+0x2f4>)
 800587a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587e:	f003 030c 	and.w	r3, r3, #12
 8005882:	2b0c      	cmp	r3, #12
 8005884:	d828      	bhi.n	80058d8 <UART_SetConfig+0x134>
 8005886:	a201      	add	r2, pc, #4	; (adr r2, 800588c <UART_SetConfig+0xe8>)
 8005888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588c:	080058c1 	.word	0x080058c1
 8005890:	080058d9 	.word	0x080058d9
 8005894:	080058d9 	.word	0x080058d9
 8005898:	080058d9 	.word	0x080058d9
 800589c:	080058cd 	.word	0x080058cd
 80058a0:	080058d9 	.word	0x080058d9
 80058a4:	080058d9 	.word	0x080058d9
 80058a8:	080058d9 	.word	0x080058d9
 80058ac:	080058c7 	.word	0x080058c7
 80058b0:	080058d9 	.word	0x080058d9
 80058b4:	080058d9 	.word	0x080058d9
 80058b8:	080058d9 	.word	0x080058d9
 80058bc:	080058d3 	.word	0x080058d3
 80058c0:	2300      	movs	r3, #0
 80058c2:	76fb      	strb	r3, [r7, #27]
 80058c4:	e038      	b.n	8005938 <UART_SetConfig+0x194>
 80058c6:	2302      	movs	r3, #2
 80058c8:	76fb      	strb	r3, [r7, #27]
 80058ca:	e035      	b.n	8005938 <UART_SetConfig+0x194>
 80058cc:	2304      	movs	r3, #4
 80058ce:	76fb      	strb	r3, [r7, #27]
 80058d0:	e032      	b.n	8005938 <UART_SetConfig+0x194>
 80058d2:	2308      	movs	r3, #8
 80058d4:	76fb      	strb	r3, [r7, #27]
 80058d6:	e02f      	b.n	8005938 <UART_SetConfig+0x194>
 80058d8:	2310      	movs	r3, #16
 80058da:	76fb      	strb	r3, [r7, #27]
 80058dc:	e02c      	b.n	8005938 <UART_SetConfig+0x194>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a6b      	ldr	r2, [pc, #428]	; (8005a90 <UART_SetConfig+0x2ec>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d125      	bne.n	8005934 <UART_SetConfig+0x190>
 80058e8:	4b6b      	ldr	r3, [pc, #428]	; (8005a98 <UART_SetConfig+0x2f4>)
 80058ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ee:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058f6:	d017      	beq.n	8005928 <UART_SetConfig+0x184>
 80058f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80058fc:	d817      	bhi.n	800592e <UART_SetConfig+0x18a>
 80058fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005902:	d00b      	beq.n	800591c <UART_SetConfig+0x178>
 8005904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005908:	d811      	bhi.n	800592e <UART_SetConfig+0x18a>
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <UART_SetConfig+0x172>
 800590e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005912:	d006      	beq.n	8005922 <UART_SetConfig+0x17e>
 8005914:	e00b      	b.n	800592e <UART_SetConfig+0x18a>
 8005916:	2300      	movs	r3, #0
 8005918:	76fb      	strb	r3, [r7, #27]
 800591a:	e00d      	b.n	8005938 <UART_SetConfig+0x194>
 800591c:	2302      	movs	r3, #2
 800591e:	76fb      	strb	r3, [r7, #27]
 8005920:	e00a      	b.n	8005938 <UART_SetConfig+0x194>
 8005922:	2304      	movs	r3, #4
 8005924:	76fb      	strb	r3, [r7, #27]
 8005926:	e007      	b.n	8005938 <UART_SetConfig+0x194>
 8005928:	2308      	movs	r3, #8
 800592a:	76fb      	strb	r3, [r7, #27]
 800592c:	e004      	b.n	8005938 <UART_SetConfig+0x194>
 800592e:	2310      	movs	r3, #16
 8005930:	76fb      	strb	r3, [r7, #27]
 8005932:	e001      	b.n	8005938 <UART_SetConfig+0x194>
 8005934:	2310      	movs	r3, #16
 8005936:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a54      	ldr	r2, [pc, #336]	; (8005a90 <UART_SetConfig+0x2ec>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d173      	bne.n	8005a2a <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005942:	7efb      	ldrb	r3, [r7, #27]
 8005944:	2b08      	cmp	r3, #8
 8005946:	d824      	bhi.n	8005992 <UART_SetConfig+0x1ee>
 8005948:	a201      	add	r2, pc, #4	; (adr r2, 8005950 <UART_SetConfig+0x1ac>)
 800594a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594e:	bf00      	nop
 8005950:	08005975 	.word	0x08005975
 8005954:	08005993 	.word	0x08005993
 8005958:	0800597d 	.word	0x0800597d
 800595c:	08005993 	.word	0x08005993
 8005960:	08005983 	.word	0x08005983
 8005964:	08005993 	.word	0x08005993
 8005968:	08005993 	.word	0x08005993
 800596c:	08005993 	.word	0x08005993
 8005970:	0800598b 	.word	0x0800598b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005974:	f7fe ff66 	bl	8004844 <HAL_RCC_GetPCLK1Freq>
 8005978:	6178      	str	r0, [r7, #20]
        break;
 800597a:	e00f      	b.n	800599c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800597c:	4b48      	ldr	r3, [pc, #288]	; (8005aa0 <UART_SetConfig+0x2fc>)
 800597e:	617b      	str	r3, [r7, #20]
        break;
 8005980:	e00c      	b.n	800599c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005982:	f7fe fec7 	bl	8004714 <HAL_RCC_GetSysClockFreq>
 8005986:	6178      	str	r0, [r7, #20]
        break;
 8005988:	e008      	b.n	800599c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800598a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800598e:	617b      	str	r3, [r7, #20]
        break;
 8005990:	e004      	b.n	800599c <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8005992:	2300      	movs	r3, #0
 8005994:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	76bb      	strb	r3, [r7, #26]
        break;
 800599a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 80fe 	beq.w	8005ba0 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	4613      	mov	r3, r2
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	4413      	add	r3, r2
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d305      	bcc.n	80059c0 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d902      	bls.n	80059c6 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	76bb      	strb	r3, [r7, #26]
 80059c4:	e0ec      	b.n	8005ba0 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f04f 0100 	mov.w	r1, #0
 80059ce:	f04f 0200 	mov.w	r2, #0
 80059d2:	f04f 0300 	mov.w	r3, #0
 80059d6:	020b      	lsls	r3, r1, #8
 80059d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80059dc:	0202      	lsls	r2, r0, #8
 80059de:	6879      	ldr	r1, [r7, #4]
 80059e0:	6849      	ldr	r1, [r1, #4]
 80059e2:	0849      	lsrs	r1, r1, #1
 80059e4:	4608      	mov	r0, r1
 80059e6:	f04f 0100 	mov.w	r1, #0
 80059ea:	1814      	adds	r4, r2, r0
 80059ec:	eb43 0501 	adc.w	r5, r3, r1
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	461a      	mov	r2, r3
 80059f6:	f04f 0300 	mov.w	r3, #0
 80059fa:	4620      	mov	r0, r4
 80059fc:	4629      	mov	r1, r5
 80059fe:	f7fb f923 	bl	8000c48 <__aeabi_uldivmod>
 8005a02:	4602      	mov	r2, r0
 8005a04:	460b      	mov	r3, r1
 8005a06:	4613      	mov	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a10:	d308      	bcc.n	8005a24 <UART_SetConfig+0x280>
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a18:	d204      	bcs.n	8005a24 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	60da      	str	r2, [r3, #12]
 8005a22:	e0bd      	b.n	8005ba0 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	76bb      	strb	r3, [r7, #26]
 8005a28:	e0ba      	b.n	8005ba0 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a32:	d168      	bne.n	8005b06 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8005a34:	7efb      	ldrb	r3, [r7, #27]
 8005a36:	2b08      	cmp	r3, #8
 8005a38:	d834      	bhi.n	8005aa4 <UART_SetConfig+0x300>
 8005a3a:	a201      	add	r2, pc, #4	; (adr r2, 8005a40 <UART_SetConfig+0x29c>)
 8005a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a40:	08005a65 	.word	0x08005a65
 8005a44:	08005a6d 	.word	0x08005a6d
 8005a48:	08005a75 	.word	0x08005a75
 8005a4c:	08005aa5 	.word	0x08005aa5
 8005a50:	08005a7b 	.word	0x08005a7b
 8005a54:	08005aa5 	.word	0x08005aa5
 8005a58:	08005aa5 	.word	0x08005aa5
 8005a5c:	08005aa5 	.word	0x08005aa5
 8005a60:	08005a83 	.word	0x08005a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a64:	f7fe feee 	bl	8004844 <HAL_RCC_GetPCLK1Freq>
 8005a68:	6178      	str	r0, [r7, #20]
        break;
 8005a6a:	e020      	b.n	8005aae <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a6c:	f7fe ff00 	bl	8004870 <HAL_RCC_GetPCLK2Freq>
 8005a70:	6178      	str	r0, [r7, #20]
        break;
 8005a72:	e01c      	b.n	8005aae <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a74:	4b0a      	ldr	r3, [pc, #40]	; (8005aa0 <UART_SetConfig+0x2fc>)
 8005a76:	617b      	str	r3, [r7, #20]
        break;
 8005a78:	e019      	b.n	8005aae <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a7a:	f7fe fe4b 	bl	8004714 <HAL_RCC_GetSysClockFreq>
 8005a7e:	6178      	str	r0, [r7, #20]
        break;
 8005a80:	e015      	b.n	8005aae <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a86:	617b      	str	r3, [r7, #20]
        break;
 8005a88:	e011      	b.n	8005aae <UART_SetConfig+0x30a>
 8005a8a:	bf00      	nop
 8005a8c:	efff69f3 	.word	0xefff69f3
 8005a90:	40008000 	.word	0x40008000
 8005a94:	40013800 	.word	0x40013800
 8005a98:	40021000 	.word	0x40021000
 8005a9c:	40004400 	.word	0x40004400
 8005aa0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	76bb      	strb	r3, [r7, #26]
        break;
 8005aac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d075      	beq.n	8005ba0 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	005a      	lsls	r2, r3, #1
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	085b      	lsrs	r3, r3, #1
 8005abe:	441a      	add	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	2b0f      	cmp	r3, #15
 8005ad0:	d916      	bls.n	8005b00 <UART_SetConfig+0x35c>
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad8:	d212      	bcs.n	8005b00 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	f023 030f 	bic.w	r3, r3, #15
 8005ae2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	085b      	lsrs	r3, r3, #1
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	f003 0307 	and.w	r3, r3, #7
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	89fb      	ldrh	r3, [r7, #14]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	89fa      	ldrh	r2, [r7, #14]
 8005afc:	60da      	str	r2, [r3, #12]
 8005afe:	e04f      	b.n	8005ba0 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	76bb      	strb	r3, [r7, #26]
 8005b04:	e04c      	b.n	8005ba0 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b06:	7efb      	ldrb	r3, [r7, #27]
 8005b08:	2b08      	cmp	r3, #8
 8005b0a:	d828      	bhi.n	8005b5e <UART_SetConfig+0x3ba>
 8005b0c:	a201      	add	r2, pc, #4	; (adr r2, 8005b14 <UART_SetConfig+0x370>)
 8005b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b12:	bf00      	nop
 8005b14:	08005b39 	.word	0x08005b39
 8005b18:	08005b41 	.word	0x08005b41
 8005b1c:	08005b49 	.word	0x08005b49
 8005b20:	08005b5f 	.word	0x08005b5f
 8005b24:	08005b4f 	.word	0x08005b4f
 8005b28:	08005b5f 	.word	0x08005b5f
 8005b2c:	08005b5f 	.word	0x08005b5f
 8005b30:	08005b5f 	.word	0x08005b5f
 8005b34:	08005b57 	.word	0x08005b57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b38:	f7fe fe84 	bl	8004844 <HAL_RCC_GetPCLK1Freq>
 8005b3c:	6178      	str	r0, [r7, #20]
        break;
 8005b3e:	e013      	b.n	8005b68 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b40:	f7fe fe96 	bl	8004870 <HAL_RCC_GetPCLK2Freq>
 8005b44:	6178      	str	r0, [r7, #20]
        break;
 8005b46:	e00f      	b.n	8005b68 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b48:	4b1b      	ldr	r3, [pc, #108]	; (8005bb8 <UART_SetConfig+0x414>)
 8005b4a:	617b      	str	r3, [r7, #20]
        break;
 8005b4c:	e00c      	b.n	8005b68 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b4e:	f7fe fde1 	bl	8004714 <HAL_RCC_GetSysClockFreq>
 8005b52:	6178      	str	r0, [r7, #20]
        break;
 8005b54:	e008      	b.n	8005b68 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b5a:	617b      	str	r3, [r7, #20]
        break;
 8005b5c:	e004      	b.n	8005b68 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	76bb      	strb	r3, [r7, #26]
        break;
 8005b66:	bf00      	nop
    }

    if (pclk != 0U)
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d018      	beq.n	8005ba0 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	085a      	lsrs	r2, r3, #1
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	441a      	add	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	2b0f      	cmp	r3, #15
 8005b88:	d908      	bls.n	8005b9c <UART_SetConfig+0x3f8>
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b90:	d204      	bcs.n	8005b9c <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	60da      	str	r2, [r3, #12]
 8005b9a:	e001      	b.n	8005ba0 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005bac:	7ebb      	ldrb	r3, [r7, #26]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3720      	adds	r7, #32
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	00f42400 	.word	0x00f42400

08005bbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00a      	beq.n	8005be6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bea:	f003 0302 	and.w	r3, r3, #2
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00a      	beq.n	8005c08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0c:	f003 0304 	and.w	r3, r3, #4
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00a      	beq.n	8005c2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	430a      	orrs	r2, r1
 8005c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	f003 0308 	and.w	r3, r3, #8
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00a      	beq.n	8005c4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c50:	f003 0310 	and.w	r3, r3, #16
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00a      	beq.n	8005c6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c72:	f003 0320 	and.w	r3, r3, #32
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00a      	beq.n	8005c90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d01a      	beq.n	8005cd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cba:	d10a      	bne.n	8005cd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00a      	beq.n	8005cf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	605a      	str	r2, [r3, #4]
  }
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af02      	add	r7, sp, #8
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d10:	f7fc f866 	bl	8001de0 <HAL_GetTick>
 8005d14:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0308 	and.w	r3, r3, #8
 8005d20:	2b08      	cmp	r3, #8
 8005d22:	d10e      	bne.n	8005d42 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f82d 	bl	8005d92 <UART_WaitOnFlagUntilTimeout>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e023      	b.n	8005d8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0304 	and.w	r3, r3, #4
 8005d4c:	2b04      	cmp	r3, #4
 8005d4e:	d10e      	bne.n	8005d6e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f817 	bl	8005d92 <UART_WaitOnFlagUntilTimeout>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e00d      	b.n	8005d8a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2220      	movs	r2, #32
 8005d72:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2220      	movs	r2, #32
 8005d78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b084      	sub	sp, #16
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	60f8      	str	r0, [r7, #12]
 8005d9a:	60b9      	str	r1, [r7, #8]
 8005d9c:	603b      	str	r3, [r7, #0]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005da2:	e05e      	b.n	8005e62 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005daa:	d05a      	beq.n	8005e62 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dac:	f7fc f818 	bl	8001de0 <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	69ba      	ldr	r2, [r7, #24]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d302      	bcc.n	8005dc2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d11b      	bne.n	8005dfa <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005dd0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0201 	bic.w	r2, r2, #1
 8005de0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2220      	movs	r2, #32
 8005de6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2220      	movs	r2, #32
 8005dec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e043      	b.n	8005e82 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0304 	and.w	r3, r3, #4
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d02c      	beq.n	8005e62 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e16:	d124      	bne.n	8005e62 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e20:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e30:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0201 	bic.w	r2, r2, #1
 8005e40:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2220      	movs	r2, #32
 8005e46:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2220      	movs	r2, #32
 8005e52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e00f      	b.n	8005e82 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69da      	ldr	r2, [r3, #28]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	bf0c      	ite	eq
 8005e72:	2301      	moveq	r3, #1
 8005e74:	2300      	movne	r3, #0
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	461a      	mov	r2, r3
 8005e7a:	79fb      	ldrb	r3, [r7, #7]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d091      	beq.n	8005da4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
	...

08005e8c <__errno>:
 8005e8c:	4b01      	ldr	r3, [pc, #4]	; (8005e94 <__errno+0x8>)
 8005e8e:	6818      	ldr	r0, [r3, #0]
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	20000014 	.word	0x20000014

08005e98 <__libc_init_array>:
 8005e98:	b570      	push	{r4, r5, r6, lr}
 8005e9a:	4d0d      	ldr	r5, [pc, #52]	; (8005ed0 <__libc_init_array+0x38>)
 8005e9c:	4c0d      	ldr	r4, [pc, #52]	; (8005ed4 <__libc_init_array+0x3c>)
 8005e9e:	1b64      	subs	r4, r4, r5
 8005ea0:	10a4      	asrs	r4, r4, #2
 8005ea2:	2600      	movs	r6, #0
 8005ea4:	42a6      	cmp	r6, r4
 8005ea6:	d109      	bne.n	8005ebc <__libc_init_array+0x24>
 8005ea8:	4d0b      	ldr	r5, [pc, #44]	; (8005ed8 <__libc_init_array+0x40>)
 8005eaa:	4c0c      	ldr	r4, [pc, #48]	; (8005edc <__libc_init_array+0x44>)
 8005eac:	f002 fece 	bl	8008c4c <_init>
 8005eb0:	1b64      	subs	r4, r4, r5
 8005eb2:	10a4      	asrs	r4, r4, #2
 8005eb4:	2600      	movs	r6, #0
 8005eb6:	42a6      	cmp	r6, r4
 8005eb8:	d105      	bne.n	8005ec6 <__libc_init_array+0x2e>
 8005eba:	bd70      	pop	{r4, r5, r6, pc}
 8005ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ec0:	4798      	blx	r3
 8005ec2:	3601      	adds	r6, #1
 8005ec4:	e7ee      	b.n	8005ea4 <__libc_init_array+0xc>
 8005ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005eca:	4798      	blx	r3
 8005ecc:	3601      	adds	r6, #1
 8005ece:	e7f2      	b.n	8005eb6 <__libc_init_array+0x1e>
 8005ed0:	08009e14 	.word	0x08009e14
 8005ed4:	08009e14 	.word	0x08009e14
 8005ed8:	08009e14 	.word	0x08009e14
 8005edc:	08009e18 	.word	0x08009e18

08005ee0 <memset>:
 8005ee0:	4402      	add	r2, r0
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d100      	bne.n	8005eea <memset+0xa>
 8005ee8:	4770      	bx	lr
 8005eea:	f803 1b01 	strb.w	r1, [r3], #1
 8005eee:	e7f9      	b.n	8005ee4 <memset+0x4>

08005ef0 <__cvt>:
 8005ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef4:	ec55 4b10 	vmov	r4, r5, d0
 8005ef8:	2d00      	cmp	r5, #0
 8005efa:	460e      	mov	r6, r1
 8005efc:	4619      	mov	r1, r3
 8005efe:	462b      	mov	r3, r5
 8005f00:	bfbb      	ittet	lt
 8005f02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005f06:	461d      	movlt	r5, r3
 8005f08:	2300      	movge	r3, #0
 8005f0a:	232d      	movlt	r3, #45	; 0x2d
 8005f0c:	700b      	strb	r3, [r1, #0]
 8005f0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f10:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005f14:	4691      	mov	r9, r2
 8005f16:	f023 0820 	bic.w	r8, r3, #32
 8005f1a:	bfbc      	itt	lt
 8005f1c:	4622      	movlt	r2, r4
 8005f1e:	4614      	movlt	r4, r2
 8005f20:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f24:	d005      	beq.n	8005f32 <__cvt+0x42>
 8005f26:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005f2a:	d100      	bne.n	8005f2e <__cvt+0x3e>
 8005f2c:	3601      	adds	r6, #1
 8005f2e:	2102      	movs	r1, #2
 8005f30:	e000      	b.n	8005f34 <__cvt+0x44>
 8005f32:	2103      	movs	r1, #3
 8005f34:	ab03      	add	r3, sp, #12
 8005f36:	9301      	str	r3, [sp, #4]
 8005f38:	ab02      	add	r3, sp, #8
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	ec45 4b10 	vmov	d0, r4, r5
 8005f40:	4653      	mov	r3, sl
 8005f42:	4632      	mov	r2, r6
 8005f44:	f000 fd04 	bl	8006950 <_dtoa_r>
 8005f48:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005f4c:	4607      	mov	r7, r0
 8005f4e:	d102      	bne.n	8005f56 <__cvt+0x66>
 8005f50:	f019 0f01 	tst.w	r9, #1
 8005f54:	d022      	beq.n	8005f9c <__cvt+0xac>
 8005f56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f5a:	eb07 0906 	add.w	r9, r7, r6
 8005f5e:	d110      	bne.n	8005f82 <__cvt+0x92>
 8005f60:	783b      	ldrb	r3, [r7, #0]
 8005f62:	2b30      	cmp	r3, #48	; 0x30
 8005f64:	d10a      	bne.n	8005f7c <__cvt+0x8c>
 8005f66:	2200      	movs	r2, #0
 8005f68:	2300      	movs	r3, #0
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	4629      	mov	r1, r5
 8005f6e:	f7fa fdab 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f72:	b918      	cbnz	r0, 8005f7c <__cvt+0x8c>
 8005f74:	f1c6 0601 	rsb	r6, r6, #1
 8005f78:	f8ca 6000 	str.w	r6, [sl]
 8005f7c:	f8da 3000 	ldr.w	r3, [sl]
 8005f80:	4499      	add	r9, r3
 8005f82:	2200      	movs	r2, #0
 8005f84:	2300      	movs	r3, #0
 8005f86:	4620      	mov	r0, r4
 8005f88:	4629      	mov	r1, r5
 8005f8a:	f7fa fd9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f8e:	b108      	cbz	r0, 8005f94 <__cvt+0xa4>
 8005f90:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f94:	2230      	movs	r2, #48	; 0x30
 8005f96:	9b03      	ldr	r3, [sp, #12]
 8005f98:	454b      	cmp	r3, r9
 8005f9a:	d307      	bcc.n	8005fac <__cvt+0xbc>
 8005f9c:	9b03      	ldr	r3, [sp, #12]
 8005f9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fa0:	1bdb      	subs	r3, r3, r7
 8005fa2:	4638      	mov	r0, r7
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	b004      	add	sp, #16
 8005fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fac:	1c59      	adds	r1, r3, #1
 8005fae:	9103      	str	r1, [sp, #12]
 8005fb0:	701a      	strb	r2, [r3, #0]
 8005fb2:	e7f0      	b.n	8005f96 <__cvt+0xa6>

08005fb4 <__exponent>:
 8005fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2900      	cmp	r1, #0
 8005fba:	bfb8      	it	lt
 8005fbc:	4249      	neglt	r1, r1
 8005fbe:	f803 2b02 	strb.w	r2, [r3], #2
 8005fc2:	bfb4      	ite	lt
 8005fc4:	222d      	movlt	r2, #45	; 0x2d
 8005fc6:	222b      	movge	r2, #43	; 0x2b
 8005fc8:	2909      	cmp	r1, #9
 8005fca:	7042      	strb	r2, [r0, #1]
 8005fcc:	dd2a      	ble.n	8006024 <__exponent+0x70>
 8005fce:	f10d 0407 	add.w	r4, sp, #7
 8005fd2:	46a4      	mov	ip, r4
 8005fd4:	270a      	movs	r7, #10
 8005fd6:	46a6      	mov	lr, r4
 8005fd8:	460a      	mov	r2, r1
 8005fda:	fb91 f6f7 	sdiv	r6, r1, r7
 8005fde:	fb07 1516 	mls	r5, r7, r6, r1
 8005fe2:	3530      	adds	r5, #48	; 0x30
 8005fe4:	2a63      	cmp	r2, #99	; 0x63
 8005fe6:	f104 34ff 	add.w	r4, r4, #4294967295
 8005fea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005fee:	4631      	mov	r1, r6
 8005ff0:	dcf1      	bgt.n	8005fd6 <__exponent+0x22>
 8005ff2:	3130      	adds	r1, #48	; 0x30
 8005ff4:	f1ae 0502 	sub.w	r5, lr, #2
 8005ff8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005ffc:	1c44      	adds	r4, r0, #1
 8005ffe:	4629      	mov	r1, r5
 8006000:	4561      	cmp	r1, ip
 8006002:	d30a      	bcc.n	800601a <__exponent+0x66>
 8006004:	f10d 0209 	add.w	r2, sp, #9
 8006008:	eba2 020e 	sub.w	r2, r2, lr
 800600c:	4565      	cmp	r5, ip
 800600e:	bf88      	it	hi
 8006010:	2200      	movhi	r2, #0
 8006012:	4413      	add	r3, r2
 8006014:	1a18      	subs	r0, r3, r0
 8006016:	b003      	add	sp, #12
 8006018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800601a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800601e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006022:	e7ed      	b.n	8006000 <__exponent+0x4c>
 8006024:	2330      	movs	r3, #48	; 0x30
 8006026:	3130      	adds	r1, #48	; 0x30
 8006028:	7083      	strb	r3, [r0, #2]
 800602a:	70c1      	strb	r1, [r0, #3]
 800602c:	1d03      	adds	r3, r0, #4
 800602e:	e7f1      	b.n	8006014 <__exponent+0x60>

08006030 <_printf_float>:
 8006030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006034:	ed2d 8b02 	vpush	{d8}
 8006038:	b08d      	sub	sp, #52	; 0x34
 800603a:	460c      	mov	r4, r1
 800603c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006040:	4616      	mov	r6, r2
 8006042:	461f      	mov	r7, r3
 8006044:	4605      	mov	r5, r0
 8006046:	f001 fb65 	bl	8007714 <_localeconv_r>
 800604a:	f8d0 a000 	ldr.w	sl, [r0]
 800604e:	4650      	mov	r0, sl
 8006050:	f7fa f8be 	bl	80001d0 <strlen>
 8006054:	2300      	movs	r3, #0
 8006056:	930a      	str	r3, [sp, #40]	; 0x28
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	9305      	str	r3, [sp, #20]
 800605c:	f8d8 3000 	ldr.w	r3, [r8]
 8006060:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006064:	3307      	adds	r3, #7
 8006066:	f023 0307 	bic.w	r3, r3, #7
 800606a:	f103 0208 	add.w	r2, r3, #8
 800606e:	f8c8 2000 	str.w	r2, [r8]
 8006072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006076:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800607a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800607e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006082:	9307      	str	r3, [sp, #28]
 8006084:	f8cd 8018 	str.w	r8, [sp, #24]
 8006088:	ee08 0a10 	vmov	s16, r0
 800608c:	4b9f      	ldr	r3, [pc, #636]	; (800630c <_printf_float+0x2dc>)
 800608e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006092:	f04f 32ff 	mov.w	r2, #4294967295
 8006096:	f7fa fd49 	bl	8000b2c <__aeabi_dcmpun>
 800609a:	bb88      	cbnz	r0, 8006100 <_printf_float+0xd0>
 800609c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060a0:	4b9a      	ldr	r3, [pc, #616]	; (800630c <_printf_float+0x2dc>)
 80060a2:	f04f 32ff 	mov.w	r2, #4294967295
 80060a6:	f7fa fd23 	bl	8000af0 <__aeabi_dcmple>
 80060aa:	bb48      	cbnz	r0, 8006100 <_printf_float+0xd0>
 80060ac:	2200      	movs	r2, #0
 80060ae:	2300      	movs	r3, #0
 80060b0:	4640      	mov	r0, r8
 80060b2:	4649      	mov	r1, r9
 80060b4:	f7fa fd12 	bl	8000adc <__aeabi_dcmplt>
 80060b8:	b110      	cbz	r0, 80060c0 <_printf_float+0x90>
 80060ba:	232d      	movs	r3, #45	; 0x2d
 80060bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060c0:	4b93      	ldr	r3, [pc, #588]	; (8006310 <_printf_float+0x2e0>)
 80060c2:	4894      	ldr	r0, [pc, #592]	; (8006314 <_printf_float+0x2e4>)
 80060c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80060c8:	bf94      	ite	ls
 80060ca:	4698      	movls	r8, r3
 80060cc:	4680      	movhi	r8, r0
 80060ce:	2303      	movs	r3, #3
 80060d0:	6123      	str	r3, [r4, #16]
 80060d2:	9b05      	ldr	r3, [sp, #20]
 80060d4:	f023 0204 	bic.w	r2, r3, #4
 80060d8:	6022      	str	r2, [r4, #0]
 80060da:	f04f 0900 	mov.w	r9, #0
 80060de:	9700      	str	r7, [sp, #0]
 80060e0:	4633      	mov	r3, r6
 80060e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80060e4:	4621      	mov	r1, r4
 80060e6:	4628      	mov	r0, r5
 80060e8:	f000 f9d8 	bl	800649c <_printf_common>
 80060ec:	3001      	adds	r0, #1
 80060ee:	f040 8090 	bne.w	8006212 <_printf_float+0x1e2>
 80060f2:	f04f 30ff 	mov.w	r0, #4294967295
 80060f6:	b00d      	add	sp, #52	; 0x34
 80060f8:	ecbd 8b02 	vpop	{d8}
 80060fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006100:	4642      	mov	r2, r8
 8006102:	464b      	mov	r3, r9
 8006104:	4640      	mov	r0, r8
 8006106:	4649      	mov	r1, r9
 8006108:	f7fa fd10 	bl	8000b2c <__aeabi_dcmpun>
 800610c:	b140      	cbz	r0, 8006120 <_printf_float+0xf0>
 800610e:	464b      	mov	r3, r9
 8006110:	2b00      	cmp	r3, #0
 8006112:	bfbc      	itt	lt
 8006114:	232d      	movlt	r3, #45	; 0x2d
 8006116:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800611a:	487f      	ldr	r0, [pc, #508]	; (8006318 <_printf_float+0x2e8>)
 800611c:	4b7f      	ldr	r3, [pc, #508]	; (800631c <_printf_float+0x2ec>)
 800611e:	e7d1      	b.n	80060c4 <_printf_float+0x94>
 8006120:	6863      	ldr	r3, [r4, #4]
 8006122:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006126:	9206      	str	r2, [sp, #24]
 8006128:	1c5a      	adds	r2, r3, #1
 800612a:	d13f      	bne.n	80061ac <_printf_float+0x17c>
 800612c:	2306      	movs	r3, #6
 800612e:	6063      	str	r3, [r4, #4]
 8006130:	9b05      	ldr	r3, [sp, #20]
 8006132:	6861      	ldr	r1, [r4, #4]
 8006134:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006138:	2300      	movs	r3, #0
 800613a:	9303      	str	r3, [sp, #12]
 800613c:	ab0a      	add	r3, sp, #40	; 0x28
 800613e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006142:	ab09      	add	r3, sp, #36	; 0x24
 8006144:	ec49 8b10 	vmov	d0, r8, r9
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	6022      	str	r2, [r4, #0]
 800614c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006150:	4628      	mov	r0, r5
 8006152:	f7ff fecd 	bl	8005ef0 <__cvt>
 8006156:	9b06      	ldr	r3, [sp, #24]
 8006158:	9909      	ldr	r1, [sp, #36]	; 0x24
 800615a:	2b47      	cmp	r3, #71	; 0x47
 800615c:	4680      	mov	r8, r0
 800615e:	d108      	bne.n	8006172 <_printf_float+0x142>
 8006160:	1cc8      	adds	r0, r1, #3
 8006162:	db02      	blt.n	800616a <_printf_float+0x13a>
 8006164:	6863      	ldr	r3, [r4, #4]
 8006166:	4299      	cmp	r1, r3
 8006168:	dd41      	ble.n	80061ee <_printf_float+0x1be>
 800616a:	f1ab 0b02 	sub.w	fp, fp, #2
 800616e:	fa5f fb8b 	uxtb.w	fp, fp
 8006172:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006176:	d820      	bhi.n	80061ba <_printf_float+0x18a>
 8006178:	3901      	subs	r1, #1
 800617a:	465a      	mov	r2, fp
 800617c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006180:	9109      	str	r1, [sp, #36]	; 0x24
 8006182:	f7ff ff17 	bl	8005fb4 <__exponent>
 8006186:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006188:	1813      	adds	r3, r2, r0
 800618a:	2a01      	cmp	r2, #1
 800618c:	4681      	mov	r9, r0
 800618e:	6123      	str	r3, [r4, #16]
 8006190:	dc02      	bgt.n	8006198 <_printf_float+0x168>
 8006192:	6822      	ldr	r2, [r4, #0]
 8006194:	07d2      	lsls	r2, r2, #31
 8006196:	d501      	bpl.n	800619c <_printf_float+0x16c>
 8006198:	3301      	adds	r3, #1
 800619a:	6123      	str	r3, [r4, #16]
 800619c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d09c      	beq.n	80060de <_printf_float+0xae>
 80061a4:	232d      	movs	r3, #45	; 0x2d
 80061a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061aa:	e798      	b.n	80060de <_printf_float+0xae>
 80061ac:	9a06      	ldr	r2, [sp, #24]
 80061ae:	2a47      	cmp	r2, #71	; 0x47
 80061b0:	d1be      	bne.n	8006130 <_printf_float+0x100>
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1bc      	bne.n	8006130 <_printf_float+0x100>
 80061b6:	2301      	movs	r3, #1
 80061b8:	e7b9      	b.n	800612e <_printf_float+0xfe>
 80061ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80061be:	d118      	bne.n	80061f2 <_printf_float+0x1c2>
 80061c0:	2900      	cmp	r1, #0
 80061c2:	6863      	ldr	r3, [r4, #4]
 80061c4:	dd0b      	ble.n	80061de <_printf_float+0x1ae>
 80061c6:	6121      	str	r1, [r4, #16]
 80061c8:	b913      	cbnz	r3, 80061d0 <_printf_float+0x1a0>
 80061ca:	6822      	ldr	r2, [r4, #0]
 80061cc:	07d0      	lsls	r0, r2, #31
 80061ce:	d502      	bpl.n	80061d6 <_printf_float+0x1a6>
 80061d0:	3301      	adds	r3, #1
 80061d2:	440b      	add	r3, r1
 80061d4:	6123      	str	r3, [r4, #16]
 80061d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80061d8:	f04f 0900 	mov.w	r9, #0
 80061dc:	e7de      	b.n	800619c <_printf_float+0x16c>
 80061de:	b913      	cbnz	r3, 80061e6 <_printf_float+0x1b6>
 80061e0:	6822      	ldr	r2, [r4, #0]
 80061e2:	07d2      	lsls	r2, r2, #31
 80061e4:	d501      	bpl.n	80061ea <_printf_float+0x1ba>
 80061e6:	3302      	adds	r3, #2
 80061e8:	e7f4      	b.n	80061d4 <_printf_float+0x1a4>
 80061ea:	2301      	movs	r3, #1
 80061ec:	e7f2      	b.n	80061d4 <_printf_float+0x1a4>
 80061ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80061f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061f4:	4299      	cmp	r1, r3
 80061f6:	db05      	blt.n	8006204 <_printf_float+0x1d4>
 80061f8:	6823      	ldr	r3, [r4, #0]
 80061fa:	6121      	str	r1, [r4, #16]
 80061fc:	07d8      	lsls	r0, r3, #31
 80061fe:	d5ea      	bpl.n	80061d6 <_printf_float+0x1a6>
 8006200:	1c4b      	adds	r3, r1, #1
 8006202:	e7e7      	b.n	80061d4 <_printf_float+0x1a4>
 8006204:	2900      	cmp	r1, #0
 8006206:	bfd4      	ite	le
 8006208:	f1c1 0202 	rsble	r2, r1, #2
 800620c:	2201      	movgt	r2, #1
 800620e:	4413      	add	r3, r2
 8006210:	e7e0      	b.n	80061d4 <_printf_float+0x1a4>
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	055a      	lsls	r2, r3, #21
 8006216:	d407      	bmi.n	8006228 <_printf_float+0x1f8>
 8006218:	6923      	ldr	r3, [r4, #16]
 800621a:	4642      	mov	r2, r8
 800621c:	4631      	mov	r1, r6
 800621e:	4628      	mov	r0, r5
 8006220:	47b8      	blx	r7
 8006222:	3001      	adds	r0, #1
 8006224:	d12c      	bne.n	8006280 <_printf_float+0x250>
 8006226:	e764      	b.n	80060f2 <_printf_float+0xc2>
 8006228:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800622c:	f240 80e0 	bls.w	80063f0 <_printf_float+0x3c0>
 8006230:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006234:	2200      	movs	r2, #0
 8006236:	2300      	movs	r3, #0
 8006238:	f7fa fc46 	bl	8000ac8 <__aeabi_dcmpeq>
 800623c:	2800      	cmp	r0, #0
 800623e:	d034      	beq.n	80062aa <_printf_float+0x27a>
 8006240:	4a37      	ldr	r2, [pc, #220]	; (8006320 <_printf_float+0x2f0>)
 8006242:	2301      	movs	r3, #1
 8006244:	4631      	mov	r1, r6
 8006246:	4628      	mov	r0, r5
 8006248:	47b8      	blx	r7
 800624a:	3001      	adds	r0, #1
 800624c:	f43f af51 	beq.w	80060f2 <_printf_float+0xc2>
 8006250:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006254:	429a      	cmp	r2, r3
 8006256:	db02      	blt.n	800625e <_printf_float+0x22e>
 8006258:	6823      	ldr	r3, [r4, #0]
 800625a:	07d8      	lsls	r0, r3, #31
 800625c:	d510      	bpl.n	8006280 <_printf_float+0x250>
 800625e:	ee18 3a10 	vmov	r3, s16
 8006262:	4652      	mov	r2, sl
 8006264:	4631      	mov	r1, r6
 8006266:	4628      	mov	r0, r5
 8006268:	47b8      	blx	r7
 800626a:	3001      	adds	r0, #1
 800626c:	f43f af41 	beq.w	80060f2 <_printf_float+0xc2>
 8006270:	f04f 0800 	mov.w	r8, #0
 8006274:	f104 091a 	add.w	r9, r4, #26
 8006278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800627a:	3b01      	subs	r3, #1
 800627c:	4543      	cmp	r3, r8
 800627e:	dc09      	bgt.n	8006294 <_printf_float+0x264>
 8006280:	6823      	ldr	r3, [r4, #0]
 8006282:	079b      	lsls	r3, r3, #30
 8006284:	f100 8105 	bmi.w	8006492 <_printf_float+0x462>
 8006288:	68e0      	ldr	r0, [r4, #12]
 800628a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800628c:	4298      	cmp	r0, r3
 800628e:	bfb8      	it	lt
 8006290:	4618      	movlt	r0, r3
 8006292:	e730      	b.n	80060f6 <_printf_float+0xc6>
 8006294:	2301      	movs	r3, #1
 8006296:	464a      	mov	r2, r9
 8006298:	4631      	mov	r1, r6
 800629a:	4628      	mov	r0, r5
 800629c:	47b8      	blx	r7
 800629e:	3001      	adds	r0, #1
 80062a0:	f43f af27 	beq.w	80060f2 <_printf_float+0xc2>
 80062a4:	f108 0801 	add.w	r8, r8, #1
 80062a8:	e7e6      	b.n	8006278 <_printf_float+0x248>
 80062aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	dc39      	bgt.n	8006324 <_printf_float+0x2f4>
 80062b0:	4a1b      	ldr	r2, [pc, #108]	; (8006320 <_printf_float+0x2f0>)
 80062b2:	2301      	movs	r3, #1
 80062b4:	4631      	mov	r1, r6
 80062b6:	4628      	mov	r0, r5
 80062b8:	47b8      	blx	r7
 80062ba:	3001      	adds	r0, #1
 80062bc:	f43f af19 	beq.w	80060f2 <_printf_float+0xc2>
 80062c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062c4:	4313      	orrs	r3, r2
 80062c6:	d102      	bne.n	80062ce <_printf_float+0x29e>
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	07d9      	lsls	r1, r3, #31
 80062cc:	d5d8      	bpl.n	8006280 <_printf_float+0x250>
 80062ce:	ee18 3a10 	vmov	r3, s16
 80062d2:	4652      	mov	r2, sl
 80062d4:	4631      	mov	r1, r6
 80062d6:	4628      	mov	r0, r5
 80062d8:	47b8      	blx	r7
 80062da:	3001      	adds	r0, #1
 80062dc:	f43f af09 	beq.w	80060f2 <_printf_float+0xc2>
 80062e0:	f04f 0900 	mov.w	r9, #0
 80062e4:	f104 0a1a 	add.w	sl, r4, #26
 80062e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ea:	425b      	negs	r3, r3
 80062ec:	454b      	cmp	r3, r9
 80062ee:	dc01      	bgt.n	80062f4 <_printf_float+0x2c4>
 80062f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062f2:	e792      	b.n	800621a <_printf_float+0x1ea>
 80062f4:	2301      	movs	r3, #1
 80062f6:	4652      	mov	r2, sl
 80062f8:	4631      	mov	r1, r6
 80062fa:	4628      	mov	r0, r5
 80062fc:	47b8      	blx	r7
 80062fe:	3001      	adds	r0, #1
 8006300:	f43f aef7 	beq.w	80060f2 <_printf_float+0xc2>
 8006304:	f109 0901 	add.w	r9, r9, #1
 8006308:	e7ee      	b.n	80062e8 <_printf_float+0x2b8>
 800630a:	bf00      	nop
 800630c:	7fefffff 	.word	0x7fefffff
 8006310:	08009a30 	.word	0x08009a30
 8006314:	08009a34 	.word	0x08009a34
 8006318:	08009a3c 	.word	0x08009a3c
 800631c:	08009a38 	.word	0x08009a38
 8006320:	08009a40 	.word	0x08009a40
 8006324:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006326:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006328:	429a      	cmp	r2, r3
 800632a:	bfa8      	it	ge
 800632c:	461a      	movge	r2, r3
 800632e:	2a00      	cmp	r2, #0
 8006330:	4691      	mov	r9, r2
 8006332:	dc37      	bgt.n	80063a4 <_printf_float+0x374>
 8006334:	f04f 0b00 	mov.w	fp, #0
 8006338:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800633c:	f104 021a 	add.w	r2, r4, #26
 8006340:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006342:	9305      	str	r3, [sp, #20]
 8006344:	eba3 0309 	sub.w	r3, r3, r9
 8006348:	455b      	cmp	r3, fp
 800634a:	dc33      	bgt.n	80063b4 <_printf_float+0x384>
 800634c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006350:	429a      	cmp	r2, r3
 8006352:	db3b      	blt.n	80063cc <_printf_float+0x39c>
 8006354:	6823      	ldr	r3, [r4, #0]
 8006356:	07da      	lsls	r2, r3, #31
 8006358:	d438      	bmi.n	80063cc <_printf_float+0x39c>
 800635a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800635c:	9b05      	ldr	r3, [sp, #20]
 800635e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	eba2 0901 	sub.w	r9, r2, r1
 8006366:	4599      	cmp	r9, r3
 8006368:	bfa8      	it	ge
 800636a:	4699      	movge	r9, r3
 800636c:	f1b9 0f00 	cmp.w	r9, #0
 8006370:	dc35      	bgt.n	80063de <_printf_float+0x3ae>
 8006372:	f04f 0800 	mov.w	r8, #0
 8006376:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800637a:	f104 0a1a 	add.w	sl, r4, #26
 800637e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006382:	1a9b      	subs	r3, r3, r2
 8006384:	eba3 0309 	sub.w	r3, r3, r9
 8006388:	4543      	cmp	r3, r8
 800638a:	f77f af79 	ble.w	8006280 <_printf_float+0x250>
 800638e:	2301      	movs	r3, #1
 8006390:	4652      	mov	r2, sl
 8006392:	4631      	mov	r1, r6
 8006394:	4628      	mov	r0, r5
 8006396:	47b8      	blx	r7
 8006398:	3001      	adds	r0, #1
 800639a:	f43f aeaa 	beq.w	80060f2 <_printf_float+0xc2>
 800639e:	f108 0801 	add.w	r8, r8, #1
 80063a2:	e7ec      	b.n	800637e <_printf_float+0x34e>
 80063a4:	4613      	mov	r3, r2
 80063a6:	4631      	mov	r1, r6
 80063a8:	4642      	mov	r2, r8
 80063aa:	4628      	mov	r0, r5
 80063ac:	47b8      	blx	r7
 80063ae:	3001      	adds	r0, #1
 80063b0:	d1c0      	bne.n	8006334 <_printf_float+0x304>
 80063b2:	e69e      	b.n	80060f2 <_printf_float+0xc2>
 80063b4:	2301      	movs	r3, #1
 80063b6:	4631      	mov	r1, r6
 80063b8:	4628      	mov	r0, r5
 80063ba:	9205      	str	r2, [sp, #20]
 80063bc:	47b8      	blx	r7
 80063be:	3001      	adds	r0, #1
 80063c0:	f43f ae97 	beq.w	80060f2 <_printf_float+0xc2>
 80063c4:	9a05      	ldr	r2, [sp, #20]
 80063c6:	f10b 0b01 	add.w	fp, fp, #1
 80063ca:	e7b9      	b.n	8006340 <_printf_float+0x310>
 80063cc:	ee18 3a10 	vmov	r3, s16
 80063d0:	4652      	mov	r2, sl
 80063d2:	4631      	mov	r1, r6
 80063d4:	4628      	mov	r0, r5
 80063d6:	47b8      	blx	r7
 80063d8:	3001      	adds	r0, #1
 80063da:	d1be      	bne.n	800635a <_printf_float+0x32a>
 80063dc:	e689      	b.n	80060f2 <_printf_float+0xc2>
 80063de:	9a05      	ldr	r2, [sp, #20]
 80063e0:	464b      	mov	r3, r9
 80063e2:	4442      	add	r2, r8
 80063e4:	4631      	mov	r1, r6
 80063e6:	4628      	mov	r0, r5
 80063e8:	47b8      	blx	r7
 80063ea:	3001      	adds	r0, #1
 80063ec:	d1c1      	bne.n	8006372 <_printf_float+0x342>
 80063ee:	e680      	b.n	80060f2 <_printf_float+0xc2>
 80063f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063f2:	2a01      	cmp	r2, #1
 80063f4:	dc01      	bgt.n	80063fa <_printf_float+0x3ca>
 80063f6:	07db      	lsls	r3, r3, #31
 80063f8:	d538      	bpl.n	800646c <_printf_float+0x43c>
 80063fa:	2301      	movs	r3, #1
 80063fc:	4642      	mov	r2, r8
 80063fe:	4631      	mov	r1, r6
 8006400:	4628      	mov	r0, r5
 8006402:	47b8      	blx	r7
 8006404:	3001      	adds	r0, #1
 8006406:	f43f ae74 	beq.w	80060f2 <_printf_float+0xc2>
 800640a:	ee18 3a10 	vmov	r3, s16
 800640e:	4652      	mov	r2, sl
 8006410:	4631      	mov	r1, r6
 8006412:	4628      	mov	r0, r5
 8006414:	47b8      	blx	r7
 8006416:	3001      	adds	r0, #1
 8006418:	f43f ae6b 	beq.w	80060f2 <_printf_float+0xc2>
 800641c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006420:	2200      	movs	r2, #0
 8006422:	2300      	movs	r3, #0
 8006424:	f7fa fb50 	bl	8000ac8 <__aeabi_dcmpeq>
 8006428:	b9d8      	cbnz	r0, 8006462 <_printf_float+0x432>
 800642a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800642c:	f108 0201 	add.w	r2, r8, #1
 8006430:	3b01      	subs	r3, #1
 8006432:	4631      	mov	r1, r6
 8006434:	4628      	mov	r0, r5
 8006436:	47b8      	blx	r7
 8006438:	3001      	adds	r0, #1
 800643a:	d10e      	bne.n	800645a <_printf_float+0x42a>
 800643c:	e659      	b.n	80060f2 <_printf_float+0xc2>
 800643e:	2301      	movs	r3, #1
 8006440:	4652      	mov	r2, sl
 8006442:	4631      	mov	r1, r6
 8006444:	4628      	mov	r0, r5
 8006446:	47b8      	blx	r7
 8006448:	3001      	adds	r0, #1
 800644a:	f43f ae52 	beq.w	80060f2 <_printf_float+0xc2>
 800644e:	f108 0801 	add.w	r8, r8, #1
 8006452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006454:	3b01      	subs	r3, #1
 8006456:	4543      	cmp	r3, r8
 8006458:	dcf1      	bgt.n	800643e <_printf_float+0x40e>
 800645a:	464b      	mov	r3, r9
 800645c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006460:	e6dc      	b.n	800621c <_printf_float+0x1ec>
 8006462:	f04f 0800 	mov.w	r8, #0
 8006466:	f104 0a1a 	add.w	sl, r4, #26
 800646a:	e7f2      	b.n	8006452 <_printf_float+0x422>
 800646c:	2301      	movs	r3, #1
 800646e:	4642      	mov	r2, r8
 8006470:	e7df      	b.n	8006432 <_printf_float+0x402>
 8006472:	2301      	movs	r3, #1
 8006474:	464a      	mov	r2, r9
 8006476:	4631      	mov	r1, r6
 8006478:	4628      	mov	r0, r5
 800647a:	47b8      	blx	r7
 800647c:	3001      	adds	r0, #1
 800647e:	f43f ae38 	beq.w	80060f2 <_printf_float+0xc2>
 8006482:	f108 0801 	add.w	r8, r8, #1
 8006486:	68e3      	ldr	r3, [r4, #12]
 8006488:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800648a:	1a5b      	subs	r3, r3, r1
 800648c:	4543      	cmp	r3, r8
 800648e:	dcf0      	bgt.n	8006472 <_printf_float+0x442>
 8006490:	e6fa      	b.n	8006288 <_printf_float+0x258>
 8006492:	f04f 0800 	mov.w	r8, #0
 8006496:	f104 0919 	add.w	r9, r4, #25
 800649a:	e7f4      	b.n	8006486 <_printf_float+0x456>

0800649c <_printf_common>:
 800649c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064a0:	4616      	mov	r6, r2
 80064a2:	4699      	mov	r9, r3
 80064a4:	688a      	ldr	r2, [r1, #8]
 80064a6:	690b      	ldr	r3, [r1, #16]
 80064a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064ac:	4293      	cmp	r3, r2
 80064ae:	bfb8      	it	lt
 80064b0:	4613      	movlt	r3, r2
 80064b2:	6033      	str	r3, [r6, #0]
 80064b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064b8:	4607      	mov	r7, r0
 80064ba:	460c      	mov	r4, r1
 80064bc:	b10a      	cbz	r2, 80064c2 <_printf_common+0x26>
 80064be:	3301      	adds	r3, #1
 80064c0:	6033      	str	r3, [r6, #0]
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	0699      	lsls	r1, r3, #26
 80064c6:	bf42      	ittt	mi
 80064c8:	6833      	ldrmi	r3, [r6, #0]
 80064ca:	3302      	addmi	r3, #2
 80064cc:	6033      	strmi	r3, [r6, #0]
 80064ce:	6825      	ldr	r5, [r4, #0]
 80064d0:	f015 0506 	ands.w	r5, r5, #6
 80064d4:	d106      	bne.n	80064e4 <_printf_common+0x48>
 80064d6:	f104 0a19 	add.w	sl, r4, #25
 80064da:	68e3      	ldr	r3, [r4, #12]
 80064dc:	6832      	ldr	r2, [r6, #0]
 80064de:	1a9b      	subs	r3, r3, r2
 80064e0:	42ab      	cmp	r3, r5
 80064e2:	dc26      	bgt.n	8006532 <_printf_common+0x96>
 80064e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064e8:	1e13      	subs	r3, r2, #0
 80064ea:	6822      	ldr	r2, [r4, #0]
 80064ec:	bf18      	it	ne
 80064ee:	2301      	movne	r3, #1
 80064f0:	0692      	lsls	r2, r2, #26
 80064f2:	d42b      	bmi.n	800654c <_printf_common+0xb0>
 80064f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064f8:	4649      	mov	r1, r9
 80064fa:	4638      	mov	r0, r7
 80064fc:	47c0      	blx	r8
 80064fe:	3001      	adds	r0, #1
 8006500:	d01e      	beq.n	8006540 <_printf_common+0xa4>
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	68e5      	ldr	r5, [r4, #12]
 8006506:	6832      	ldr	r2, [r6, #0]
 8006508:	f003 0306 	and.w	r3, r3, #6
 800650c:	2b04      	cmp	r3, #4
 800650e:	bf08      	it	eq
 8006510:	1aad      	subeq	r5, r5, r2
 8006512:	68a3      	ldr	r3, [r4, #8]
 8006514:	6922      	ldr	r2, [r4, #16]
 8006516:	bf0c      	ite	eq
 8006518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800651c:	2500      	movne	r5, #0
 800651e:	4293      	cmp	r3, r2
 8006520:	bfc4      	itt	gt
 8006522:	1a9b      	subgt	r3, r3, r2
 8006524:	18ed      	addgt	r5, r5, r3
 8006526:	2600      	movs	r6, #0
 8006528:	341a      	adds	r4, #26
 800652a:	42b5      	cmp	r5, r6
 800652c:	d11a      	bne.n	8006564 <_printf_common+0xc8>
 800652e:	2000      	movs	r0, #0
 8006530:	e008      	b.n	8006544 <_printf_common+0xa8>
 8006532:	2301      	movs	r3, #1
 8006534:	4652      	mov	r2, sl
 8006536:	4649      	mov	r1, r9
 8006538:	4638      	mov	r0, r7
 800653a:	47c0      	blx	r8
 800653c:	3001      	adds	r0, #1
 800653e:	d103      	bne.n	8006548 <_printf_common+0xac>
 8006540:	f04f 30ff 	mov.w	r0, #4294967295
 8006544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006548:	3501      	adds	r5, #1
 800654a:	e7c6      	b.n	80064da <_printf_common+0x3e>
 800654c:	18e1      	adds	r1, r4, r3
 800654e:	1c5a      	adds	r2, r3, #1
 8006550:	2030      	movs	r0, #48	; 0x30
 8006552:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006556:	4422      	add	r2, r4
 8006558:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800655c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006560:	3302      	adds	r3, #2
 8006562:	e7c7      	b.n	80064f4 <_printf_common+0x58>
 8006564:	2301      	movs	r3, #1
 8006566:	4622      	mov	r2, r4
 8006568:	4649      	mov	r1, r9
 800656a:	4638      	mov	r0, r7
 800656c:	47c0      	blx	r8
 800656e:	3001      	adds	r0, #1
 8006570:	d0e6      	beq.n	8006540 <_printf_common+0xa4>
 8006572:	3601      	adds	r6, #1
 8006574:	e7d9      	b.n	800652a <_printf_common+0x8e>
	...

08006578 <_printf_i>:
 8006578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800657c:	460c      	mov	r4, r1
 800657e:	4691      	mov	r9, r2
 8006580:	7e27      	ldrb	r7, [r4, #24]
 8006582:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006584:	2f78      	cmp	r7, #120	; 0x78
 8006586:	4680      	mov	r8, r0
 8006588:	469a      	mov	sl, r3
 800658a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800658e:	d807      	bhi.n	80065a0 <_printf_i+0x28>
 8006590:	2f62      	cmp	r7, #98	; 0x62
 8006592:	d80a      	bhi.n	80065aa <_printf_i+0x32>
 8006594:	2f00      	cmp	r7, #0
 8006596:	f000 80d8 	beq.w	800674a <_printf_i+0x1d2>
 800659a:	2f58      	cmp	r7, #88	; 0x58
 800659c:	f000 80a3 	beq.w	80066e6 <_printf_i+0x16e>
 80065a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80065a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065a8:	e03a      	b.n	8006620 <_printf_i+0xa8>
 80065aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065ae:	2b15      	cmp	r3, #21
 80065b0:	d8f6      	bhi.n	80065a0 <_printf_i+0x28>
 80065b2:	a001      	add	r0, pc, #4	; (adr r0, 80065b8 <_printf_i+0x40>)
 80065b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80065b8:	08006611 	.word	0x08006611
 80065bc:	08006625 	.word	0x08006625
 80065c0:	080065a1 	.word	0x080065a1
 80065c4:	080065a1 	.word	0x080065a1
 80065c8:	080065a1 	.word	0x080065a1
 80065cc:	080065a1 	.word	0x080065a1
 80065d0:	08006625 	.word	0x08006625
 80065d4:	080065a1 	.word	0x080065a1
 80065d8:	080065a1 	.word	0x080065a1
 80065dc:	080065a1 	.word	0x080065a1
 80065e0:	080065a1 	.word	0x080065a1
 80065e4:	08006731 	.word	0x08006731
 80065e8:	08006655 	.word	0x08006655
 80065ec:	08006713 	.word	0x08006713
 80065f0:	080065a1 	.word	0x080065a1
 80065f4:	080065a1 	.word	0x080065a1
 80065f8:	08006753 	.word	0x08006753
 80065fc:	080065a1 	.word	0x080065a1
 8006600:	08006655 	.word	0x08006655
 8006604:	080065a1 	.word	0x080065a1
 8006608:	080065a1 	.word	0x080065a1
 800660c:	0800671b 	.word	0x0800671b
 8006610:	680b      	ldr	r3, [r1, #0]
 8006612:	1d1a      	adds	r2, r3, #4
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	600a      	str	r2, [r1, #0]
 8006618:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800661c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006620:	2301      	movs	r3, #1
 8006622:	e0a3      	b.n	800676c <_printf_i+0x1f4>
 8006624:	6825      	ldr	r5, [r4, #0]
 8006626:	6808      	ldr	r0, [r1, #0]
 8006628:	062e      	lsls	r6, r5, #24
 800662a:	f100 0304 	add.w	r3, r0, #4
 800662e:	d50a      	bpl.n	8006646 <_printf_i+0xce>
 8006630:	6805      	ldr	r5, [r0, #0]
 8006632:	600b      	str	r3, [r1, #0]
 8006634:	2d00      	cmp	r5, #0
 8006636:	da03      	bge.n	8006640 <_printf_i+0xc8>
 8006638:	232d      	movs	r3, #45	; 0x2d
 800663a:	426d      	negs	r5, r5
 800663c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006640:	485e      	ldr	r0, [pc, #376]	; (80067bc <_printf_i+0x244>)
 8006642:	230a      	movs	r3, #10
 8006644:	e019      	b.n	800667a <_printf_i+0x102>
 8006646:	f015 0f40 	tst.w	r5, #64	; 0x40
 800664a:	6805      	ldr	r5, [r0, #0]
 800664c:	600b      	str	r3, [r1, #0]
 800664e:	bf18      	it	ne
 8006650:	b22d      	sxthne	r5, r5
 8006652:	e7ef      	b.n	8006634 <_printf_i+0xbc>
 8006654:	680b      	ldr	r3, [r1, #0]
 8006656:	6825      	ldr	r5, [r4, #0]
 8006658:	1d18      	adds	r0, r3, #4
 800665a:	6008      	str	r0, [r1, #0]
 800665c:	0628      	lsls	r0, r5, #24
 800665e:	d501      	bpl.n	8006664 <_printf_i+0xec>
 8006660:	681d      	ldr	r5, [r3, #0]
 8006662:	e002      	b.n	800666a <_printf_i+0xf2>
 8006664:	0669      	lsls	r1, r5, #25
 8006666:	d5fb      	bpl.n	8006660 <_printf_i+0xe8>
 8006668:	881d      	ldrh	r5, [r3, #0]
 800666a:	4854      	ldr	r0, [pc, #336]	; (80067bc <_printf_i+0x244>)
 800666c:	2f6f      	cmp	r7, #111	; 0x6f
 800666e:	bf0c      	ite	eq
 8006670:	2308      	moveq	r3, #8
 8006672:	230a      	movne	r3, #10
 8006674:	2100      	movs	r1, #0
 8006676:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800667a:	6866      	ldr	r6, [r4, #4]
 800667c:	60a6      	str	r6, [r4, #8]
 800667e:	2e00      	cmp	r6, #0
 8006680:	bfa2      	ittt	ge
 8006682:	6821      	ldrge	r1, [r4, #0]
 8006684:	f021 0104 	bicge.w	r1, r1, #4
 8006688:	6021      	strge	r1, [r4, #0]
 800668a:	b90d      	cbnz	r5, 8006690 <_printf_i+0x118>
 800668c:	2e00      	cmp	r6, #0
 800668e:	d04d      	beq.n	800672c <_printf_i+0x1b4>
 8006690:	4616      	mov	r6, r2
 8006692:	fbb5 f1f3 	udiv	r1, r5, r3
 8006696:	fb03 5711 	mls	r7, r3, r1, r5
 800669a:	5dc7      	ldrb	r7, [r0, r7]
 800669c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066a0:	462f      	mov	r7, r5
 80066a2:	42bb      	cmp	r3, r7
 80066a4:	460d      	mov	r5, r1
 80066a6:	d9f4      	bls.n	8006692 <_printf_i+0x11a>
 80066a8:	2b08      	cmp	r3, #8
 80066aa:	d10b      	bne.n	80066c4 <_printf_i+0x14c>
 80066ac:	6823      	ldr	r3, [r4, #0]
 80066ae:	07df      	lsls	r7, r3, #31
 80066b0:	d508      	bpl.n	80066c4 <_printf_i+0x14c>
 80066b2:	6923      	ldr	r3, [r4, #16]
 80066b4:	6861      	ldr	r1, [r4, #4]
 80066b6:	4299      	cmp	r1, r3
 80066b8:	bfde      	ittt	le
 80066ba:	2330      	movle	r3, #48	; 0x30
 80066bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80066c4:	1b92      	subs	r2, r2, r6
 80066c6:	6122      	str	r2, [r4, #16]
 80066c8:	f8cd a000 	str.w	sl, [sp]
 80066cc:	464b      	mov	r3, r9
 80066ce:	aa03      	add	r2, sp, #12
 80066d0:	4621      	mov	r1, r4
 80066d2:	4640      	mov	r0, r8
 80066d4:	f7ff fee2 	bl	800649c <_printf_common>
 80066d8:	3001      	adds	r0, #1
 80066da:	d14c      	bne.n	8006776 <_printf_i+0x1fe>
 80066dc:	f04f 30ff 	mov.w	r0, #4294967295
 80066e0:	b004      	add	sp, #16
 80066e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066e6:	4835      	ldr	r0, [pc, #212]	; (80067bc <_printf_i+0x244>)
 80066e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80066ec:	6823      	ldr	r3, [r4, #0]
 80066ee:	680e      	ldr	r6, [r1, #0]
 80066f0:	061f      	lsls	r7, r3, #24
 80066f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80066f6:	600e      	str	r6, [r1, #0]
 80066f8:	d514      	bpl.n	8006724 <_printf_i+0x1ac>
 80066fa:	07d9      	lsls	r1, r3, #31
 80066fc:	bf44      	itt	mi
 80066fe:	f043 0320 	orrmi.w	r3, r3, #32
 8006702:	6023      	strmi	r3, [r4, #0]
 8006704:	b91d      	cbnz	r5, 800670e <_printf_i+0x196>
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	f023 0320 	bic.w	r3, r3, #32
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	2310      	movs	r3, #16
 8006710:	e7b0      	b.n	8006674 <_printf_i+0xfc>
 8006712:	6823      	ldr	r3, [r4, #0]
 8006714:	f043 0320 	orr.w	r3, r3, #32
 8006718:	6023      	str	r3, [r4, #0]
 800671a:	2378      	movs	r3, #120	; 0x78
 800671c:	4828      	ldr	r0, [pc, #160]	; (80067c0 <_printf_i+0x248>)
 800671e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006722:	e7e3      	b.n	80066ec <_printf_i+0x174>
 8006724:	065e      	lsls	r6, r3, #25
 8006726:	bf48      	it	mi
 8006728:	b2ad      	uxthmi	r5, r5
 800672a:	e7e6      	b.n	80066fa <_printf_i+0x182>
 800672c:	4616      	mov	r6, r2
 800672e:	e7bb      	b.n	80066a8 <_printf_i+0x130>
 8006730:	680b      	ldr	r3, [r1, #0]
 8006732:	6826      	ldr	r6, [r4, #0]
 8006734:	6960      	ldr	r0, [r4, #20]
 8006736:	1d1d      	adds	r5, r3, #4
 8006738:	600d      	str	r5, [r1, #0]
 800673a:	0635      	lsls	r5, r6, #24
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	d501      	bpl.n	8006744 <_printf_i+0x1cc>
 8006740:	6018      	str	r0, [r3, #0]
 8006742:	e002      	b.n	800674a <_printf_i+0x1d2>
 8006744:	0671      	lsls	r1, r6, #25
 8006746:	d5fb      	bpl.n	8006740 <_printf_i+0x1c8>
 8006748:	8018      	strh	r0, [r3, #0]
 800674a:	2300      	movs	r3, #0
 800674c:	6123      	str	r3, [r4, #16]
 800674e:	4616      	mov	r6, r2
 8006750:	e7ba      	b.n	80066c8 <_printf_i+0x150>
 8006752:	680b      	ldr	r3, [r1, #0]
 8006754:	1d1a      	adds	r2, r3, #4
 8006756:	600a      	str	r2, [r1, #0]
 8006758:	681e      	ldr	r6, [r3, #0]
 800675a:	6862      	ldr	r2, [r4, #4]
 800675c:	2100      	movs	r1, #0
 800675e:	4630      	mov	r0, r6
 8006760:	f7f9 fd3e 	bl	80001e0 <memchr>
 8006764:	b108      	cbz	r0, 800676a <_printf_i+0x1f2>
 8006766:	1b80      	subs	r0, r0, r6
 8006768:	6060      	str	r0, [r4, #4]
 800676a:	6863      	ldr	r3, [r4, #4]
 800676c:	6123      	str	r3, [r4, #16]
 800676e:	2300      	movs	r3, #0
 8006770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006774:	e7a8      	b.n	80066c8 <_printf_i+0x150>
 8006776:	6923      	ldr	r3, [r4, #16]
 8006778:	4632      	mov	r2, r6
 800677a:	4649      	mov	r1, r9
 800677c:	4640      	mov	r0, r8
 800677e:	47d0      	blx	sl
 8006780:	3001      	adds	r0, #1
 8006782:	d0ab      	beq.n	80066dc <_printf_i+0x164>
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	079b      	lsls	r3, r3, #30
 8006788:	d413      	bmi.n	80067b2 <_printf_i+0x23a>
 800678a:	68e0      	ldr	r0, [r4, #12]
 800678c:	9b03      	ldr	r3, [sp, #12]
 800678e:	4298      	cmp	r0, r3
 8006790:	bfb8      	it	lt
 8006792:	4618      	movlt	r0, r3
 8006794:	e7a4      	b.n	80066e0 <_printf_i+0x168>
 8006796:	2301      	movs	r3, #1
 8006798:	4632      	mov	r2, r6
 800679a:	4649      	mov	r1, r9
 800679c:	4640      	mov	r0, r8
 800679e:	47d0      	blx	sl
 80067a0:	3001      	adds	r0, #1
 80067a2:	d09b      	beq.n	80066dc <_printf_i+0x164>
 80067a4:	3501      	adds	r5, #1
 80067a6:	68e3      	ldr	r3, [r4, #12]
 80067a8:	9903      	ldr	r1, [sp, #12]
 80067aa:	1a5b      	subs	r3, r3, r1
 80067ac:	42ab      	cmp	r3, r5
 80067ae:	dcf2      	bgt.n	8006796 <_printf_i+0x21e>
 80067b0:	e7eb      	b.n	800678a <_printf_i+0x212>
 80067b2:	2500      	movs	r5, #0
 80067b4:	f104 0619 	add.w	r6, r4, #25
 80067b8:	e7f5      	b.n	80067a6 <_printf_i+0x22e>
 80067ba:	bf00      	nop
 80067bc:	08009a42 	.word	0x08009a42
 80067c0:	08009a53 	.word	0x08009a53

080067c4 <iprintf>:
 80067c4:	b40f      	push	{r0, r1, r2, r3}
 80067c6:	4b0a      	ldr	r3, [pc, #40]	; (80067f0 <iprintf+0x2c>)
 80067c8:	b513      	push	{r0, r1, r4, lr}
 80067ca:	681c      	ldr	r4, [r3, #0]
 80067cc:	b124      	cbz	r4, 80067d8 <iprintf+0x14>
 80067ce:	69a3      	ldr	r3, [r4, #24]
 80067d0:	b913      	cbnz	r3, 80067d8 <iprintf+0x14>
 80067d2:	4620      	mov	r0, r4
 80067d4:	f000 ff00 	bl	80075d8 <__sinit>
 80067d8:	ab05      	add	r3, sp, #20
 80067da:	9a04      	ldr	r2, [sp, #16]
 80067dc:	68a1      	ldr	r1, [r4, #8]
 80067de:	9301      	str	r3, [sp, #4]
 80067e0:	4620      	mov	r0, r4
 80067e2:	f001 fd73 	bl	80082cc <_vfiprintf_r>
 80067e6:	b002      	add	sp, #8
 80067e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067ec:	b004      	add	sp, #16
 80067ee:	4770      	bx	lr
 80067f0:	20000014 	.word	0x20000014

080067f4 <siprintf>:
 80067f4:	b40e      	push	{r1, r2, r3}
 80067f6:	b500      	push	{lr}
 80067f8:	b09c      	sub	sp, #112	; 0x70
 80067fa:	ab1d      	add	r3, sp, #116	; 0x74
 80067fc:	9002      	str	r0, [sp, #8]
 80067fe:	9006      	str	r0, [sp, #24]
 8006800:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006804:	4809      	ldr	r0, [pc, #36]	; (800682c <siprintf+0x38>)
 8006806:	9107      	str	r1, [sp, #28]
 8006808:	9104      	str	r1, [sp, #16]
 800680a:	4909      	ldr	r1, [pc, #36]	; (8006830 <siprintf+0x3c>)
 800680c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006810:	9105      	str	r1, [sp, #20]
 8006812:	6800      	ldr	r0, [r0, #0]
 8006814:	9301      	str	r3, [sp, #4]
 8006816:	a902      	add	r1, sp, #8
 8006818:	f001 fc2e 	bl	8008078 <_svfiprintf_r>
 800681c:	9b02      	ldr	r3, [sp, #8]
 800681e:	2200      	movs	r2, #0
 8006820:	701a      	strb	r2, [r3, #0]
 8006822:	b01c      	add	sp, #112	; 0x70
 8006824:	f85d eb04 	ldr.w	lr, [sp], #4
 8006828:	b003      	add	sp, #12
 800682a:	4770      	bx	lr
 800682c:	20000014 	.word	0x20000014
 8006830:	ffff0208 	.word	0xffff0208

08006834 <quorem>:
 8006834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006838:	6903      	ldr	r3, [r0, #16]
 800683a:	690c      	ldr	r4, [r1, #16]
 800683c:	42a3      	cmp	r3, r4
 800683e:	4607      	mov	r7, r0
 8006840:	f2c0 8081 	blt.w	8006946 <quorem+0x112>
 8006844:	3c01      	subs	r4, #1
 8006846:	f101 0814 	add.w	r8, r1, #20
 800684a:	f100 0514 	add.w	r5, r0, #20
 800684e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006852:	9301      	str	r3, [sp, #4]
 8006854:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006858:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800685c:	3301      	adds	r3, #1
 800685e:	429a      	cmp	r2, r3
 8006860:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006864:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006868:	fbb2 f6f3 	udiv	r6, r2, r3
 800686c:	d331      	bcc.n	80068d2 <quorem+0x9e>
 800686e:	f04f 0e00 	mov.w	lr, #0
 8006872:	4640      	mov	r0, r8
 8006874:	46ac      	mov	ip, r5
 8006876:	46f2      	mov	sl, lr
 8006878:	f850 2b04 	ldr.w	r2, [r0], #4
 800687c:	b293      	uxth	r3, r2
 800687e:	fb06 e303 	mla	r3, r6, r3, lr
 8006882:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006886:	b29b      	uxth	r3, r3
 8006888:	ebaa 0303 	sub.w	r3, sl, r3
 800688c:	0c12      	lsrs	r2, r2, #16
 800688e:	f8dc a000 	ldr.w	sl, [ip]
 8006892:	fb06 e202 	mla	r2, r6, r2, lr
 8006896:	fa13 f38a 	uxtah	r3, r3, sl
 800689a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800689e:	fa1f fa82 	uxth.w	sl, r2
 80068a2:	f8dc 2000 	ldr.w	r2, [ip]
 80068a6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80068aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068b4:	4581      	cmp	r9, r0
 80068b6:	f84c 3b04 	str.w	r3, [ip], #4
 80068ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80068be:	d2db      	bcs.n	8006878 <quorem+0x44>
 80068c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80068c4:	b92b      	cbnz	r3, 80068d2 <quorem+0x9e>
 80068c6:	9b01      	ldr	r3, [sp, #4]
 80068c8:	3b04      	subs	r3, #4
 80068ca:	429d      	cmp	r5, r3
 80068cc:	461a      	mov	r2, r3
 80068ce:	d32e      	bcc.n	800692e <quorem+0xfa>
 80068d0:	613c      	str	r4, [r7, #16]
 80068d2:	4638      	mov	r0, r7
 80068d4:	f001 f9ba 	bl	8007c4c <__mcmp>
 80068d8:	2800      	cmp	r0, #0
 80068da:	db24      	blt.n	8006926 <quorem+0xf2>
 80068dc:	3601      	adds	r6, #1
 80068de:	4628      	mov	r0, r5
 80068e0:	f04f 0c00 	mov.w	ip, #0
 80068e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80068e8:	f8d0 e000 	ldr.w	lr, [r0]
 80068ec:	b293      	uxth	r3, r2
 80068ee:	ebac 0303 	sub.w	r3, ip, r3
 80068f2:	0c12      	lsrs	r2, r2, #16
 80068f4:	fa13 f38e 	uxtah	r3, r3, lr
 80068f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80068fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006900:	b29b      	uxth	r3, r3
 8006902:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006906:	45c1      	cmp	r9, r8
 8006908:	f840 3b04 	str.w	r3, [r0], #4
 800690c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006910:	d2e8      	bcs.n	80068e4 <quorem+0xb0>
 8006912:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006916:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800691a:	b922      	cbnz	r2, 8006926 <quorem+0xf2>
 800691c:	3b04      	subs	r3, #4
 800691e:	429d      	cmp	r5, r3
 8006920:	461a      	mov	r2, r3
 8006922:	d30a      	bcc.n	800693a <quorem+0x106>
 8006924:	613c      	str	r4, [r7, #16]
 8006926:	4630      	mov	r0, r6
 8006928:	b003      	add	sp, #12
 800692a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692e:	6812      	ldr	r2, [r2, #0]
 8006930:	3b04      	subs	r3, #4
 8006932:	2a00      	cmp	r2, #0
 8006934:	d1cc      	bne.n	80068d0 <quorem+0x9c>
 8006936:	3c01      	subs	r4, #1
 8006938:	e7c7      	b.n	80068ca <quorem+0x96>
 800693a:	6812      	ldr	r2, [r2, #0]
 800693c:	3b04      	subs	r3, #4
 800693e:	2a00      	cmp	r2, #0
 8006940:	d1f0      	bne.n	8006924 <quorem+0xf0>
 8006942:	3c01      	subs	r4, #1
 8006944:	e7eb      	b.n	800691e <quorem+0xea>
 8006946:	2000      	movs	r0, #0
 8006948:	e7ee      	b.n	8006928 <quorem+0xf4>
 800694a:	0000      	movs	r0, r0
 800694c:	0000      	movs	r0, r0
	...

08006950 <_dtoa_r>:
 8006950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006954:	ed2d 8b02 	vpush	{d8}
 8006958:	ec57 6b10 	vmov	r6, r7, d0
 800695c:	b095      	sub	sp, #84	; 0x54
 800695e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006960:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006964:	9105      	str	r1, [sp, #20]
 8006966:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800696a:	4604      	mov	r4, r0
 800696c:	9209      	str	r2, [sp, #36]	; 0x24
 800696e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006970:	b975      	cbnz	r5, 8006990 <_dtoa_r+0x40>
 8006972:	2010      	movs	r0, #16
 8006974:	f000 fed6 	bl	8007724 <malloc>
 8006978:	4602      	mov	r2, r0
 800697a:	6260      	str	r0, [r4, #36]	; 0x24
 800697c:	b920      	cbnz	r0, 8006988 <_dtoa_r+0x38>
 800697e:	4bb2      	ldr	r3, [pc, #712]	; (8006c48 <_dtoa_r+0x2f8>)
 8006980:	21ea      	movs	r1, #234	; 0xea
 8006982:	48b2      	ldr	r0, [pc, #712]	; (8006c4c <_dtoa_r+0x2fc>)
 8006984:	f001 fef8 	bl	8008778 <__assert_func>
 8006988:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800698c:	6005      	str	r5, [r0, #0]
 800698e:	60c5      	str	r5, [r0, #12]
 8006990:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006992:	6819      	ldr	r1, [r3, #0]
 8006994:	b151      	cbz	r1, 80069ac <_dtoa_r+0x5c>
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	604a      	str	r2, [r1, #4]
 800699a:	2301      	movs	r3, #1
 800699c:	4093      	lsls	r3, r2
 800699e:	608b      	str	r3, [r1, #8]
 80069a0:	4620      	mov	r0, r4
 80069a2:	f000 ff15 	bl	80077d0 <_Bfree>
 80069a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069a8:	2200      	movs	r2, #0
 80069aa:	601a      	str	r2, [r3, #0]
 80069ac:	1e3b      	subs	r3, r7, #0
 80069ae:	bfb9      	ittee	lt
 80069b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80069b4:	9303      	strlt	r3, [sp, #12]
 80069b6:	2300      	movge	r3, #0
 80069b8:	f8c8 3000 	strge.w	r3, [r8]
 80069bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80069c0:	4ba3      	ldr	r3, [pc, #652]	; (8006c50 <_dtoa_r+0x300>)
 80069c2:	bfbc      	itt	lt
 80069c4:	2201      	movlt	r2, #1
 80069c6:	f8c8 2000 	strlt.w	r2, [r8]
 80069ca:	ea33 0309 	bics.w	r3, r3, r9
 80069ce:	d11b      	bne.n	8006a08 <_dtoa_r+0xb8>
 80069d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80069d6:	6013      	str	r3, [r2, #0]
 80069d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80069dc:	4333      	orrs	r3, r6
 80069de:	f000 857a 	beq.w	80074d6 <_dtoa_r+0xb86>
 80069e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069e4:	b963      	cbnz	r3, 8006a00 <_dtoa_r+0xb0>
 80069e6:	4b9b      	ldr	r3, [pc, #620]	; (8006c54 <_dtoa_r+0x304>)
 80069e8:	e024      	b.n	8006a34 <_dtoa_r+0xe4>
 80069ea:	4b9b      	ldr	r3, [pc, #620]	; (8006c58 <_dtoa_r+0x308>)
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	3308      	adds	r3, #8
 80069f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80069f2:	6013      	str	r3, [r2, #0]
 80069f4:	9800      	ldr	r0, [sp, #0]
 80069f6:	b015      	add	sp, #84	; 0x54
 80069f8:	ecbd 8b02 	vpop	{d8}
 80069fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a00:	4b94      	ldr	r3, [pc, #592]	; (8006c54 <_dtoa_r+0x304>)
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	3303      	adds	r3, #3
 8006a06:	e7f3      	b.n	80069f0 <_dtoa_r+0xa0>
 8006a08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	ec51 0b17 	vmov	r0, r1, d7
 8006a12:	2300      	movs	r3, #0
 8006a14:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006a18:	f7fa f856 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a1c:	4680      	mov	r8, r0
 8006a1e:	b158      	cbz	r0, 8006a38 <_dtoa_r+0xe8>
 8006a20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a22:	2301      	movs	r3, #1
 8006a24:	6013      	str	r3, [r2, #0]
 8006a26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 8551 	beq.w	80074d0 <_dtoa_r+0xb80>
 8006a2e:	488b      	ldr	r0, [pc, #556]	; (8006c5c <_dtoa_r+0x30c>)
 8006a30:	6018      	str	r0, [r3, #0]
 8006a32:	1e43      	subs	r3, r0, #1
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	e7dd      	b.n	80069f4 <_dtoa_r+0xa4>
 8006a38:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006a3c:	aa12      	add	r2, sp, #72	; 0x48
 8006a3e:	a913      	add	r1, sp, #76	; 0x4c
 8006a40:	4620      	mov	r0, r4
 8006a42:	f001 f9a7 	bl	8007d94 <__d2b>
 8006a46:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a4a:	4683      	mov	fp, r0
 8006a4c:	2d00      	cmp	r5, #0
 8006a4e:	d07c      	beq.n	8006b4a <_dtoa_r+0x1fa>
 8006a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a52:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006a56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a5a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8006a5e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006a62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006a66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006a6a:	4b7d      	ldr	r3, [pc, #500]	; (8006c60 <_dtoa_r+0x310>)
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	4630      	mov	r0, r6
 8006a70:	4639      	mov	r1, r7
 8006a72:	f7f9 fc09 	bl	8000288 <__aeabi_dsub>
 8006a76:	a36e      	add	r3, pc, #440	; (adr r3, 8006c30 <_dtoa_r+0x2e0>)
 8006a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7c:	f7f9 fdbc 	bl	80005f8 <__aeabi_dmul>
 8006a80:	a36d      	add	r3, pc, #436	; (adr r3, 8006c38 <_dtoa_r+0x2e8>)
 8006a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a86:	f7f9 fc01 	bl	800028c <__adddf3>
 8006a8a:	4606      	mov	r6, r0
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	460f      	mov	r7, r1
 8006a90:	f7f9 fd48 	bl	8000524 <__aeabi_i2d>
 8006a94:	a36a      	add	r3, pc, #424	; (adr r3, 8006c40 <_dtoa_r+0x2f0>)
 8006a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9a:	f7f9 fdad 	bl	80005f8 <__aeabi_dmul>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	4639      	mov	r1, r7
 8006aa6:	f7f9 fbf1 	bl	800028c <__adddf3>
 8006aaa:	4606      	mov	r6, r0
 8006aac:	460f      	mov	r7, r1
 8006aae:	f7fa f853 	bl	8000b58 <__aeabi_d2iz>
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	4682      	mov	sl, r0
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	4630      	mov	r0, r6
 8006aba:	4639      	mov	r1, r7
 8006abc:	f7fa f80e 	bl	8000adc <__aeabi_dcmplt>
 8006ac0:	b148      	cbz	r0, 8006ad6 <_dtoa_r+0x186>
 8006ac2:	4650      	mov	r0, sl
 8006ac4:	f7f9 fd2e 	bl	8000524 <__aeabi_i2d>
 8006ac8:	4632      	mov	r2, r6
 8006aca:	463b      	mov	r3, r7
 8006acc:	f7f9 fffc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ad0:	b908      	cbnz	r0, 8006ad6 <_dtoa_r+0x186>
 8006ad2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ad6:	f1ba 0f16 	cmp.w	sl, #22
 8006ada:	d854      	bhi.n	8006b86 <_dtoa_r+0x236>
 8006adc:	4b61      	ldr	r3, [pc, #388]	; (8006c64 <_dtoa_r+0x314>)
 8006ade:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006aea:	f7f9 fff7 	bl	8000adc <__aeabi_dcmplt>
 8006aee:	2800      	cmp	r0, #0
 8006af0:	d04b      	beq.n	8006b8a <_dtoa_r+0x23a>
 8006af2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006af6:	2300      	movs	r3, #0
 8006af8:	930e      	str	r3, [sp, #56]	; 0x38
 8006afa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006afc:	1b5d      	subs	r5, r3, r5
 8006afe:	1e6b      	subs	r3, r5, #1
 8006b00:	9304      	str	r3, [sp, #16]
 8006b02:	bf43      	ittte	mi
 8006b04:	2300      	movmi	r3, #0
 8006b06:	f1c5 0801 	rsbmi	r8, r5, #1
 8006b0a:	9304      	strmi	r3, [sp, #16]
 8006b0c:	f04f 0800 	movpl.w	r8, #0
 8006b10:	f1ba 0f00 	cmp.w	sl, #0
 8006b14:	db3b      	blt.n	8006b8e <_dtoa_r+0x23e>
 8006b16:	9b04      	ldr	r3, [sp, #16]
 8006b18:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006b1c:	4453      	add	r3, sl
 8006b1e:	9304      	str	r3, [sp, #16]
 8006b20:	2300      	movs	r3, #0
 8006b22:	9306      	str	r3, [sp, #24]
 8006b24:	9b05      	ldr	r3, [sp, #20]
 8006b26:	2b09      	cmp	r3, #9
 8006b28:	d869      	bhi.n	8006bfe <_dtoa_r+0x2ae>
 8006b2a:	2b05      	cmp	r3, #5
 8006b2c:	bfc4      	itt	gt
 8006b2e:	3b04      	subgt	r3, #4
 8006b30:	9305      	strgt	r3, [sp, #20]
 8006b32:	9b05      	ldr	r3, [sp, #20]
 8006b34:	f1a3 0302 	sub.w	r3, r3, #2
 8006b38:	bfcc      	ite	gt
 8006b3a:	2500      	movgt	r5, #0
 8006b3c:	2501      	movle	r5, #1
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	d869      	bhi.n	8006c16 <_dtoa_r+0x2c6>
 8006b42:	e8df f003 	tbb	[pc, r3]
 8006b46:	4e2c      	.short	0x4e2c
 8006b48:	5a4c      	.short	0x5a4c
 8006b4a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006b4e:	441d      	add	r5, r3
 8006b50:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006b54:	2b20      	cmp	r3, #32
 8006b56:	bfc1      	itttt	gt
 8006b58:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b5c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006b60:	fa09 f303 	lslgt.w	r3, r9, r3
 8006b64:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006b68:	bfda      	itte	le
 8006b6a:	f1c3 0320 	rsble	r3, r3, #32
 8006b6e:	fa06 f003 	lslle.w	r0, r6, r3
 8006b72:	4318      	orrgt	r0, r3
 8006b74:	f7f9 fcc6 	bl	8000504 <__aeabi_ui2d>
 8006b78:	2301      	movs	r3, #1
 8006b7a:	4606      	mov	r6, r0
 8006b7c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006b80:	3d01      	subs	r5, #1
 8006b82:	9310      	str	r3, [sp, #64]	; 0x40
 8006b84:	e771      	b.n	8006a6a <_dtoa_r+0x11a>
 8006b86:	2301      	movs	r3, #1
 8006b88:	e7b6      	b.n	8006af8 <_dtoa_r+0x1a8>
 8006b8a:	900e      	str	r0, [sp, #56]	; 0x38
 8006b8c:	e7b5      	b.n	8006afa <_dtoa_r+0x1aa>
 8006b8e:	f1ca 0300 	rsb	r3, sl, #0
 8006b92:	9306      	str	r3, [sp, #24]
 8006b94:	2300      	movs	r3, #0
 8006b96:	eba8 080a 	sub.w	r8, r8, sl
 8006b9a:	930d      	str	r3, [sp, #52]	; 0x34
 8006b9c:	e7c2      	b.n	8006b24 <_dtoa_r+0x1d4>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	9308      	str	r3, [sp, #32]
 8006ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	dc39      	bgt.n	8006c1c <_dtoa_r+0x2cc>
 8006ba8:	f04f 0901 	mov.w	r9, #1
 8006bac:	f8cd 9004 	str.w	r9, [sp, #4]
 8006bb0:	464b      	mov	r3, r9
 8006bb2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006bb6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006bb8:	2200      	movs	r2, #0
 8006bba:	6042      	str	r2, [r0, #4]
 8006bbc:	2204      	movs	r2, #4
 8006bbe:	f102 0614 	add.w	r6, r2, #20
 8006bc2:	429e      	cmp	r6, r3
 8006bc4:	6841      	ldr	r1, [r0, #4]
 8006bc6:	d92f      	bls.n	8006c28 <_dtoa_r+0x2d8>
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f000 fdc1 	bl	8007750 <_Balloc>
 8006bce:	9000      	str	r0, [sp, #0]
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d14b      	bne.n	8006c6c <_dtoa_r+0x31c>
 8006bd4:	4b24      	ldr	r3, [pc, #144]	; (8006c68 <_dtoa_r+0x318>)
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006bdc:	e6d1      	b.n	8006982 <_dtoa_r+0x32>
 8006bde:	2301      	movs	r3, #1
 8006be0:	e7de      	b.n	8006ba0 <_dtoa_r+0x250>
 8006be2:	2300      	movs	r3, #0
 8006be4:	9308      	str	r3, [sp, #32]
 8006be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006be8:	eb0a 0903 	add.w	r9, sl, r3
 8006bec:	f109 0301 	add.w	r3, r9, #1
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	9301      	str	r3, [sp, #4]
 8006bf4:	bfb8      	it	lt
 8006bf6:	2301      	movlt	r3, #1
 8006bf8:	e7dd      	b.n	8006bb6 <_dtoa_r+0x266>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e7f2      	b.n	8006be4 <_dtoa_r+0x294>
 8006bfe:	2501      	movs	r5, #1
 8006c00:	2300      	movs	r3, #0
 8006c02:	9305      	str	r3, [sp, #20]
 8006c04:	9508      	str	r5, [sp, #32]
 8006c06:	f04f 39ff 	mov.w	r9, #4294967295
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c10:	2312      	movs	r3, #18
 8006c12:	9209      	str	r2, [sp, #36]	; 0x24
 8006c14:	e7cf      	b.n	8006bb6 <_dtoa_r+0x266>
 8006c16:	2301      	movs	r3, #1
 8006c18:	9308      	str	r3, [sp, #32]
 8006c1a:	e7f4      	b.n	8006c06 <_dtoa_r+0x2b6>
 8006c1c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006c20:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c24:	464b      	mov	r3, r9
 8006c26:	e7c6      	b.n	8006bb6 <_dtoa_r+0x266>
 8006c28:	3101      	adds	r1, #1
 8006c2a:	6041      	str	r1, [r0, #4]
 8006c2c:	0052      	lsls	r2, r2, #1
 8006c2e:	e7c6      	b.n	8006bbe <_dtoa_r+0x26e>
 8006c30:	636f4361 	.word	0x636f4361
 8006c34:	3fd287a7 	.word	0x3fd287a7
 8006c38:	8b60c8b3 	.word	0x8b60c8b3
 8006c3c:	3fc68a28 	.word	0x3fc68a28
 8006c40:	509f79fb 	.word	0x509f79fb
 8006c44:	3fd34413 	.word	0x3fd34413
 8006c48:	08009a71 	.word	0x08009a71
 8006c4c:	08009a88 	.word	0x08009a88
 8006c50:	7ff00000 	.word	0x7ff00000
 8006c54:	08009a6d 	.word	0x08009a6d
 8006c58:	08009a64 	.word	0x08009a64
 8006c5c:	08009a41 	.word	0x08009a41
 8006c60:	3ff80000 	.word	0x3ff80000
 8006c64:	08009be0 	.word	0x08009be0
 8006c68:	08009ae7 	.word	0x08009ae7
 8006c6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c6e:	9a00      	ldr	r2, [sp, #0]
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	9b01      	ldr	r3, [sp, #4]
 8006c74:	2b0e      	cmp	r3, #14
 8006c76:	f200 80ad 	bhi.w	8006dd4 <_dtoa_r+0x484>
 8006c7a:	2d00      	cmp	r5, #0
 8006c7c:	f000 80aa 	beq.w	8006dd4 <_dtoa_r+0x484>
 8006c80:	f1ba 0f00 	cmp.w	sl, #0
 8006c84:	dd36      	ble.n	8006cf4 <_dtoa_r+0x3a4>
 8006c86:	4ac3      	ldr	r2, [pc, #780]	; (8006f94 <_dtoa_r+0x644>)
 8006c88:	f00a 030f 	and.w	r3, sl, #15
 8006c8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006c90:	ed93 7b00 	vldr	d7, [r3]
 8006c94:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006c98:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006c9c:	eeb0 8a47 	vmov.f32	s16, s14
 8006ca0:	eef0 8a67 	vmov.f32	s17, s15
 8006ca4:	d016      	beq.n	8006cd4 <_dtoa_r+0x384>
 8006ca6:	4bbc      	ldr	r3, [pc, #752]	; (8006f98 <_dtoa_r+0x648>)
 8006ca8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006cac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006cb0:	f7f9 fdcc 	bl	800084c <__aeabi_ddiv>
 8006cb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cb8:	f007 070f 	and.w	r7, r7, #15
 8006cbc:	2503      	movs	r5, #3
 8006cbe:	4eb6      	ldr	r6, [pc, #728]	; (8006f98 <_dtoa_r+0x648>)
 8006cc0:	b957      	cbnz	r7, 8006cd8 <_dtoa_r+0x388>
 8006cc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cc6:	ec53 2b18 	vmov	r2, r3, d8
 8006cca:	f7f9 fdbf 	bl	800084c <__aeabi_ddiv>
 8006cce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cd2:	e029      	b.n	8006d28 <_dtoa_r+0x3d8>
 8006cd4:	2502      	movs	r5, #2
 8006cd6:	e7f2      	b.n	8006cbe <_dtoa_r+0x36e>
 8006cd8:	07f9      	lsls	r1, r7, #31
 8006cda:	d508      	bpl.n	8006cee <_dtoa_r+0x39e>
 8006cdc:	ec51 0b18 	vmov	r0, r1, d8
 8006ce0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ce4:	f7f9 fc88 	bl	80005f8 <__aeabi_dmul>
 8006ce8:	ec41 0b18 	vmov	d8, r0, r1
 8006cec:	3501      	adds	r5, #1
 8006cee:	107f      	asrs	r7, r7, #1
 8006cf0:	3608      	adds	r6, #8
 8006cf2:	e7e5      	b.n	8006cc0 <_dtoa_r+0x370>
 8006cf4:	f000 80a6 	beq.w	8006e44 <_dtoa_r+0x4f4>
 8006cf8:	f1ca 0600 	rsb	r6, sl, #0
 8006cfc:	4ba5      	ldr	r3, [pc, #660]	; (8006f94 <_dtoa_r+0x644>)
 8006cfe:	4fa6      	ldr	r7, [pc, #664]	; (8006f98 <_dtoa_r+0x648>)
 8006d00:	f006 020f 	and.w	r2, r6, #15
 8006d04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d10:	f7f9 fc72 	bl	80005f8 <__aeabi_dmul>
 8006d14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d18:	1136      	asrs	r6, r6, #4
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	2502      	movs	r5, #2
 8006d1e:	2e00      	cmp	r6, #0
 8006d20:	f040 8085 	bne.w	8006e2e <_dtoa_r+0x4de>
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1d2      	bne.n	8006cce <_dtoa_r+0x37e>
 8006d28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f000 808c 	beq.w	8006e48 <_dtoa_r+0x4f8>
 8006d30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d34:	4b99      	ldr	r3, [pc, #612]	; (8006f9c <_dtoa_r+0x64c>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	4630      	mov	r0, r6
 8006d3a:	4639      	mov	r1, r7
 8006d3c:	f7f9 fece 	bl	8000adc <__aeabi_dcmplt>
 8006d40:	2800      	cmp	r0, #0
 8006d42:	f000 8081 	beq.w	8006e48 <_dtoa_r+0x4f8>
 8006d46:	9b01      	ldr	r3, [sp, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d07d      	beq.n	8006e48 <_dtoa_r+0x4f8>
 8006d4c:	f1b9 0f00 	cmp.w	r9, #0
 8006d50:	dd3c      	ble.n	8006dcc <_dtoa_r+0x47c>
 8006d52:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006d56:	9307      	str	r3, [sp, #28]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	4b91      	ldr	r3, [pc, #580]	; (8006fa0 <_dtoa_r+0x650>)
 8006d5c:	4630      	mov	r0, r6
 8006d5e:	4639      	mov	r1, r7
 8006d60:	f7f9 fc4a 	bl	80005f8 <__aeabi_dmul>
 8006d64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d68:	3501      	adds	r5, #1
 8006d6a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8006d6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006d72:	4628      	mov	r0, r5
 8006d74:	f7f9 fbd6 	bl	8000524 <__aeabi_i2d>
 8006d78:	4632      	mov	r2, r6
 8006d7a:	463b      	mov	r3, r7
 8006d7c:	f7f9 fc3c 	bl	80005f8 <__aeabi_dmul>
 8006d80:	4b88      	ldr	r3, [pc, #544]	; (8006fa4 <_dtoa_r+0x654>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	f7f9 fa82 	bl	800028c <__adddf3>
 8006d88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006d8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d90:	9303      	str	r3, [sp, #12]
 8006d92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d15c      	bne.n	8006e52 <_dtoa_r+0x502>
 8006d98:	4b83      	ldr	r3, [pc, #524]	; (8006fa8 <_dtoa_r+0x658>)
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	4630      	mov	r0, r6
 8006d9e:	4639      	mov	r1, r7
 8006da0:	f7f9 fa72 	bl	8000288 <__aeabi_dsub>
 8006da4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006da8:	4606      	mov	r6, r0
 8006daa:	460f      	mov	r7, r1
 8006dac:	f7f9 feb4 	bl	8000b18 <__aeabi_dcmpgt>
 8006db0:	2800      	cmp	r0, #0
 8006db2:	f040 8296 	bne.w	80072e2 <_dtoa_r+0x992>
 8006db6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006dba:	4630      	mov	r0, r6
 8006dbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006dc0:	4639      	mov	r1, r7
 8006dc2:	f7f9 fe8b 	bl	8000adc <__aeabi_dcmplt>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	f040 8288 	bne.w	80072dc <_dtoa_r+0x98c>
 8006dcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006dd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006dd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f2c0 8158 	blt.w	800708c <_dtoa_r+0x73c>
 8006ddc:	f1ba 0f0e 	cmp.w	sl, #14
 8006de0:	f300 8154 	bgt.w	800708c <_dtoa_r+0x73c>
 8006de4:	4b6b      	ldr	r3, [pc, #428]	; (8006f94 <_dtoa_r+0x644>)
 8006de6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006dea:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f280 80e3 	bge.w	8006fbc <_dtoa_r+0x66c>
 8006df6:	9b01      	ldr	r3, [sp, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f300 80df 	bgt.w	8006fbc <_dtoa_r+0x66c>
 8006dfe:	f040 826d 	bne.w	80072dc <_dtoa_r+0x98c>
 8006e02:	4b69      	ldr	r3, [pc, #420]	; (8006fa8 <_dtoa_r+0x658>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	4640      	mov	r0, r8
 8006e08:	4649      	mov	r1, r9
 8006e0a:	f7f9 fbf5 	bl	80005f8 <__aeabi_dmul>
 8006e0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e12:	f7f9 fe77 	bl	8000b04 <__aeabi_dcmpge>
 8006e16:	9e01      	ldr	r6, [sp, #4]
 8006e18:	4637      	mov	r7, r6
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	f040 8243 	bne.w	80072a6 <_dtoa_r+0x956>
 8006e20:	9d00      	ldr	r5, [sp, #0]
 8006e22:	2331      	movs	r3, #49	; 0x31
 8006e24:	f805 3b01 	strb.w	r3, [r5], #1
 8006e28:	f10a 0a01 	add.w	sl, sl, #1
 8006e2c:	e23f      	b.n	80072ae <_dtoa_r+0x95e>
 8006e2e:	07f2      	lsls	r2, r6, #31
 8006e30:	d505      	bpl.n	8006e3e <_dtoa_r+0x4ee>
 8006e32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e36:	f7f9 fbdf 	bl	80005f8 <__aeabi_dmul>
 8006e3a:	3501      	adds	r5, #1
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	1076      	asrs	r6, r6, #1
 8006e40:	3708      	adds	r7, #8
 8006e42:	e76c      	b.n	8006d1e <_dtoa_r+0x3ce>
 8006e44:	2502      	movs	r5, #2
 8006e46:	e76f      	b.n	8006d28 <_dtoa_r+0x3d8>
 8006e48:	9b01      	ldr	r3, [sp, #4]
 8006e4a:	f8cd a01c 	str.w	sl, [sp, #28]
 8006e4e:	930c      	str	r3, [sp, #48]	; 0x30
 8006e50:	e78d      	b.n	8006d6e <_dtoa_r+0x41e>
 8006e52:	9900      	ldr	r1, [sp, #0]
 8006e54:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006e56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e58:	4b4e      	ldr	r3, [pc, #312]	; (8006f94 <_dtoa_r+0x644>)
 8006e5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e5e:	4401      	add	r1, r0
 8006e60:	9102      	str	r1, [sp, #8]
 8006e62:	9908      	ldr	r1, [sp, #32]
 8006e64:	eeb0 8a47 	vmov.f32	s16, s14
 8006e68:	eef0 8a67 	vmov.f32	s17, s15
 8006e6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e74:	2900      	cmp	r1, #0
 8006e76:	d045      	beq.n	8006f04 <_dtoa_r+0x5b4>
 8006e78:	494c      	ldr	r1, [pc, #304]	; (8006fac <_dtoa_r+0x65c>)
 8006e7a:	2000      	movs	r0, #0
 8006e7c:	f7f9 fce6 	bl	800084c <__aeabi_ddiv>
 8006e80:	ec53 2b18 	vmov	r2, r3, d8
 8006e84:	f7f9 fa00 	bl	8000288 <__aeabi_dsub>
 8006e88:	9d00      	ldr	r5, [sp, #0]
 8006e8a:	ec41 0b18 	vmov	d8, r0, r1
 8006e8e:	4639      	mov	r1, r7
 8006e90:	4630      	mov	r0, r6
 8006e92:	f7f9 fe61 	bl	8000b58 <__aeabi_d2iz>
 8006e96:	900c      	str	r0, [sp, #48]	; 0x30
 8006e98:	f7f9 fb44 	bl	8000524 <__aeabi_i2d>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	4630      	mov	r0, r6
 8006ea2:	4639      	mov	r1, r7
 8006ea4:	f7f9 f9f0 	bl	8000288 <__aeabi_dsub>
 8006ea8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006eaa:	3330      	adds	r3, #48	; 0x30
 8006eac:	f805 3b01 	strb.w	r3, [r5], #1
 8006eb0:	ec53 2b18 	vmov	r2, r3, d8
 8006eb4:	4606      	mov	r6, r0
 8006eb6:	460f      	mov	r7, r1
 8006eb8:	f7f9 fe10 	bl	8000adc <__aeabi_dcmplt>
 8006ebc:	2800      	cmp	r0, #0
 8006ebe:	d165      	bne.n	8006f8c <_dtoa_r+0x63c>
 8006ec0:	4632      	mov	r2, r6
 8006ec2:	463b      	mov	r3, r7
 8006ec4:	4935      	ldr	r1, [pc, #212]	; (8006f9c <_dtoa_r+0x64c>)
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	f7f9 f9de 	bl	8000288 <__aeabi_dsub>
 8006ecc:	ec53 2b18 	vmov	r2, r3, d8
 8006ed0:	f7f9 fe04 	bl	8000adc <__aeabi_dcmplt>
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	f040 80b9 	bne.w	800704c <_dtoa_r+0x6fc>
 8006eda:	9b02      	ldr	r3, [sp, #8]
 8006edc:	429d      	cmp	r5, r3
 8006ede:	f43f af75 	beq.w	8006dcc <_dtoa_r+0x47c>
 8006ee2:	4b2f      	ldr	r3, [pc, #188]	; (8006fa0 <_dtoa_r+0x650>)
 8006ee4:	ec51 0b18 	vmov	r0, r1, d8
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f7f9 fb85 	bl	80005f8 <__aeabi_dmul>
 8006eee:	4b2c      	ldr	r3, [pc, #176]	; (8006fa0 <_dtoa_r+0x650>)
 8006ef0:	ec41 0b18 	vmov	d8, r0, r1
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	4639      	mov	r1, r7
 8006efa:	f7f9 fb7d 	bl	80005f8 <__aeabi_dmul>
 8006efe:	4606      	mov	r6, r0
 8006f00:	460f      	mov	r7, r1
 8006f02:	e7c4      	b.n	8006e8e <_dtoa_r+0x53e>
 8006f04:	ec51 0b17 	vmov	r0, r1, d7
 8006f08:	f7f9 fb76 	bl	80005f8 <__aeabi_dmul>
 8006f0c:	9b02      	ldr	r3, [sp, #8]
 8006f0e:	9d00      	ldr	r5, [sp, #0]
 8006f10:	930c      	str	r3, [sp, #48]	; 0x30
 8006f12:	ec41 0b18 	vmov	d8, r0, r1
 8006f16:	4639      	mov	r1, r7
 8006f18:	4630      	mov	r0, r6
 8006f1a:	f7f9 fe1d 	bl	8000b58 <__aeabi_d2iz>
 8006f1e:	9011      	str	r0, [sp, #68]	; 0x44
 8006f20:	f7f9 fb00 	bl	8000524 <__aeabi_i2d>
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	4630      	mov	r0, r6
 8006f2a:	4639      	mov	r1, r7
 8006f2c:	f7f9 f9ac 	bl	8000288 <__aeabi_dsub>
 8006f30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f32:	3330      	adds	r3, #48	; 0x30
 8006f34:	f805 3b01 	strb.w	r3, [r5], #1
 8006f38:	9b02      	ldr	r3, [sp, #8]
 8006f3a:	429d      	cmp	r5, r3
 8006f3c:	4606      	mov	r6, r0
 8006f3e:	460f      	mov	r7, r1
 8006f40:	f04f 0200 	mov.w	r2, #0
 8006f44:	d134      	bne.n	8006fb0 <_dtoa_r+0x660>
 8006f46:	4b19      	ldr	r3, [pc, #100]	; (8006fac <_dtoa_r+0x65c>)
 8006f48:	ec51 0b18 	vmov	r0, r1, d8
 8006f4c:	f7f9 f99e 	bl	800028c <__adddf3>
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	4630      	mov	r0, r6
 8006f56:	4639      	mov	r1, r7
 8006f58:	f7f9 fdde 	bl	8000b18 <__aeabi_dcmpgt>
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	d175      	bne.n	800704c <_dtoa_r+0x6fc>
 8006f60:	ec53 2b18 	vmov	r2, r3, d8
 8006f64:	4911      	ldr	r1, [pc, #68]	; (8006fac <_dtoa_r+0x65c>)
 8006f66:	2000      	movs	r0, #0
 8006f68:	f7f9 f98e 	bl	8000288 <__aeabi_dsub>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	4630      	mov	r0, r6
 8006f72:	4639      	mov	r1, r7
 8006f74:	f7f9 fdb2 	bl	8000adc <__aeabi_dcmplt>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	f43f af27 	beq.w	8006dcc <_dtoa_r+0x47c>
 8006f7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f80:	1e6b      	subs	r3, r5, #1
 8006f82:	930c      	str	r3, [sp, #48]	; 0x30
 8006f84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f88:	2b30      	cmp	r3, #48	; 0x30
 8006f8a:	d0f8      	beq.n	8006f7e <_dtoa_r+0x62e>
 8006f8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006f90:	e04a      	b.n	8007028 <_dtoa_r+0x6d8>
 8006f92:	bf00      	nop
 8006f94:	08009be0 	.word	0x08009be0
 8006f98:	08009bb8 	.word	0x08009bb8
 8006f9c:	3ff00000 	.word	0x3ff00000
 8006fa0:	40240000 	.word	0x40240000
 8006fa4:	401c0000 	.word	0x401c0000
 8006fa8:	40140000 	.word	0x40140000
 8006fac:	3fe00000 	.word	0x3fe00000
 8006fb0:	4baf      	ldr	r3, [pc, #700]	; (8007270 <_dtoa_r+0x920>)
 8006fb2:	f7f9 fb21 	bl	80005f8 <__aeabi_dmul>
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	460f      	mov	r7, r1
 8006fba:	e7ac      	b.n	8006f16 <_dtoa_r+0x5c6>
 8006fbc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006fc0:	9d00      	ldr	r5, [sp, #0]
 8006fc2:	4642      	mov	r2, r8
 8006fc4:	464b      	mov	r3, r9
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	4639      	mov	r1, r7
 8006fca:	f7f9 fc3f 	bl	800084c <__aeabi_ddiv>
 8006fce:	f7f9 fdc3 	bl	8000b58 <__aeabi_d2iz>
 8006fd2:	9002      	str	r0, [sp, #8]
 8006fd4:	f7f9 faa6 	bl	8000524 <__aeabi_i2d>
 8006fd8:	4642      	mov	r2, r8
 8006fda:	464b      	mov	r3, r9
 8006fdc:	f7f9 fb0c 	bl	80005f8 <__aeabi_dmul>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	4630      	mov	r0, r6
 8006fe6:	4639      	mov	r1, r7
 8006fe8:	f7f9 f94e 	bl	8000288 <__aeabi_dsub>
 8006fec:	9e02      	ldr	r6, [sp, #8]
 8006fee:	9f01      	ldr	r7, [sp, #4]
 8006ff0:	3630      	adds	r6, #48	; 0x30
 8006ff2:	f805 6b01 	strb.w	r6, [r5], #1
 8006ff6:	9e00      	ldr	r6, [sp, #0]
 8006ff8:	1bae      	subs	r6, r5, r6
 8006ffa:	42b7      	cmp	r7, r6
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	d137      	bne.n	8007072 <_dtoa_r+0x722>
 8007002:	f7f9 f943 	bl	800028c <__adddf3>
 8007006:	4642      	mov	r2, r8
 8007008:	464b      	mov	r3, r9
 800700a:	4606      	mov	r6, r0
 800700c:	460f      	mov	r7, r1
 800700e:	f7f9 fd83 	bl	8000b18 <__aeabi_dcmpgt>
 8007012:	b9c8      	cbnz	r0, 8007048 <_dtoa_r+0x6f8>
 8007014:	4642      	mov	r2, r8
 8007016:	464b      	mov	r3, r9
 8007018:	4630      	mov	r0, r6
 800701a:	4639      	mov	r1, r7
 800701c:	f7f9 fd54 	bl	8000ac8 <__aeabi_dcmpeq>
 8007020:	b110      	cbz	r0, 8007028 <_dtoa_r+0x6d8>
 8007022:	9b02      	ldr	r3, [sp, #8]
 8007024:	07d9      	lsls	r1, r3, #31
 8007026:	d40f      	bmi.n	8007048 <_dtoa_r+0x6f8>
 8007028:	4620      	mov	r0, r4
 800702a:	4659      	mov	r1, fp
 800702c:	f000 fbd0 	bl	80077d0 <_Bfree>
 8007030:	2300      	movs	r3, #0
 8007032:	702b      	strb	r3, [r5, #0]
 8007034:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007036:	f10a 0001 	add.w	r0, sl, #1
 800703a:	6018      	str	r0, [r3, #0]
 800703c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800703e:	2b00      	cmp	r3, #0
 8007040:	f43f acd8 	beq.w	80069f4 <_dtoa_r+0xa4>
 8007044:	601d      	str	r5, [r3, #0]
 8007046:	e4d5      	b.n	80069f4 <_dtoa_r+0xa4>
 8007048:	f8cd a01c 	str.w	sl, [sp, #28]
 800704c:	462b      	mov	r3, r5
 800704e:	461d      	mov	r5, r3
 8007050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007054:	2a39      	cmp	r2, #57	; 0x39
 8007056:	d108      	bne.n	800706a <_dtoa_r+0x71a>
 8007058:	9a00      	ldr	r2, [sp, #0]
 800705a:	429a      	cmp	r2, r3
 800705c:	d1f7      	bne.n	800704e <_dtoa_r+0x6fe>
 800705e:	9a07      	ldr	r2, [sp, #28]
 8007060:	9900      	ldr	r1, [sp, #0]
 8007062:	3201      	adds	r2, #1
 8007064:	9207      	str	r2, [sp, #28]
 8007066:	2230      	movs	r2, #48	; 0x30
 8007068:	700a      	strb	r2, [r1, #0]
 800706a:	781a      	ldrb	r2, [r3, #0]
 800706c:	3201      	adds	r2, #1
 800706e:	701a      	strb	r2, [r3, #0]
 8007070:	e78c      	b.n	8006f8c <_dtoa_r+0x63c>
 8007072:	4b7f      	ldr	r3, [pc, #508]	; (8007270 <_dtoa_r+0x920>)
 8007074:	2200      	movs	r2, #0
 8007076:	f7f9 fabf 	bl	80005f8 <__aeabi_dmul>
 800707a:	2200      	movs	r2, #0
 800707c:	2300      	movs	r3, #0
 800707e:	4606      	mov	r6, r0
 8007080:	460f      	mov	r7, r1
 8007082:	f7f9 fd21 	bl	8000ac8 <__aeabi_dcmpeq>
 8007086:	2800      	cmp	r0, #0
 8007088:	d09b      	beq.n	8006fc2 <_dtoa_r+0x672>
 800708a:	e7cd      	b.n	8007028 <_dtoa_r+0x6d8>
 800708c:	9a08      	ldr	r2, [sp, #32]
 800708e:	2a00      	cmp	r2, #0
 8007090:	f000 80c4 	beq.w	800721c <_dtoa_r+0x8cc>
 8007094:	9a05      	ldr	r2, [sp, #20]
 8007096:	2a01      	cmp	r2, #1
 8007098:	f300 80a8 	bgt.w	80071ec <_dtoa_r+0x89c>
 800709c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800709e:	2a00      	cmp	r2, #0
 80070a0:	f000 80a0 	beq.w	80071e4 <_dtoa_r+0x894>
 80070a4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80070a8:	9e06      	ldr	r6, [sp, #24]
 80070aa:	4645      	mov	r5, r8
 80070ac:	9a04      	ldr	r2, [sp, #16]
 80070ae:	2101      	movs	r1, #1
 80070b0:	441a      	add	r2, r3
 80070b2:	4620      	mov	r0, r4
 80070b4:	4498      	add	r8, r3
 80070b6:	9204      	str	r2, [sp, #16]
 80070b8:	f000 fc46 	bl	8007948 <__i2b>
 80070bc:	4607      	mov	r7, r0
 80070be:	2d00      	cmp	r5, #0
 80070c0:	dd0b      	ble.n	80070da <_dtoa_r+0x78a>
 80070c2:	9b04      	ldr	r3, [sp, #16]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	dd08      	ble.n	80070da <_dtoa_r+0x78a>
 80070c8:	42ab      	cmp	r3, r5
 80070ca:	9a04      	ldr	r2, [sp, #16]
 80070cc:	bfa8      	it	ge
 80070ce:	462b      	movge	r3, r5
 80070d0:	eba8 0803 	sub.w	r8, r8, r3
 80070d4:	1aed      	subs	r5, r5, r3
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	9304      	str	r3, [sp, #16]
 80070da:	9b06      	ldr	r3, [sp, #24]
 80070dc:	b1fb      	cbz	r3, 800711e <_dtoa_r+0x7ce>
 80070de:	9b08      	ldr	r3, [sp, #32]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f000 809f 	beq.w	8007224 <_dtoa_r+0x8d4>
 80070e6:	2e00      	cmp	r6, #0
 80070e8:	dd11      	ble.n	800710e <_dtoa_r+0x7be>
 80070ea:	4639      	mov	r1, r7
 80070ec:	4632      	mov	r2, r6
 80070ee:	4620      	mov	r0, r4
 80070f0:	f000 fce6 	bl	8007ac0 <__pow5mult>
 80070f4:	465a      	mov	r2, fp
 80070f6:	4601      	mov	r1, r0
 80070f8:	4607      	mov	r7, r0
 80070fa:	4620      	mov	r0, r4
 80070fc:	f000 fc3a 	bl	8007974 <__multiply>
 8007100:	4659      	mov	r1, fp
 8007102:	9007      	str	r0, [sp, #28]
 8007104:	4620      	mov	r0, r4
 8007106:	f000 fb63 	bl	80077d0 <_Bfree>
 800710a:	9b07      	ldr	r3, [sp, #28]
 800710c:	469b      	mov	fp, r3
 800710e:	9b06      	ldr	r3, [sp, #24]
 8007110:	1b9a      	subs	r2, r3, r6
 8007112:	d004      	beq.n	800711e <_dtoa_r+0x7ce>
 8007114:	4659      	mov	r1, fp
 8007116:	4620      	mov	r0, r4
 8007118:	f000 fcd2 	bl	8007ac0 <__pow5mult>
 800711c:	4683      	mov	fp, r0
 800711e:	2101      	movs	r1, #1
 8007120:	4620      	mov	r0, r4
 8007122:	f000 fc11 	bl	8007948 <__i2b>
 8007126:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007128:	2b00      	cmp	r3, #0
 800712a:	4606      	mov	r6, r0
 800712c:	dd7c      	ble.n	8007228 <_dtoa_r+0x8d8>
 800712e:	461a      	mov	r2, r3
 8007130:	4601      	mov	r1, r0
 8007132:	4620      	mov	r0, r4
 8007134:	f000 fcc4 	bl	8007ac0 <__pow5mult>
 8007138:	9b05      	ldr	r3, [sp, #20]
 800713a:	2b01      	cmp	r3, #1
 800713c:	4606      	mov	r6, r0
 800713e:	dd76      	ble.n	800722e <_dtoa_r+0x8de>
 8007140:	2300      	movs	r3, #0
 8007142:	9306      	str	r3, [sp, #24]
 8007144:	6933      	ldr	r3, [r6, #16]
 8007146:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800714a:	6918      	ldr	r0, [r3, #16]
 800714c:	f000 fbac 	bl	80078a8 <__hi0bits>
 8007150:	f1c0 0020 	rsb	r0, r0, #32
 8007154:	9b04      	ldr	r3, [sp, #16]
 8007156:	4418      	add	r0, r3
 8007158:	f010 001f 	ands.w	r0, r0, #31
 800715c:	f000 8086 	beq.w	800726c <_dtoa_r+0x91c>
 8007160:	f1c0 0320 	rsb	r3, r0, #32
 8007164:	2b04      	cmp	r3, #4
 8007166:	dd7f      	ble.n	8007268 <_dtoa_r+0x918>
 8007168:	f1c0 001c 	rsb	r0, r0, #28
 800716c:	9b04      	ldr	r3, [sp, #16]
 800716e:	4403      	add	r3, r0
 8007170:	4480      	add	r8, r0
 8007172:	4405      	add	r5, r0
 8007174:	9304      	str	r3, [sp, #16]
 8007176:	f1b8 0f00 	cmp.w	r8, #0
 800717a:	dd05      	ble.n	8007188 <_dtoa_r+0x838>
 800717c:	4659      	mov	r1, fp
 800717e:	4642      	mov	r2, r8
 8007180:	4620      	mov	r0, r4
 8007182:	f000 fcf7 	bl	8007b74 <__lshift>
 8007186:	4683      	mov	fp, r0
 8007188:	9b04      	ldr	r3, [sp, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	dd05      	ble.n	800719a <_dtoa_r+0x84a>
 800718e:	4631      	mov	r1, r6
 8007190:	461a      	mov	r2, r3
 8007192:	4620      	mov	r0, r4
 8007194:	f000 fcee 	bl	8007b74 <__lshift>
 8007198:	4606      	mov	r6, r0
 800719a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800719c:	2b00      	cmp	r3, #0
 800719e:	d069      	beq.n	8007274 <_dtoa_r+0x924>
 80071a0:	4631      	mov	r1, r6
 80071a2:	4658      	mov	r0, fp
 80071a4:	f000 fd52 	bl	8007c4c <__mcmp>
 80071a8:	2800      	cmp	r0, #0
 80071aa:	da63      	bge.n	8007274 <_dtoa_r+0x924>
 80071ac:	2300      	movs	r3, #0
 80071ae:	4659      	mov	r1, fp
 80071b0:	220a      	movs	r2, #10
 80071b2:	4620      	mov	r0, r4
 80071b4:	f000 fb2e 	bl	8007814 <__multadd>
 80071b8:	9b08      	ldr	r3, [sp, #32]
 80071ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071be:	4683      	mov	fp, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 818f 	beq.w	80074e4 <_dtoa_r+0xb94>
 80071c6:	4639      	mov	r1, r7
 80071c8:	2300      	movs	r3, #0
 80071ca:	220a      	movs	r2, #10
 80071cc:	4620      	mov	r0, r4
 80071ce:	f000 fb21 	bl	8007814 <__multadd>
 80071d2:	f1b9 0f00 	cmp.w	r9, #0
 80071d6:	4607      	mov	r7, r0
 80071d8:	f300 808e 	bgt.w	80072f8 <_dtoa_r+0x9a8>
 80071dc:	9b05      	ldr	r3, [sp, #20]
 80071de:	2b02      	cmp	r3, #2
 80071e0:	dc50      	bgt.n	8007284 <_dtoa_r+0x934>
 80071e2:	e089      	b.n	80072f8 <_dtoa_r+0x9a8>
 80071e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80071ea:	e75d      	b.n	80070a8 <_dtoa_r+0x758>
 80071ec:	9b01      	ldr	r3, [sp, #4]
 80071ee:	1e5e      	subs	r6, r3, #1
 80071f0:	9b06      	ldr	r3, [sp, #24]
 80071f2:	42b3      	cmp	r3, r6
 80071f4:	bfbf      	itttt	lt
 80071f6:	9b06      	ldrlt	r3, [sp, #24]
 80071f8:	9606      	strlt	r6, [sp, #24]
 80071fa:	1af2      	sublt	r2, r6, r3
 80071fc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80071fe:	bfb6      	itet	lt
 8007200:	189b      	addlt	r3, r3, r2
 8007202:	1b9e      	subge	r6, r3, r6
 8007204:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007206:	9b01      	ldr	r3, [sp, #4]
 8007208:	bfb8      	it	lt
 800720a:	2600      	movlt	r6, #0
 800720c:	2b00      	cmp	r3, #0
 800720e:	bfb5      	itete	lt
 8007210:	eba8 0503 	sublt.w	r5, r8, r3
 8007214:	9b01      	ldrge	r3, [sp, #4]
 8007216:	2300      	movlt	r3, #0
 8007218:	4645      	movge	r5, r8
 800721a:	e747      	b.n	80070ac <_dtoa_r+0x75c>
 800721c:	9e06      	ldr	r6, [sp, #24]
 800721e:	9f08      	ldr	r7, [sp, #32]
 8007220:	4645      	mov	r5, r8
 8007222:	e74c      	b.n	80070be <_dtoa_r+0x76e>
 8007224:	9a06      	ldr	r2, [sp, #24]
 8007226:	e775      	b.n	8007114 <_dtoa_r+0x7c4>
 8007228:	9b05      	ldr	r3, [sp, #20]
 800722a:	2b01      	cmp	r3, #1
 800722c:	dc18      	bgt.n	8007260 <_dtoa_r+0x910>
 800722e:	9b02      	ldr	r3, [sp, #8]
 8007230:	b9b3      	cbnz	r3, 8007260 <_dtoa_r+0x910>
 8007232:	9b03      	ldr	r3, [sp, #12]
 8007234:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007238:	b9a3      	cbnz	r3, 8007264 <_dtoa_r+0x914>
 800723a:	9b03      	ldr	r3, [sp, #12]
 800723c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007240:	0d1b      	lsrs	r3, r3, #20
 8007242:	051b      	lsls	r3, r3, #20
 8007244:	b12b      	cbz	r3, 8007252 <_dtoa_r+0x902>
 8007246:	9b04      	ldr	r3, [sp, #16]
 8007248:	3301      	adds	r3, #1
 800724a:	9304      	str	r3, [sp, #16]
 800724c:	f108 0801 	add.w	r8, r8, #1
 8007250:	2301      	movs	r3, #1
 8007252:	9306      	str	r3, [sp, #24]
 8007254:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007256:	2b00      	cmp	r3, #0
 8007258:	f47f af74 	bne.w	8007144 <_dtoa_r+0x7f4>
 800725c:	2001      	movs	r0, #1
 800725e:	e779      	b.n	8007154 <_dtoa_r+0x804>
 8007260:	2300      	movs	r3, #0
 8007262:	e7f6      	b.n	8007252 <_dtoa_r+0x902>
 8007264:	9b02      	ldr	r3, [sp, #8]
 8007266:	e7f4      	b.n	8007252 <_dtoa_r+0x902>
 8007268:	d085      	beq.n	8007176 <_dtoa_r+0x826>
 800726a:	4618      	mov	r0, r3
 800726c:	301c      	adds	r0, #28
 800726e:	e77d      	b.n	800716c <_dtoa_r+0x81c>
 8007270:	40240000 	.word	0x40240000
 8007274:	9b01      	ldr	r3, [sp, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	dc38      	bgt.n	80072ec <_dtoa_r+0x99c>
 800727a:	9b05      	ldr	r3, [sp, #20]
 800727c:	2b02      	cmp	r3, #2
 800727e:	dd35      	ble.n	80072ec <_dtoa_r+0x99c>
 8007280:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007284:	f1b9 0f00 	cmp.w	r9, #0
 8007288:	d10d      	bne.n	80072a6 <_dtoa_r+0x956>
 800728a:	4631      	mov	r1, r6
 800728c:	464b      	mov	r3, r9
 800728e:	2205      	movs	r2, #5
 8007290:	4620      	mov	r0, r4
 8007292:	f000 fabf 	bl	8007814 <__multadd>
 8007296:	4601      	mov	r1, r0
 8007298:	4606      	mov	r6, r0
 800729a:	4658      	mov	r0, fp
 800729c:	f000 fcd6 	bl	8007c4c <__mcmp>
 80072a0:	2800      	cmp	r0, #0
 80072a2:	f73f adbd 	bgt.w	8006e20 <_dtoa_r+0x4d0>
 80072a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072a8:	9d00      	ldr	r5, [sp, #0]
 80072aa:	ea6f 0a03 	mvn.w	sl, r3
 80072ae:	f04f 0800 	mov.w	r8, #0
 80072b2:	4631      	mov	r1, r6
 80072b4:	4620      	mov	r0, r4
 80072b6:	f000 fa8b 	bl	80077d0 <_Bfree>
 80072ba:	2f00      	cmp	r7, #0
 80072bc:	f43f aeb4 	beq.w	8007028 <_dtoa_r+0x6d8>
 80072c0:	f1b8 0f00 	cmp.w	r8, #0
 80072c4:	d005      	beq.n	80072d2 <_dtoa_r+0x982>
 80072c6:	45b8      	cmp	r8, r7
 80072c8:	d003      	beq.n	80072d2 <_dtoa_r+0x982>
 80072ca:	4641      	mov	r1, r8
 80072cc:	4620      	mov	r0, r4
 80072ce:	f000 fa7f 	bl	80077d0 <_Bfree>
 80072d2:	4639      	mov	r1, r7
 80072d4:	4620      	mov	r0, r4
 80072d6:	f000 fa7b 	bl	80077d0 <_Bfree>
 80072da:	e6a5      	b.n	8007028 <_dtoa_r+0x6d8>
 80072dc:	2600      	movs	r6, #0
 80072de:	4637      	mov	r7, r6
 80072e0:	e7e1      	b.n	80072a6 <_dtoa_r+0x956>
 80072e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80072e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80072e8:	4637      	mov	r7, r6
 80072ea:	e599      	b.n	8006e20 <_dtoa_r+0x4d0>
 80072ec:	9b08      	ldr	r3, [sp, #32]
 80072ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 80fd 	beq.w	80074f2 <_dtoa_r+0xba2>
 80072f8:	2d00      	cmp	r5, #0
 80072fa:	dd05      	ble.n	8007308 <_dtoa_r+0x9b8>
 80072fc:	4639      	mov	r1, r7
 80072fe:	462a      	mov	r2, r5
 8007300:	4620      	mov	r0, r4
 8007302:	f000 fc37 	bl	8007b74 <__lshift>
 8007306:	4607      	mov	r7, r0
 8007308:	9b06      	ldr	r3, [sp, #24]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d05c      	beq.n	80073c8 <_dtoa_r+0xa78>
 800730e:	6879      	ldr	r1, [r7, #4]
 8007310:	4620      	mov	r0, r4
 8007312:	f000 fa1d 	bl	8007750 <_Balloc>
 8007316:	4605      	mov	r5, r0
 8007318:	b928      	cbnz	r0, 8007326 <_dtoa_r+0x9d6>
 800731a:	4b80      	ldr	r3, [pc, #512]	; (800751c <_dtoa_r+0xbcc>)
 800731c:	4602      	mov	r2, r0
 800731e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007322:	f7ff bb2e 	b.w	8006982 <_dtoa_r+0x32>
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	3202      	adds	r2, #2
 800732a:	0092      	lsls	r2, r2, #2
 800732c:	f107 010c 	add.w	r1, r7, #12
 8007330:	300c      	adds	r0, #12
 8007332:	f000 f9ff 	bl	8007734 <memcpy>
 8007336:	2201      	movs	r2, #1
 8007338:	4629      	mov	r1, r5
 800733a:	4620      	mov	r0, r4
 800733c:	f000 fc1a 	bl	8007b74 <__lshift>
 8007340:	9b00      	ldr	r3, [sp, #0]
 8007342:	3301      	adds	r3, #1
 8007344:	9301      	str	r3, [sp, #4]
 8007346:	9b00      	ldr	r3, [sp, #0]
 8007348:	444b      	add	r3, r9
 800734a:	9307      	str	r3, [sp, #28]
 800734c:	9b02      	ldr	r3, [sp, #8]
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	46b8      	mov	r8, r7
 8007354:	9306      	str	r3, [sp, #24]
 8007356:	4607      	mov	r7, r0
 8007358:	9b01      	ldr	r3, [sp, #4]
 800735a:	4631      	mov	r1, r6
 800735c:	3b01      	subs	r3, #1
 800735e:	4658      	mov	r0, fp
 8007360:	9302      	str	r3, [sp, #8]
 8007362:	f7ff fa67 	bl	8006834 <quorem>
 8007366:	4603      	mov	r3, r0
 8007368:	3330      	adds	r3, #48	; 0x30
 800736a:	9004      	str	r0, [sp, #16]
 800736c:	4641      	mov	r1, r8
 800736e:	4658      	mov	r0, fp
 8007370:	9308      	str	r3, [sp, #32]
 8007372:	f000 fc6b 	bl	8007c4c <__mcmp>
 8007376:	463a      	mov	r2, r7
 8007378:	4681      	mov	r9, r0
 800737a:	4631      	mov	r1, r6
 800737c:	4620      	mov	r0, r4
 800737e:	f000 fc81 	bl	8007c84 <__mdiff>
 8007382:	68c2      	ldr	r2, [r0, #12]
 8007384:	9b08      	ldr	r3, [sp, #32]
 8007386:	4605      	mov	r5, r0
 8007388:	bb02      	cbnz	r2, 80073cc <_dtoa_r+0xa7c>
 800738a:	4601      	mov	r1, r0
 800738c:	4658      	mov	r0, fp
 800738e:	f000 fc5d 	bl	8007c4c <__mcmp>
 8007392:	9b08      	ldr	r3, [sp, #32]
 8007394:	4602      	mov	r2, r0
 8007396:	4629      	mov	r1, r5
 8007398:	4620      	mov	r0, r4
 800739a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800739e:	f000 fa17 	bl	80077d0 <_Bfree>
 80073a2:	9b05      	ldr	r3, [sp, #20]
 80073a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073a6:	9d01      	ldr	r5, [sp, #4]
 80073a8:	ea43 0102 	orr.w	r1, r3, r2
 80073ac:	9b06      	ldr	r3, [sp, #24]
 80073ae:	430b      	orrs	r3, r1
 80073b0:	9b08      	ldr	r3, [sp, #32]
 80073b2:	d10d      	bne.n	80073d0 <_dtoa_r+0xa80>
 80073b4:	2b39      	cmp	r3, #57	; 0x39
 80073b6:	d029      	beq.n	800740c <_dtoa_r+0xabc>
 80073b8:	f1b9 0f00 	cmp.w	r9, #0
 80073bc:	dd01      	ble.n	80073c2 <_dtoa_r+0xa72>
 80073be:	9b04      	ldr	r3, [sp, #16]
 80073c0:	3331      	adds	r3, #49	; 0x31
 80073c2:	9a02      	ldr	r2, [sp, #8]
 80073c4:	7013      	strb	r3, [r2, #0]
 80073c6:	e774      	b.n	80072b2 <_dtoa_r+0x962>
 80073c8:	4638      	mov	r0, r7
 80073ca:	e7b9      	b.n	8007340 <_dtoa_r+0x9f0>
 80073cc:	2201      	movs	r2, #1
 80073ce:	e7e2      	b.n	8007396 <_dtoa_r+0xa46>
 80073d0:	f1b9 0f00 	cmp.w	r9, #0
 80073d4:	db06      	blt.n	80073e4 <_dtoa_r+0xa94>
 80073d6:	9905      	ldr	r1, [sp, #20]
 80073d8:	ea41 0909 	orr.w	r9, r1, r9
 80073dc:	9906      	ldr	r1, [sp, #24]
 80073de:	ea59 0101 	orrs.w	r1, r9, r1
 80073e2:	d120      	bne.n	8007426 <_dtoa_r+0xad6>
 80073e4:	2a00      	cmp	r2, #0
 80073e6:	ddec      	ble.n	80073c2 <_dtoa_r+0xa72>
 80073e8:	4659      	mov	r1, fp
 80073ea:	2201      	movs	r2, #1
 80073ec:	4620      	mov	r0, r4
 80073ee:	9301      	str	r3, [sp, #4]
 80073f0:	f000 fbc0 	bl	8007b74 <__lshift>
 80073f4:	4631      	mov	r1, r6
 80073f6:	4683      	mov	fp, r0
 80073f8:	f000 fc28 	bl	8007c4c <__mcmp>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	9b01      	ldr	r3, [sp, #4]
 8007400:	dc02      	bgt.n	8007408 <_dtoa_r+0xab8>
 8007402:	d1de      	bne.n	80073c2 <_dtoa_r+0xa72>
 8007404:	07da      	lsls	r2, r3, #31
 8007406:	d5dc      	bpl.n	80073c2 <_dtoa_r+0xa72>
 8007408:	2b39      	cmp	r3, #57	; 0x39
 800740a:	d1d8      	bne.n	80073be <_dtoa_r+0xa6e>
 800740c:	9a02      	ldr	r2, [sp, #8]
 800740e:	2339      	movs	r3, #57	; 0x39
 8007410:	7013      	strb	r3, [r2, #0]
 8007412:	462b      	mov	r3, r5
 8007414:	461d      	mov	r5, r3
 8007416:	3b01      	subs	r3, #1
 8007418:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800741c:	2a39      	cmp	r2, #57	; 0x39
 800741e:	d050      	beq.n	80074c2 <_dtoa_r+0xb72>
 8007420:	3201      	adds	r2, #1
 8007422:	701a      	strb	r2, [r3, #0]
 8007424:	e745      	b.n	80072b2 <_dtoa_r+0x962>
 8007426:	2a00      	cmp	r2, #0
 8007428:	dd03      	ble.n	8007432 <_dtoa_r+0xae2>
 800742a:	2b39      	cmp	r3, #57	; 0x39
 800742c:	d0ee      	beq.n	800740c <_dtoa_r+0xabc>
 800742e:	3301      	adds	r3, #1
 8007430:	e7c7      	b.n	80073c2 <_dtoa_r+0xa72>
 8007432:	9a01      	ldr	r2, [sp, #4]
 8007434:	9907      	ldr	r1, [sp, #28]
 8007436:	f802 3c01 	strb.w	r3, [r2, #-1]
 800743a:	428a      	cmp	r2, r1
 800743c:	d02a      	beq.n	8007494 <_dtoa_r+0xb44>
 800743e:	4659      	mov	r1, fp
 8007440:	2300      	movs	r3, #0
 8007442:	220a      	movs	r2, #10
 8007444:	4620      	mov	r0, r4
 8007446:	f000 f9e5 	bl	8007814 <__multadd>
 800744a:	45b8      	cmp	r8, r7
 800744c:	4683      	mov	fp, r0
 800744e:	f04f 0300 	mov.w	r3, #0
 8007452:	f04f 020a 	mov.w	r2, #10
 8007456:	4641      	mov	r1, r8
 8007458:	4620      	mov	r0, r4
 800745a:	d107      	bne.n	800746c <_dtoa_r+0xb1c>
 800745c:	f000 f9da 	bl	8007814 <__multadd>
 8007460:	4680      	mov	r8, r0
 8007462:	4607      	mov	r7, r0
 8007464:	9b01      	ldr	r3, [sp, #4]
 8007466:	3301      	adds	r3, #1
 8007468:	9301      	str	r3, [sp, #4]
 800746a:	e775      	b.n	8007358 <_dtoa_r+0xa08>
 800746c:	f000 f9d2 	bl	8007814 <__multadd>
 8007470:	4639      	mov	r1, r7
 8007472:	4680      	mov	r8, r0
 8007474:	2300      	movs	r3, #0
 8007476:	220a      	movs	r2, #10
 8007478:	4620      	mov	r0, r4
 800747a:	f000 f9cb 	bl	8007814 <__multadd>
 800747e:	4607      	mov	r7, r0
 8007480:	e7f0      	b.n	8007464 <_dtoa_r+0xb14>
 8007482:	f1b9 0f00 	cmp.w	r9, #0
 8007486:	9a00      	ldr	r2, [sp, #0]
 8007488:	bfcc      	ite	gt
 800748a:	464d      	movgt	r5, r9
 800748c:	2501      	movle	r5, #1
 800748e:	4415      	add	r5, r2
 8007490:	f04f 0800 	mov.w	r8, #0
 8007494:	4659      	mov	r1, fp
 8007496:	2201      	movs	r2, #1
 8007498:	4620      	mov	r0, r4
 800749a:	9301      	str	r3, [sp, #4]
 800749c:	f000 fb6a 	bl	8007b74 <__lshift>
 80074a0:	4631      	mov	r1, r6
 80074a2:	4683      	mov	fp, r0
 80074a4:	f000 fbd2 	bl	8007c4c <__mcmp>
 80074a8:	2800      	cmp	r0, #0
 80074aa:	dcb2      	bgt.n	8007412 <_dtoa_r+0xac2>
 80074ac:	d102      	bne.n	80074b4 <_dtoa_r+0xb64>
 80074ae:	9b01      	ldr	r3, [sp, #4]
 80074b0:	07db      	lsls	r3, r3, #31
 80074b2:	d4ae      	bmi.n	8007412 <_dtoa_r+0xac2>
 80074b4:	462b      	mov	r3, r5
 80074b6:	461d      	mov	r5, r3
 80074b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074bc:	2a30      	cmp	r2, #48	; 0x30
 80074be:	d0fa      	beq.n	80074b6 <_dtoa_r+0xb66>
 80074c0:	e6f7      	b.n	80072b2 <_dtoa_r+0x962>
 80074c2:	9a00      	ldr	r2, [sp, #0]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d1a5      	bne.n	8007414 <_dtoa_r+0xac4>
 80074c8:	f10a 0a01 	add.w	sl, sl, #1
 80074cc:	2331      	movs	r3, #49	; 0x31
 80074ce:	e779      	b.n	80073c4 <_dtoa_r+0xa74>
 80074d0:	4b13      	ldr	r3, [pc, #76]	; (8007520 <_dtoa_r+0xbd0>)
 80074d2:	f7ff baaf 	b.w	8006a34 <_dtoa_r+0xe4>
 80074d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f47f aa86 	bne.w	80069ea <_dtoa_r+0x9a>
 80074de:	4b11      	ldr	r3, [pc, #68]	; (8007524 <_dtoa_r+0xbd4>)
 80074e0:	f7ff baa8 	b.w	8006a34 <_dtoa_r+0xe4>
 80074e4:	f1b9 0f00 	cmp.w	r9, #0
 80074e8:	dc03      	bgt.n	80074f2 <_dtoa_r+0xba2>
 80074ea:	9b05      	ldr	r3, [sp, #20]
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	f73f aec9 	bgt.w	8007284 <_dtoa_r+0x934>
 80074f2:	9d00      	ldr	r5, [sp, #0]
 80074f4:	4631      	mov	r1, r6
 80074f6:	4658      	mov	r0, fp
 80074f8:	f7ff f99c 	bl	8006834 <quorem>
 80074fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007500:	f805 3b01 	strb.w	r3, [r5], #1
 8007504:	9a00      	ldr	r2, [sp, #0]
 8007506:	1aaa      	subs	r2, r5, r2
 8007508:	4591      	cmp	r9, r2
 800750a:	ddba      	ble.n	8007482 <_dtoa_r+0xb32>
 800750c:	4659      	mov	r1, fp
 800750e:	2300      	movs	r3, #0
 8007510:	220a      	movs	r2, #10
 8007512:	4620      	mov	r0, r4
 8007514:	f000 f97e 	bl	8007814 <__multadd>
 8007518:	4683      	mov	fp, r0
 800751a:	e7eb      	b.n	80074f4 <_dtoa_r+0xba4>
 800751c:	08009ae7 	.word	0x08009ae7
 8007520:	08009a40 	.word	0x08009a40
 8007524:	08009a64 	.word	0x08009a64

08007528 <std>:
 8007528:	2300      	movs	r3, #0
 800752a:	b510      	push	{r4, lr}
 800752c:	4604      	mov	r4, r0
 800752e:	e9c0 3300 	strd	r3, r3, [r0]
 8007532:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007536:	6083      	str	r3, [r0, #8]
 8007538:	8181      	strh	r1, [r0, #12]
 800753a:	6643      	str	r3, [r0, #100]	; 0x64
 800753c:	81c2      	strh	r2, [r0, #14]
 800753e:	6183      	str	r3, [r0, #24]
 8007540:	4619      	mov	r1, r3
 8007542:	2208      	movs	r2, #8
 8007544:	305c      	adds	r0, #92	; 0x5c
 8007546:	f7fe fccb 	bl	8005ee0 <memset>
 800754a:	4b05      	ldr	r3, [pc, #20]	; (8007560 <std+0x38>)
 800754c:	6263      	str	r3, [r4, #36]	; 0x24
 800754e:	4b05      	ldr	r3, [pc, #20]	; (8007564 <std+0x3c>)
 8007550:	62a3      	str	r3, [r4, #40]	; 0x28
 8007552:	4b05      	ldr	r3, [pc, #20]	; (8007568 <std+0x40>)
 8007554:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007556:	4b05      	ldr	r3, [pc, #20]	; (800756c <std+0x44>)
 8007558:	6224      	str	r4, [r4, #32]
 800755a:	6323      	str	r3, [r4, #48]	; 0x30
 800755c:	bd10      	pop	{r4, pc}
 800755e:	bf00      	nop
 8007560:	0800854d 	.word	0x0800854d
 8007564:	0800856f 	.word	0x0800856f
 8007568:	080085a7 	.word	0x080085a7
 800756c:	080085cb 	.word	0x080085cb

08007570 <_cleanup_r>:
 8007570:	4901      	ldr	r1, [pc, #4]	; (8007578 <_cleanup_r+0x8>)
 8007572:	f000 b8af 	b.w	80076d4 <_fwalk_reent>
 8007576:	bf00      	nop
 8007578:	080088e1 	.word	0x080088e1

0800757c <__sfmoreglue>:
 800757c:	b570      	push	{r4, r5, r6, lr}
 800757e:	1e4a      	subs	r2, r1, #1
 8007580:	2568      	movs	r5, #104	; 0x68
 8007582:	4355      	muls	r5, r2
 8007584:	460e      	mov	r6, r1
 8007586:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800758a:	f000 fcbf 	bl	8007f0c <_malloc_r>
 800758e:	4604      	mov	r4, r0
 8007590:	b140      	cbz	r0, 80075a4 <__sfmoreglue+0x28>
 8007592:	2100      	movs	r1, #0
 8007594:	e9c0 1600 	strd	r1, r6, [r0]
 8007598:	300c      	adds	r0, #12
 800759a:	60a0      	str	r0, [r4, #8]
 800759c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80075a0:	f7fe fc9e 	bl	8005ee0 <memset>
 80075a4:	4620      	mov	r0, r4
 80075a6:	bd70      	pop	{r4, r5, r6, pc}

080075a8 <__sfp_lock_acquire>:
 80075a8:	4801      	ldr	r0, [pc, #4]	; (80075b0 <__sfp_lock_acquire+0x8>)
 80075aa:	f000 b8b8 	b.w	800771e <__retarget_lock_acquire_recursive>
 80075ae:	bf00      	nop
 80075b0:	200007a0 	.word	0x200007a0

080075b4 <__sfp_lock_release>:
 80075b4:	4801      	ldr	r0, [pc, #4]	; (80075bc <__sfp_lock_release+0x8>)
 80075b6:	f000 b8b3 	b.w	8007720 <__retarget_lock_release_recursive>
 80075ba:	bf00      	nop
 80075bc:	200007a0 	.word	0x200007a0

080075c0 <__sinit_lock_acquire>:
 80075c0:	4801      	ldr	r0, [pc, #4]	; (80075c8 <__sinit_lock_acquire+0x8>)
 80075c2:	f000 b8ac 	b.w	800771e <__retarget_lock_acquire_recursive>
 80075c6:	bf00      	nop
 80075c8:	2000079b 	.word	0x2000079b

080075cc <__sinit_lock_release>:
 80075cc:	4801      	ldr	r0, [pc, #4]	; (80075d4 <__sinit_lock_release+0x8>)
 80075ce:	f000 b8a7 	b.w	8007720 <__retarget_lock_release_recursive>
 80075d2:	bf00      	nop
 80075d4:	2000079b 	.word	0x2000079b

080075d8 <__sinit>:
 80075d8:	b510      	push	{r4, lr}
 80075da:	4604      	mov	r4, r0
 80075dc:	f7ff fff0 	bl	80075c0 <__sinit_lock_acquire>
 80075e0:	69a3      	ldr	r3, [r4, #24]
 80075e2:	b11b      	cbz	r3, 80075ec <__sinit+0x14>
 80075e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075e8:	f7ff bff0 	b.w	80075cc <__sinit_lock_release>
 80075ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80075f0:	6523      	str	r3, [r4, #80]	; 0x50
 80075f2:	4b13      	ldr	r3, [pc, #76]	; (8007640 <__sinit+0x68>)
 80075f4:	4a13      	ldr	r2, [pc, #76]	; (8007644 <__sinit+0x6c>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80075fa:	42a3      	cmp	r3, r4
 80075fc:	bf04      	itt	eq
 80075fe:	2301      	moveq	r3, #1
 8007600:	61a3      	streq	r3, [r4, #24]
 8007602:	4620      	mov	r0, r4
 8007604:	f000 f820 	bl	8007648 <__sfp>
 8007608:	6060      	str	r0, [r4, #4]
 800760a:	4620      	mov	r0, r4
 800760c:	f000 f81c 	bl	8007648 <__sfp>
 8007610:	60a0      	str	r0, [r4, #8]
 8007612:	4620      	mov	r0, r4
 8007614:	f000 f818 	bl	8007648 <__sfp>
 8007618:	2200      	movs	r2, #0
 800761a:	60e0      	str	r0, [r4, #12]
 800761c:	2104      	movs	r1, #4
 800761e:	6860      	ldr	r0, [r4, #4]
 8007620:	f7ff ff82 	bl	8007528 <std>
 8007624:	68a0      	ldr	r0, [r4, #8]
 8007626:	2201      	movs	r2, #1
 8007628:	2109      	movs	r1, #9
 800762a:	f7ff ff7d 	bl	8007528 <std>
 800762e:	68e0      	ldr	r0, [r4, #12]
 8007630:	2202      	movs	r2, #2
 8007632:	2112      	movs	r1, #18
 8007634:	f7ff ff78 	bl	8007528 <std>
 8007638:	2301      	movs	r3, #1
 800763a:	61a3      	str	r3, [r4, #24]
 800763c:	e7d2      	b.n	80075e4 <__sinit+0xc>
 800763e:	bf00      	nop
 8007640:	08009a2c 	.word	0x08009a2c
 8007644:	08007571 	.word	0x08007571

08007648 <__sfp>:
 8007648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764a:	4607      	mov	r7, r0
 800764c:	f7ff ffac 	bl	80075a8 <__sfp_lock_acquire>
 8007650:	4b1e      	ldr	r3, [pc, #120]	; (80076cc <__sfp+0x84>)
 8007652:	681e      	ldr	r6, [r3, #0]
 8007654:	69b3      	ldr	r3, [r6, #24]
 8007656:	b913      	cbnz	r3, 800765e <__sfp+0x16>
 8007658:	4630      	mov	r0, r6
 800765a:	f7ff ffbd 	bl	80075d8 <__sinit>
 800765e:	3648      	adds	r6, #72	; 0x48
 8007660:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007664:	3b01      	subs	r3, #1
 8007666:	d503      	bpl.n	8007670 <__sfp+0x28>
 8007668:	6833      	ldr	r3, [r6, #0]
 800766a:	b30b      	cbz	r3, 80076b0 <__sfp+0x68>
 800766c:	6836      	ldr	r6, [r6, #0]
 800766e:	e7f7      	b.n	8007660 <__sfp+0x18>
 8007670:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007674:	b9d5      	cbnz	r5, 80076ac <__sfp+0x64>
 8007676:	4b16      	ldr	r3, [pc, #88]	; (80076d0 <__sfp+0x88>)
 8007678:	60e3      	str	r3, [r4, #12]
 800767a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800767e:	6665      	str	r5, [r4, #100]	; 0x64
 8007680:	f000 f84c 	bl	800771c <__retarget_lock_init_recursive>
 8007684:	f7ff ff96 	bl	80075b4 <__sfp_lock_release>
 8007688:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800768c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007690:	6025      	str	r5, [r4, #0]
 8007692:	61a5      	str	r5, [r4, #24]
 8007694:	2208      	movs	r2, #8
 8007696:	4629      	mov	r1, r5
 8007698:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800769c:	f7fe fc20 	bl	8005ee0 <memset>
 80076a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80076a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80076a8:	4620      	mov	r0, r4
 80076aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076ac:	3468      	adds	r4, #104	; 0x68
 80076ae:	e7d9      	b.n	8007664 <__sfp+0x1c>
 80076b0:	2104      	movs	r1, #4
 80076b2:	4638      	mov	r0, r7
 80076b4:	f7ff ff62 	bl	800757c <__sfmoreglue>
 80076b8:	4604      	mov	r4, r0
 80076ba:	6030      	str	r0, [r6, #0]
 80076bc:	2800      	cmp	r0, #0
 80076be:	d1d5      	bne.n	800766c <__sfp+0x24>
 80076c0:	f7ff ff78 	bl	80075b4 <__sfp_lock_release>
 80076c4:	230c      	movs	r3, #12
 80076c6:	603b      	str	r3, [r7, #0]
 80076c8:	e7ee      	b.n	80076a8 <__sfp+0x60>
 80076ca:	bf00      	nop
 80076cc:	08009a2c 	.word	0x08009a2c
 80076d0:	ffff0001 	.word	0xffff0001

080076d4 <_fwalk_reent>:
 80076d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076d8:	4606      	mov	r6, r0
 80076da:	4688      	mov	r8, r1
 80076dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80076e0:	2700      	movs	r7, #0
 80076e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076e6:	f1b9 0901 	subs.w	r9, r9, #1
 80076ea:	d505      	bpl.n	80076f8 <_fwalk_reent+0x24>
 80076ec:	6824      	ldr	r4, [r4, #0]
 80076ee:	2c00      	cmp	r4, #0
 80076f0:	d1f7      	bne.n	80076e2 <_fwalk_reent+0xe>
 80076f2:	4638      	mov	r0, r7
 80076f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076f8:	89ab      	ldrh	r3, [r5, #12]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d907      	bls.n	800770e <_fwalk_reent+0x3a>
 80076fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007702:	3301      	adds	r3, #1
 8007704:	d003      	beq.n	800770e <_fwalk_reent+0x3a>
 8007706:	4629      	mov	r1, r5
 8007708:	4630      	mov	r0, r6
 800770a:	47c0      	blx	r8
 800770c:	4307      	orrs	r7, r0
 800770e:	3568      	adds	r5, #104	; 0x68
 8007710:	e7e9      	b.n	80076e6 <_fwalk_reent+0x12>
	...

08007714 <_localeconv_r>:
 8007714:	4800      	ldr	r0, [pc, #0]	; (8007718 <_localeconv_r+0x4>)
 8007716:	4770      	bx	lr
 8007718:	20000168 	.word	0x20000168

0800771c <__retarget_lock_init_recursive>:
 800771c:	4770      	bx	lr

0800771e <__retarget_lock_acquire_recursive>:
 800771e:	4770      	bx	lr

08007720 <__retarget_lock_release_recursive>:
 8007720:	4770      	bx	lr
	...

08007724 <malloc>:
 8007724:	4b02      	ldr	r3, [pc, #8]	; (8007730 <malloc+0xc>)
 8007726:	4601      	mov	r1, r0
 8007728:	6818      	ldr	r0, [r3, #0]
 800772a:	f000 bbef 	b.w	8007f0c <_malloc_r>
 800772e:	bf00      	nop
 8007730:	20000014 	.word	0x20000014

08007734 <memcpy>:
 8007734:	440a      	add	r2, r1
 8007736:	4291      	cmp	r1, r2
 8007738:	f100 33ff 	add.w	r3, r0, #4294967295
 800773c:	d100      	bne.n	8007740 <memcpy+0xc>
 800773e:	4770      	bx	lr
 8007740:	b510      	push	{r4, lr}
 8007742:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007746:	f803 4f01 	strb.w	r4, [r3, #1]!
 800774a:	4291      	cmp	r1, r2
 800774c:	d1f9      	bne.n	8007742 <memcpy+0xe>
 800774e:	bd10      	pop	{r4, pc}

08007750 <_Balloc>:
 8007750:	b570      	push	{r4, r5, r6, lr}
 8007752:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007754:	4604      	mov	r4, r0
 8007756:	460d      	mov	r5, r1
 8007758:	b976      	cbnz	r6, 8007778 <_Balloc+0x28>
 800775a:	2010      	movs	r0, #16
 800775c:	f7ff ffe2 	bl	8007724 <malloc>
 8007760:	4602      	mov	r2, r0
 8007762:	6260      	str	r0, [r4, #36]	; 0x24
 8007764:	b920      	cbnz	r0, 8007770 <_Balloc+0x20>
 8007766:	4b18      	ldr	r3, [pc, #96]	; (80077c8 <_Balloc+0x78>)
 8007768:	4818      	ldr	r0, [pc, #96]	; (80077cc <_Balloc+0x7c>)
 800776a:	2166      	movs	r1, #102	; 0x66
 800776c:	f001 f804 	bl	8008778 <__assert_func>
 8007770:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007774:	6006      	str	r6, [r0, #0]
 8007776:	60c6      	str	r6, [r0, #12]
 8007778:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800777a:	68f3      	ldr	r3, [r6, #12]
 800777c:	b183      	cbz	r3, 80077a0 <_Balloc+0x50>
 800777e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007786:	b9b8      	cbnz	r0, 80077b8 <_Balloc+0x68>
 8007788:	2101      	movs	r1, #1
 800778a:	fa01 f605 	lsl.w	r6, r1, r5
 800778e:	1d72      	adds	r2, r6, #5
 8007790:	0092      	lsls	r2, r2, #2
 8007792:	4620      	mov	r0, r4
 8007794:	f000 fb5a 	bl	8007e4c <_calloc_r>
 8007798:	b160      	cbz	r0, 80077b4 <_Balloc+0x64>
 800779a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800779e:	e00e      	b.n	80077be <_Balloc+0x6e>
 80077a0:	2221      	movs	r2, #33	; 0x21
 80077a2:	2104      	movs	r1, #4
 80077a4:	4620      	mov	r0, r4
 80077a6:	f000 fb51 	bl	8007e4c <_calloc_r>
 80077aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077ac:	60f0      	str	r0, [r6, #12]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1e4      	bne.n	800777e <_Balloc+0x2e>
 80077b4:	2000      	movs	r0, #0
 80077b6:	bd70      	pop	{r4, r5, r6, pc}
 80077b8:	6802      	ldr	r2, [r0, #0]
 80077ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077be:	2300      	movs	r3, #0
 80077c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077c4:	e7f7      	b.n	80077b6 <_Balloc+0x66>
 80077c6:	bf00      	nop
 80077c8:	08009a71 	.word	0x08009a71
 80077cc:	08009b58 	.word	0x08009b58

080077d0 <_Bfree>:
 80077d0:	b570      	push	{r4, r5, r6, lr}
 80077d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80077d4:	4605      	mov	r5, r0
 80077d6:	460c      	mov	r4, r1
 80077d8:	b976      	cbnz	r6, 80077f8 <_Bfree+0x28>
 80077da:	2010      	movs	r0, #16
 80077dc:	f7ff ffa2 	bl	8007724 <malloc>
 80077e0:	4602      	mov	r2, r0
 80077e2:	6268      	str	r0, [r5, #36]	; 0x24
 80077e4:	b920      	cbnz	r0, 80077f0 <_Bfree+0x20>
 80077e6:	4b09      	ldr	r3, [pc, #36]	; (800780c <_Bfree+0x3c>)
 80077e8:	4809      	ldr	r0, [pc, #36]	; (8007810 <_Bfree+0x40>)
 80077ea:	218a      	movs	r1, #138	; 0x8a
 80077ec:	f000 ffc4 	bl	8008778 <__assert_func>
 80077f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077f4:	6006      	str	r6, [r0, #0]
 80077f6:	60c6      	str	r6, [r0, #12]
 80077f8:	b13c      	cbz	r4, 800780a <_Bfree+0x3a>
 80077fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80077fc:	6862      	ldr	r2, [r4, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007804:	6021      	str	r1, [r4, #0]
 8007806:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800780a:	bd70      	pop	{r4, r5, r6, pc}
 800780c:	08009a71 	.word	0x08009a71
 8007810:	08009b58 	.word	0x08009b58

08007814 <__multadd>:
 8007814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007818:	690e      	ldr	r6, [r1, #16]
 800781a:	4607      	mov	r7, r0
 800781c:	4698      	mov	r8, r3
 800781e:	460c      	mov	r4, r1
 8007820:	f101 0014 	add.w	r0, r1, #20
 8007824:	2300      	movs	r3, #0
 8007826:	6805      	ldr	r5, [r0, #0]
 8007828:	b2a9      	uxth	r1, r5
 800782a:	fb02 8101 	mla	r1, r2, r1, r8
 800782e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8007832:	0c2d      	lsrs	r5, r5, #16
 8007834:	fb02 c505 	mla	r5, r2, r5, ip
 8007838:	b289      	uxth	r1, r1
 800783a:	3301      	adds	r3, #1
 800783c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8007840:	429e      	cmp	r6, r3
 8007842:	f840 1b04 	str.w	r1, [r0], #4
 8007846:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800784a:	dcec      	bgt.n	8007826 <__multadd+0x12>
 800784c:	f1b8 0f00 	cmp.w	r8, #0
 8007850:	d022      	beq.n	8007898 <__multadd+0x84>
 8007852:	68a3      	ldr	r3, [r4, #8]
 8007854:	42b3      	cmp	r3, r6
 8007856:	dc19      	bgt.n	800788c <__multadd+0x78>
 8007858:	6861      	ldr	r1, [r4, #4]
 800785a:	4638      	mov	r0, r7
 800785c:	3101      	adds	r1, #1
 800785e:	f7ff ff77 	bl	8007750 <_Balloc>
 8007862:	4605      	mov	r5, r0
 8007864:	b928      	cbnz	r0, 8007872 <__multadd+0x5e>
 8007866:	4602      	mov	r2, r0
 8007868:	4b0d      	ldr	r3, [pc, #52]	; (80078a0 <__multadd+0x8c>)
 800786a:	480e      	ldr	r0, [pc, #56]	; (80078a4 <__multadd+0x90>)
 800786c:	21b5      	movs	r1, #181	; 0xb5
 800786e:	f000 ff83 	bl	8008778 <__assert_func>
 8007872:	6922      	ldr	r2, [r4, #16]
 8007874:	3202      	adds	r2, #2
 8007876:	f104 010c 	add.w	r1, r4, #12
 800787a:	0092      	lsls	r2, r2, #2
 800787c:	300c      	adds	r0, #12
 800787e:	f7ff ff59 	bl	8007734 <memcpy>
 8007882:	4621      	mov	r1, r4
 8007884:	4638      	mov	r0, r7
 8007886:	f7ff ffa3 	bl	80077d0 <_Bfree>
 800788a:	462c      	mov	r4, r5
 800788c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007890:	3601      	adds	r6, #1
 8007892:	f8c3 8014 	str.w	r8, [r3, #20]
 8007896:	6126      	str	r6, [r4, #16]
 8007898:	4620      	mov	r0, r4
 800789a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800789e:	bf00      	nop
 80078a0:	08009ae7 	.word	0x08009ae7
 80078a4:	08009b58 	.word	0x08009b58

080078a8 <__hi0bits>:
 80078a8:	0c03      	lsrs	r3, r0, #16
 80078aa:	041b      	lsls	r3, r3, #16
 80078ac:	b9d3      	cbnz	r3, 80078e4 <__hi0bits+0x3c>
 80078ae:	0400      	lsls	r0, r0, #16
 80078b0:	2310      	movs	r3, #16
 80078b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80078b6:	bf04      	itt	eq
 80078b8:	0200      	lsleq	r0, r0, #8
 80078ba:	3308      	addeq	r3, #8
 80078bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80078c0:	bf04      	itt	eq
 80078c2:	0100      	lsleq	r0, r0, #4
 80078c4:	3304      	addeq	r3, #4
 80078c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80078ca:	bf04      	itt	eq
 80078cc:	0080      	lsleq	r0, r0, #2
 80078ce:	3302      	addeq	r3, #2
 80078d0:	2800      	cmp	r0, #0
 80078d2:	db05      	blt.n	80078e0 <__hi0bits+0x38>
 80078d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80078d8:	f103 0301 	add.w	r3, r3, #1
 80078dc:	bf08      	it	eq
 80078de:	2320      	moveq	r3, #32
 80078e0:	4618      	mov	r0, r3
 80078e2:	4770      	bx	lr
 80078e4:	2300      	movs	r3, #0
 80078e6:	e7e4      	b.n	80078b2 <__hi0bits+0xa>

080078e8 <__lo0bits>:
 80078e8:	6803      	ldr	r3, [r0, #0]
 80078ea:	f013 0207 	ands.w	r2, r3, #7
 80078ee:	4601      	mov	r1, r0
 80078f0:	d00b      	beq.n	800790a <__lo0bits+0x22>
 80078f2:	07da      	lsls	r2, r3, #31
 80078f4:	d424      	bmi.n	8007940 <__lo0bits+0x58>
 80078f6:	0798      	lsls	r0, r3, #30
 80078f8:	bf49      	itett	mi
 80078fa:	085b      	lsrmi	r3, r3, #1
 80078fc:	089b      	lsrpl	r3, r3, #2
 80078fe:	2001      	movmi	r0, #1
 8007900:	600b      	strmi	r3, [r1, #0]
 8007902:	bf5c      	itt	pl
 8007904:	600b      	strpl	r3, [r1, #0]
 8007906:	2002      	movpl	r0, #2
 8007908:	4770      	bx	lr
 800790a:	b298      	uxth	r0, r3
 800790c:	b9b0      	cbnz	r0, 800793c <__lo0bits+0x54>
 800790e:	0c1b      	lsrs	r3, r3, #16
 8007910:	2010      	movs	r0, #16
 8007912:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007916:	bf04      	itt	eq
 8007918:	0a1b      	lsreq	r3, r3, #8
 800791a:	3008      	addeq	r0, #8
 800791c:	071a      	lsls	r2, r3, #28
 800791e:	bf04      	itt	eq
 8007920:	091b      	lsreq	r3, r3, #4
 8007922:	3004      	addeq	r0, #4
 8007924:	079a      	lsls	r2, r3, #30
 8007926:	bf04      	itt	eq
 8007928:	089b      	lsreq	r3, r3, #2
 800792a:	3002      	addeq	r0, #2
 800792c:	07da      	lsls	r2, r3, #31
 800792e:	d403      	bmi.n	8007938 <__lo0bits+0x50>
 8007930:	085b      	lsrs	r3, r3, #1
 8007932:	f100 0001 	add.w	r0, r0, #1
 8007936:	d005      	beq.n	8007944 <__lo0bits+0x5c>
 8007938:	600b      	str	r3, [r1, #0]
 800793a:	4770      	bx	lr
 800793c:	4610      	mov	r0, r2
 800793e:	e7e8      	b.n	8007912 <__lo0bits+0x2a>
 8007940:	2000      	movs	r0, #0
 8007942:	4770      	bx	lr
 8007944:	2020      	movs	r0, #32
 8007946:	4770      	bx	lr

08007948 <__i2b>:
 8007948:	b510      	push	{r4, lr}
 800794a:	460c      	mov	r4, r1
 800794c:	2101      	movs	r1, #1
 800794e:	f7ff feff 	bl	8007750 <_Balloc>
 8007952:	4602      	mov	r2, r0
 8007954:	b928      	cbnz	r0, 8007962 <__i2b+0x1a>
 8007956:	4b05      	ldr	r3, [pc, #20]	; (800796c <__i2b+0x24>)
 8007958:	4805      	ldr	r0, [pc, #20]	; (8007970 <__i2b+0x28>)
 800795a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800795e:	f000 ff0b 	bl	8008778 <__assert_func>
 8007962:	2301      	movs	r3, #1
 8007964:	6144      	str	r4, [r0, #20]
 8007966:	6103      	str	r3, [r0, #16]
 8007968:	bd10      	pop	{r4, pc}
 800796a:	bf00      	nop
 800796c:	08009ae7 	.word	0x08009ae7
 8007970:	08009b58 	.word	0x08009b58

08007974 <__multiply>:
 8007974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007978:	4614      	mov	r4, r2
 800797a:	690a      	ldr	r2, [r1, #16]
 800797c:	6923      	ldr	r3, [r4, #16]
 800797e:	429a      	cmp	r2, r3
 8007980:	bfb8      	it	lt
 8007982:	460b      	movlt	r3, r1
 8007984:	460d      	mov	r5, r1
 8007986:	bfbc      	itt	lt
 8007988:	4625      	movlt	r5, r4
 800798a:	461c      	movlt	r4, r3
 800798c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007990:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007994:	68ab      	ldr	r3, [r5, #8]
 8007996:	6869      	ldr	r1, [r5, #4]
 8007998:	eb0a 0709 	add.w	r7, sl, r9
 800799c:	42bb      	cmp	r3, r7
 800799e:	b085      	sub	sp, #20
 80079a0:	bfb8      	it	lt
 80079a2:	3101      	addlt	r1, #1
 80079a4:	f7ff fed4 	bl	8007750 <_Balloc>
 80079a8:	b930      	cbnz	r0, 80079b8 <__multiply+0x44>
 80079aa:	4602      	mov	r2, r0
 80079ac:	4b42      	ldr	r3, [pc, #264]	; (8007ab8 <__multiply+0x144>)
 80079ae:	4843      	ldr	r0, [pc, #268]	; (8007abc <__multiply+0x148>)
 80079b0:	f240 115d 	movw	r1, #349	; 0x15d
 80079b4:	f000 fee0 	bl	8008778 <__assert_func>
 80079b8:	f100 0614 	add.w	r6, r0, #20
 80079bc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80079c0:	4633      	mov	r3, r6
 80079c2:	2200      	movs	r2, #0
 80079c4:	4543      	cmp	r3, r8
 80079c6:	d31e      	bcc.n	8007a06 <__multiply+0x92>
 80079c8:	f105 0c14 	add.w	ip, r5, #20
 80079cc:	f104 0314 	add.w	r3, r4, #20
 80079d0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80079d4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80079d8:	9202      	str	r2, [sp, #8]
 80079da:	ebac 0205 	sub.w	r2, ip, r5
 80079de:	3a15      	subs	r2, #21
 80079e0:	f022 0203 	bic.w	r2, r2, #3
 80079e4:	3204      	adds	r2, #4
 80079e6:	f105 0115 	add.w	r1, r5, #21
 80079ea:	458c      	cmp	ip, r1
 80079ec:	bf38      	it	cc
 80079ee:	2204      	movcc	r2, #4
 80079f0:	9201      	str	r2, [sp, #4]
 80079f2:	9a02      	ldr	r2, [sp, #8]
 80079f4:	9303      	str	r3, [sp, #12]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d808      	bhi.n	8007a0c <__multiply+0x98>
 80079fa:	2f00      	cmp	r7, #0
 80079fc:	dc55      	bgt.n	8007aaa <__multiply+0x136>
 80079fe:	6107      	str	r7, [r0, #16]
 8007a00:	b005      	add	sp, #20
 8007a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a06:	f843 2b04 	str.w	r2, [r3], #4
 8007a0a:	e7db      	b.n	80079c4 <__multiply+0x50>
 8007a0c:	f8b3 a000 	ldrh.w	sl, [r3]
 8007a10:	f1ba 0f00 	cmp.w	sl, #0
 8007a14:	d020      	beq.n	8007a58 <__multiply+0xe4>
 8007a16:	f105 0e14 	add.w	lr, r5, #20
 8007a1a:	46b1      	mov	r9, r6
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007a22:	f8d9 b000 	ldr.w	fp, [r9]
 8007a26:	b2a1      	uxth	r1, r4
 8007a28:	fa1f fb8b 	uxth.w	fp, fp
 8007a2c:	fb0a b101 	mla	r1, sl, r1, fp
 8007a30:	4411      	add	r1, r2
 8007a32:	f8d9 2000 	ldr.w	r2, [r9]
 8007a36:	0c24      	lsrs	r4, r4, #16
 8007a38:	0c12      	lsrs	r2, r2, #16
 8007a3a:	fb0a 2404 	mla	r4, sl, r4, r2
 8007a3e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007a42:	b289      	uxth	r1, r1
 8007a44:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007a48:	45f4      	cmp	ip, lr
 8007a4a:	f849 1b04 	str.w	r1, [r9], #4
 8007a4e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007a52:	d8e4      	bhi.n	8007a1e <__multiply+0xaa>
 8007a54:	9901      	ldr	r1, [sp, #4]
 8007a56:	5072      	str	r2, [r6, r1]
 8007a58:	9a03      	ldr	r2, [sp, #12]
 8007a5a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007a5e:	3304      	adds	r3, #4
 8007a60:	f1b9 0f00 	cmp.w	r9, #0
 8007a64:	d01f      	beq.n	8007aa6 <__multiply+0x132>
 8007a66:	6834      	ldr	r4, [r6, #0]
 8007a68:	f105 0114 	add.w	r1, r5, #20
 8007a6c:	46b6      	mov	lr, r6
 8007a6e:	f04f 0a00 	mov.w	sl, #0
 8007a72:	880a      	ldrh	r2, [r1, #0]
 8007a74:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007a78:	fb09 b202 	mla	r2, r9, r2, fp
 8007a7c:	4492      	add	sl, r2
 8007a7e:	b2a4      	uxth	r4, r4
 8007a80:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007a84:	f84e 4b04 	str.w	r4, [lr], #4
 8007a88:	f851 4b04 	ldr.w	r4, [r1], #4
 8007a8c:	f8be 2000 	ldrh.w	r2, [lr]
 8007a90:	0c24      	lsrs	r4, r4, #16
 8007a92:	fb09 2404 	mla	r4, r9, r4, r2
 8007a96:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007a9a:	458c      	cmp	ip, r1
 8007a9c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007aa0:	d8e7      	bhi.n	8007a72 <__multiply+0xfe>
 8007aa2:	9a01      	ldr	r2, [sp, #4]
 8007aa4:	50b4      	str	r4, [r6, r2]
 8007aa6:	3604      	adds	r6, #4
 8007aa8:	e7a3      	b.n	80079f2 <__multiply+0x7e>
 8007aaa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1a5      	bne.n	80079fe <__multiply+0x8a>
 8007ab2:	3f01      	subs	r7, #1
 8007ab4:	e7a1      	b.n	80079fa <__multiply+0x86>
 8007ab6:	bf00      	nop
 8007ab8:	08009ae7 	.word	0x08009ae7
 8007abc:	08009b58 	.word	0x08009b58

08007ac0 <__pow5mult>:
 8007ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ac4:	4615      	mov	r5, r2
 8007ac6:	f012 0203 	ands.w	r2, r2, #3
 8007aca:	4606      	mov	r6, r0
 8007acc:	460f      	mov	r7, r1
 8007ace:	d007      	beq.n	8007ae0 <__pow5mult+0x20>
 8007ad0:	4c25      	ldr	r4, [pc, #148]	; (8007b68 <__pow5mult+0xa8>)
 8007ad2:	3a01      	subs	r2, #1
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ada:	f7ff fe9b 	bl	8007814 <__multadd>
 8007ade:	4607      	mov	r7, r0
 8007ae0:	10ad      	asrs	r5, r5, #2
 8007ae2:	d03d      	beq.n	8007b60 <__pow5mult+0xa0>
 8007ae4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007ae6:	b97c      	cbnz	r4, 8007b08 <__pow5mult+0x48>
 8007ae8:	2010      	movs	r0, #16
 8007aea:	f7ff fe1b 	bl	8007724 <malloc>
 8007aee:	4602      	mov	r2, r0
 8007af0:	6270      	str	r0, [r6, #36]	; 0x24
 8007af2:	b928      	cbnz	r0, 8007b00 <__pow5mult+0x40>
 8007af4:	4b1d      	ldr	r3, [pc, #116]	; (8007b6c <__pow5mult+0xac>)
 8007af6:	481e      	ldr	r0, [pc, #120]	; (8007b70 <__pow5mult+0xb0>)
 8007af8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007afc:	f000 fe3c 	bl	8008778 <__assert_func>
 8007b00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b04:	6004      	str	r4, [r0, #0]
 8007b06:	60c4      	str	r4, [r0, #12]
 8007b08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007b0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007b10:	b94c      	cbnz	r4, 8007b26 <__pow5mult+0x66>
 8007b12:	f240 2171 	movw	r1, #625	; 0x271
 8007b16:	4630      	mov	r0, r6
 8007b18:	f7ff ff16 	bl	8007948 <__i2b>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b22:	4604      	mov	r4, r0
 8007b24:	6003      	str	r3, [r0, #0]
 8007b26:	f04f 0900 	mov.w	r9, #0
 8007b2a:	07eb      	lsls	r3, r5, #31
 8007b2c:	d50a      	bpl.n	8007b44 <__pow5mult+0x84>
 8007b2e:	4639      	mov	r1, r7
 8007b30:	4622      	mov	r2, r4
 8007b32:	4630      	mov	r0, r6
 8007b34:	f7ff ff1e 	bl	8007974 <__multiply>
 8007b38:	4639      	mov	r1, r7
 8007b3a:	4680      	mov	r8, r0
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	f7ff fe47 	bl	80077d0 <_Bfree>
 8007b42:	4647      	mov	r7, r8
 8007b44:	106d      	asrs	r5, r5, #1
 8007b46:	d00b      	beq.n	8007b60 <__pow5mult+0xa0>
 8007b48:	6820      	ldr	r0, [r4, #0]
 8007b4a:	b938      	cbnz	r0, 8007b5c <__pow5mult+0x9c>
 8007b4c:	4622      	mov	r2, r4
 8007b4e:	4621      	mov	r1, r4
 8007b50:	4630      	mov	r0, r6
 8007b52:	f7ff ff0f 	bl	8007974 <__multiply>
 8007b56:	6020      	str	r0, [r4, #0]
 8007b58:	f8c0 9000 	str.w	r9, [r0]
 8007b5c:	4604      	mov	r4, r0
 8007b5e:	e7e4      	b.n	8007b2a <__pow5mult+0x6a>
 8007b60:	4638      	mov	r0, r7
 8007b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b66:	bf00      	nop
 8007b68:	08009ca8 	.word	0x08009ca8
 8007b6c:	08009a71 	.word	0x08009a71
 8007b70:	08009b58 	.word	0x08009b58

08007b74 <__lshift>:
 8007b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b78:	460c      	mov	r4, r1
 8007b7a:	6849      	ldr	r1, [r1, #4]
 8007b7c:	6923      	ldr	r3, [r4, #16]
 8007b7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b82:	68a3      	ldr	r3, [r4, #8]
 8007b84:	4607      	mov	r7, r0
 8007b86:	4691      	mov	r9, r2
 8007b88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b8c:	f108 0601 	add.w	r6, r8, #1
 8007b90:	42b3      	cmp	r3, r6
 8007b92:	db0b      	blt.n	8007bac <__lshift+0x38>
 8007b94:	4638      	mov	r0, r7
 8007b96:	f7ff fddb 	bl	8007750 <_Balloc>
 8007b9a:	4605      	mov	r5, r0
 8007b9c:	b948      	cbnz	r0, 8007bb2 <__lshift+0x3e>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	4b28      	ldr	r3, [pc, #160]	; (8007c44 <__lshift+0xd0>)
 8007ba2:	4829      	ldr	r0, [pc, #164]	; (8007c48 <__lshift+0xd4>)
 8007ba4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007ba8:	f000 fde6 	bl	8008778 <__assert_func>
 8007bac:	3101      	adds	r1, #1
 8007bae:	005b      	lsls	r3, r3, #1
 8007bb0:	e7ee      	b.n	8007b90 <__lshift+0x1c>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	f100 0114 	add.w	r1, r0, #20
 8007bb8:	f100 0210 	add.w	r2, r0, #16
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	4553      	cmp	r3, sl
 8007bc0:	db33      	blt.n	8007c2a <__lshift+0xb6>
 8007bc2:	6920      	ldr	r0, [r4, #16]
 8007bc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007bc8:	f104 0314 	add.w	r3, r4, #20
 8007bcc:	f019 091f 	ands.w	r9, r9, #31
 8007bd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007bd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007bd8:	d02b      	beq.n	8007c32 <__lshift+0xbe>
 8007bda:	f1c9 0e20 	rsb	lr, r9, #32
 8007bde:	468a      	mov	sl, r1
 8007be0:	2200      	movs	r2, #0
 8007be2:	6818      	ldr	r0, [r3, #0]
 8007be4:	fa00 f009 	lsl.w	r0, r0, r9
 8007be8:	4302      	orrs	r2, r0
 8007bea:	f84a 2b04 	str.w	r2, [sl], #4
 8007bee:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bf2:	459c      	cmp	ip, r3
 8007bf4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007bf8:	d8f3      	bhi.n	8007be2 <__lshift+0x6e>
 8007bfa:	ebac 0304 	sub.w	r3, ip, r4
 8007bfe:	3b15      	subs	r3, #21
 8007c00:	f023 0303 	bic.w	r3, r3, #3
 8007c04:	3304      	adds	r3, #4
 8007c06:	f104 0015 	add.w	r0, r4, #21
 8007c0a:	4584      	cmp	ip, r0
 8007c0c:	bf38      	it	cc
 8007c0e:	2304      	movcc	r3, #4
 8007c10:	50ca      	str	r2, [r1, r3]
 8007c12:	b10a      	cbz	r2, 8007c18 <__lshift+0xa4>
 8007c14:	f108 0602 	add.w	r6, r8, #2
 8007c18:	3e01      	subs	r6, #1
 8007c1a:	4638      	mov	r0, r7
 8007c1c:	612e      	str	r6, [r5, #16]
 8007c1e:	4621      	mov	r1, r4
 8007c20:	f7ff fdd6 	bl	80077d0 <_Bfree>
 8007c24:	4628      	mov	r0, r5
 8007c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007c2e:	3301      	adds	r3, #1
 8007c30:	e7c5      	b.n	8007bbe <__lshift+0x4a>
 8007c32:	3904      	subs	r1, #4
 8007c34:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c38:	f841 2f04 	str.w	r2, [r1, #4]!
 8007c3c:	459c      	cmp	ip, r3
 8007c3e:	d8f9      	bhi.n	8007c34 <__lshift+0xc0>
 8007c40:	e7ea      	b.n	8007c18 <__lshift+0xa4>
 8007c42:	bf00      	nop
 8007c44:	08009ae7 	.word	0x08009ae7
 8007c48:	08009b58 	.word	0x08009b58

08007c4c <__mcmp>:
 8007c4c:	b530      	push	{r4, r5, lr}
 8007c4e:	6902      	ldr	r2, [r0, #16]
 8007c50:	690c      	ldr	r4, [r1, #16]
 8007c52:	1b12      	subs	r2, r2, r4
 8007c54:	d10e      	bne.n	8007c74 <__mcmp+0x28>
 8007c56:	f100 0314 	add.w	r3, r0, #20
 8007c5a:	3114      	adds	r1, #20
 8007c5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007c60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007c64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007c68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007c6c:	42a5      	cmp	r5, r4
 8007c6e:	d003      	beq.n	8007c78 <__mcmp+0x2c>
 8007c70:	d305      	bcc.n	8007c7e <__mcmp+0x32>
 8007c72:	2201      	movs	r2, #1
 8007c74:	4610      	mov	r0, r2
 8007c76:	bd30      	pop	{r4, r5, pc}
 8007c78:	4283      	cmp	r3, r0
 8007c7a:	d3f3      	bcc.n	8007c64 <__mcmp+0x18>
 8007c7c:	e7fa      	b.n	8007c74 <__mcmp+0x28>
 8007c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c82:	e7f7      	b.n	8007c74 <__mcmp+0x28>

08007c84 <__mdiff>:
 8007c84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c88:	460c      	mov	r4, r1
 8007c8a:	4606      	mov	r6, r0
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	4620      	mov	r0, r4
 8007c90:	4617      	mov	r7, r2
 8007c92:	f7ff ffdb 	bl	8007c4c <__mcmp>
 8007c96:	1e05      	subs	r5, r0, #0
 8007c98:	d110      	bne.n	8007cbc <__mdiff+0x38>
 8007c9a:	4629      	mov	r1, r5
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f7ff fd57 	bl	8007750 <_Balloc>
 8007ca2:	b930      	cbnz	r0, 8007cb2 <__mdiff+0x2e>
 8007ca4:	4b39      	ldr	r3, [pc, #228]	; (8007d8c <__mdiff+0x108>)
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	f240 2132 	movw	r1, #562	; 0x232
 8007cac:	4838      	ldr	r0, [pc, #224]	; (8007d90 <__mdiff+0x10c>)
 8007cae:	f000 fd63 	bl	8008778 <__assert_func>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007cb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cbc:	bfa4      	itt	ge
 8007cbe:	463b      	movge	r3, r7
 8007cc0:	4627      	movge	r7, r4
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	6879      	ldr	r1, [r7, #4]
 8007cc6:	bfa6      	itte	ge
 8007cc8:	461c      	movge	r4, r3
 8007cca:	2500      	movge	r5, #0
 8007ccc:	2501      	movlt	r5, #1
 8007cce:	f7ff fd3f 	bl	8007750 <_Balloc>
 8007cd2:	b920      	cbnz	r0, 8007cde <__mdiff+0x5a>
 8007cd4:	4b2d      	ldr	r3, [pc, #180]	; (8007d8c <__mdiff+0x108>)
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007cdc:	e7e6      	b.n	8007cac <__mdiff+0x28>
 8007cde:	693e      	ldr	r6, [r7, #16]
 8007ce0:	60c5      	str	r5, [r0, #12]
 8007ce2:	6925      	ldr	r5, [r4, #16]
 8007ce4:	f107 0114 	add.w	r1, r7, #20
 8007ce8:	f104 0914 	add.w	r9, r4, #20
 8007cec:	f100 0e14 	add.w	lr, r0, #20
 8007cf0:	f107 0210 	add.w	r2, r7, #16
 8007cf4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007cf8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007cfc:	46f2      	mov	sl, lr
 8007cfe:	2700      	movs	r7, #0
 8007d00:	f859 3b04 	ldr.w	r3, [r9], #4
 8007d04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007d08:	fa1f f883 	uxth.w	r8, r3
 8007d0c:	fa17 f78b 	uxtah	r7, r7, fp
 8007d10:	0c1b      	lsrs	r3, r3, #16
 8007d12:	eba7 0808 	sub.w	r8, r7, r8
 8007d16:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007d1a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007d1e:	fa1f f888 	uxth.w	r8, r8
 8007d22:	141f      	asrs	r7, r3, #16
 8007d24:	454d      	cmp	r5, r9
 8007d26:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007d2a:	f84a 3b04 	str.w	r3, [sl], #4
 8007d2e:	d8e7      	bhi.n	8007d00 <__mdiff+0x7c>
 8007d30:	1b2b      	subs	r3, r5, r4
 8007d32:	3b15      	subs	r3, #21
 8007d34:	f023 0303 	bic.w	r3, r3, #3
 8007d38:	3304      	adds	r3, #4
 8007d3a:	3415      	adds	r4, #21
 8007d3c:	42a5      	cmp	r5, r4
 8007d3e:	bf38      	it	cc
 8007d40:	2304      	movcc	r3, #4
 8007d42:	4419      	add	r1, r3
 8007d44:	4473      	add	r3, lr
 8007d46:	469e      	mov	lr, r3
 8007d48:	460d      	mov	r5, r1
 8007d4a:	4565      	cmp	r5, ip
 8007d4c:	d30e      	bcc.n	8007d6c <__mdiff+0xe8>
 8007d4e:	f10c 0203 	add.w	r2, ip, #3
 8007d52:	1a52      	subs	r2, r2, r1
 8007d54:	f022 0203 	bic.w	r2, r2, #3
 8007d58:	3903      	subs	r1, #3
 8007d5a:	458c      	cmp	ip, r1
 8007d5c:	bf38      	it	cc
 8007d5e:	2200      	movcc	r2, #0
 8007d60:	441a      	add	r2, r3
 8007d62:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007d66:	b17b      	cbz	r3, 8007d88 <__mdiff+0x104>
 8007d68:	6106      	str	r6, [r0, #16]
 8007d6a:	e7a5      	b.n	8007cb8 <__mdiff+0x34>
 8007d6c:	f855 8b04 	ldr.w	r8, [r5], #4
 8007d70:	fa17 f488 	uxtah	r4, r7, r8
 8007d74:	1422      	asrs	r2, r4, #16
 8007d76:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007d7a:	b2a4      	uxth	r4, r4
 8007d7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007d80:	f84e 4b04 	str.w	r4, [lr], #4
 8007d84:	1417      	asrs	r7, r2, #16
 8007d86:	e7e0      	b.n	8007d4a <__mdiff+0xc6>
 8007d88:	3e01      	subs	r6, #1
 8007d8a:	e7ea      	b.n	8007d62 <__mdiff+0xde>
 8007d8c:	08009ae7 	.word	0x08009ae7
 8007d90:	08009b58 	.word	0x08009b58

08007d94 <__d2b>:
 8007d94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d98:	4689      	mov	r9, r1
 8007d9a:	2101      	movs	r1, #1
 8007d9c:	ec57 6b10 	vmov	r6, r7, d0
 8007da0:	4690      	mov	r8, r2
 8007da2:	f7ff fcd5 	bl	8007750 <_Balloc>
 8007da6:	4604      	mov	r4, r0
 8007da8:	b930      	cbnz	r0, 8007db8 <__d2b+0x24>
 8007daa:	4602      	mov	r2, r0
 8007dac:	4b25      	ldr	r3, [pc, #148]	; (8007e44 <__d2b+0xb0>)
 8007dae:	4826      	ldr	r0, [pc, #152]	; (8007e48 <__d2b+0xb4>)
 8007db0:	f240 310a 	movw	r1, #778	; 0x30a
 8007db4:	f000 fce0 	bl	8008778 <__assert_func>
 8007db8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007dbc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007dc0:	bb35      	cbnz	r5, 8007e10 <__d2b+0x7c>
 8007dc2:	2e00      	cmp	r6, #0
 8007dc4:	9301      	str	r3, [sp, #4]
 8007dc6:	d028      	beq.n	8007e1a <__d2b+0x86>
 8007dc8:	4668      	mov	r0, sp
 8007dca:	9600      	str	r6, [sp, #0]
 8007dcc:	f7ff fd8c 	bl	80078e8 <__lo0bits>
 8007dd0:	9900      	ldr	r1, [sp, #0]
 8007dd2:	b300      	cbz	r0, 8007e16 <__d2b+0x82>
 8007dd4:	9a01      	ldr	r2, [sp, #4]
 8007dd6:	f1c0 0320 	rsb	r3, r0, #32
 8007dda:	fa02 f303 	lsl.w	r3, r2, r3
 8007dde:	430b      	orrs	r3, r1
 8007de0:	40c2      	lsrs	r2, r0
 8007de2:	6163      	str	r3, [r4, #20]
 8007de4:	9201      	str	r2, [sp, #4]
 8007de6:	9b01      	ldr	r3, [sp, #4]
 8007de8:	61a3      	str	r3, [r4, #24]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	bf14      	ite	ne
 8007dee:	2202      	movne	r2, #2
 8007df0:	2201      	moveq	r2, #1
 8007df2:	6122      	str	r2, [r4, #16]
 8007df4:	b1d5      	cbz	r5, 8007e2c <__d2b+0x98>
 8007df6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007dfa:	4405      	add	r5, r0
 8007dfc:	f8c9 5000 	str.w	r5, [r9]
 8007e00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007e04:	f8c8 0000 	str.w	r0, [r8]
 8007e08:	4620      	mov	r0, r4
 8007e0a:	b003      	add	sp, #12
 8007e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e14:	e7d5      	b.n	8007dc2 <__d2b+0x2e>
 8007e16:	6161      	str	r1, [r4, #20]
 8007e18:	e7e5      	b.n	8007de6 <__d2b+0x52>
 8007e1a:	a801      	add	r0, sp, #4
 8007e1c:	f7ff fd64 	bl	80078e8 <__lo0bits>
 8007e20:	9b01      	ldr	r3, [sp, #4]
 8007e22:	6163      	str	r3, [r4, #20]
 8007e24:	2201      	movs	r2, #1
 8007e26:	6122      	str	r2, [r4, #16]
 8007e28:	3020      	adds	r0, #32
 8007e2a:	e7e3      	b.n	8007df4 <__d2b+0x60>
 8007e2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e34:	f8c9 0000 	str.w	r0, [r9]
 8007e38:	6918      	ldr	r0, [r3, #16]
 8007e3a:	f7ff fd35 	bl	80078a8 <__hi0bits>
 8007e3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e42:	e7df      	b.n	8007e04 <__d2b+0x70>
 8007e44:	08009ae7 	.word	0x08009ae7
 8007e48:	08009b58 	.word	0x08009b58

08007e4c <_calloc_r>:
 8007e4c:	b513      	push	{r0, r1, r4, lr}
 8007e4e:	434a      	muls	r2, r1
 8007e50:	4611      	mov	r1, r2
 8007e52:	9201      	str	r2, [sp, #4]
 8007e54:	f000 f85a 	bl	8007f0c <_malloc_r>
 8007e58:	4604      	mov	r4, r0
 8007e5a:	b118      	cbz	r0, 8007e64 <_calloc_r+0x18>
 8007e5c:	9a01      	ldr	r2, [sp, #4]
 8007e5e:	2100      	movs	r1, #0
 8007e60:	f7fe f83e 	bl	8005ee0 <memset>
 8007e64:	4620      	mov	r0, r4
 8007e66:	b002      	add	sp, #8
 8007e68:	bd10      	pop	{r4, pc}
	...

08007e6c <_free_r>:
 8007e6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e6e:	2900      	cmp	r1, #0
 8007e70:	d048      	beq.n	8007f04 <_free_r+0x98>
 8007e72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e76:	9001      	str	r0, [sp, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f1a1 0404 	sub.w	r4, r1, #4
 8007e7e:	bfb8      	it	lt
 8007e80:	18e4      	addlt	r4, r4, r3
 8007e82:	f000 fe1d 	bl	8008ac0 <__malloc_lock>
 8007e86:	4a20      	ldr	r2, [pc, #128]	; (8007f08 <_free_r+0x9c>)
 8007e88:	9801      	ldr	r0, [sp, #4]
 8007e8a:	6813      	ldr	r3, [r2, #0]
 8007e8c:	4615      	mov	r5, r2
 8007e8e:	b933      	cbnz	r3, 8007e9e <_free_r+0x32>
 8007e90:	6063      	str	r3, [r4, #4]
 8007e92:	6014      	str	r4, [r2, #0]
 8007e94:	b003      	add	sp, #12
 8007e96:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e9a:	f000 be17 	b.w	8008acc <__malloc_unlock>
 8007e9e:	42a3      	cmp	r3, r4
 8007ea0:	d90b      	bls.n	8007eba <_free_r+0x4e>
 8007ea2:	6821      	ldr	r1, [r4, #0]
 8007ea4:	1862      	adds	r2, r4, r1
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	bf04      	itt	eq
 8007eaa:	681a      	ldreq	r2, [r3, #0]
 8007eac:	685b      	ldreq	r3, [r3, #4]
 8007eae:	6063      	str	r3, [r4, #4]
 8007eb0:	bf04      	itt	eq
 8007eb2:	1852      	addeq	r2, r2, r1
 8007eb4:	6022      	streq	r2, [r4, #0]
 8007eb6:	602c      	str	r4, [r5, #0]
 8007eb8:	e7ec      	b.n	8007e94 <_free_r+0x28>
 8007eba:	461a      	mov	r2, r3
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	b10b      	cbz	r3, 8007ec4 <_free_r+0x58>
 8007ec0:	42a3      	cmp	r3, r4
 8007ec2:	d9fa      	bls.n	8007eba <_free_r+0x4e>
 8007ec4:	6811      	ldr	r1, [r2, #0]
 8007ec6:	1855      	adds	r5, r2, r1
 8007ec8:	42a5      	cmp	r5, r4
 8007eca:	d10b      	bne.n	8007ee4 <_free_r+0x78>
 8007ecc:	6824      	ldr	r4, [r4, #0]
 8007ece:	4421      	add	r1, r4
 8007ed0:	1854      	adds	r4, r2, r1
 8007ed2:	42a3      	cmp	r3, r4
 8007ed4:	6011      	str	r1, [r2, #0]
 8007ed6:	d1dd      	bne.n	8007e94 <_free_r+0x28>
 8007ed8:	681c      	ldr	r4, [r3, #0]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	6053      	str	r3, [r2, #4]
 8007ede:	4421      	add	r1, r4
 8007ee0:	6011      	str	r1, [r2, #0]
 8007ee2:	e7d7      	b.n	8007e94 <_free_r+0x28>
 8007ee4:	d902      	bls.n	8007eec <_free_r+0x80>
 8007ee6:	230c      	movs	r3, #12
 8007ee8:	6003      	str	r3, [r0, #0]
 8007eea:	e7d3      	b.n	8007e94 <_free_r+0x28>
 8007eec:	6825      	ldr	r5, [r4, #0]
 8007eee:	1961      	adds	r1, r4, r5
 8007ef0:	428b      	cmp	r3, r1
 8007ef2:	bf04      	itt	eq
 8007ef4:	6819      	ldreq	r1, [r3, #0]
 8007ef6:	685b      	ldreq	r3, [r3, #4]
 8007ef8:	6063      	str	r3, [r4, #4]
 8007efa:	bf04      	itt	eq
 8007efc:	1949      	addeq	r1, r1, r5
 8007efe:	6021      	streq	r1, [r4, #0]
 8007f00:	6054      	str	r4, [r2, #4]
 8007f02:	e7c7      	b.n	8007e94 <_free_r+0x28>
 8007f04:	b003      	add	sp, #12
 8007f06:	bd30      	pop	{r4, r5, pc}
 8007f08:	2000060c 	.word	0x2000060c

08007f0c <_malloc_r>:
 8007f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0e:	1ccd      	adds	r5, r1, #3
 8007f10:	f025 0503 	bic.w	r5, r5, #3
 8007f14:	3508      	adds	r5, #8
 8007f16:	2d0c      	cmp	r5, #12
 8007f18:	bf38      	it	cc
 8007f1a:	250c      	movcc	r5, #12
 8007f1c:	2d00      	cmp	r5, #0
 8007f1e:	4606      	mov	r6, r0
 8007f20:	db01      	blt.n	8007f26 <_malloc_r+0x1a>
 8007f22:	42a9      	cmp	r1, r5
 8007f24:	d903      	bls.n	8007f2e <_malloc_r+0x22>
 8007f26:	230c      	movs	r3, #12
 8007f28:	6033      	str	r3, [r6, #0]
 8007f2a:	2000      	movs	r0, #0
 8007f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f2e:	f000 fdc7 	bl	8008ac0 <__malloc_lock>
 8007f32:	4921      	ldr	r1, [pc, #132]	; (8007fb8 <_malloc_r+0xac>)
 8007f34:	680a      	ldr	r2, [r1, #0]
 8007f36:	4614      	mov	r4, r2
 8007f38:	b99c      	cbnz	r4, 8007f62 <_malloc_r+0x56>
 8007f3a:	4f20      	ldr	r7, [pc, #128]	; (8007fbc <_malloc_r+0xb0>)
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	b923      	cbnz	r3, 8007f4a <_malloc_r+0x3e>
 8007f40:	4621      	mov	r1, r4
 8007f42:	4630      	mov	r0, r6
 8007f44:	f000 faf2 	bl	800852c <_sbrk_r>
 8007f48:	6038      	str	r0, [r7, #0]
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	4630      	mov	r0, r6
 8007f4e:	f000 faed 	bl	800852c <_sbrk_r>
 8007f52:	1c43      	adds	r3, r0, #1
 8007f54:	d123      	bne.n	8007f9e <_malloc_r+0x92>
 8007f56:	230c      	movs	r3, #12
 8007f58:	6033      	str	r3, [r6, #0]
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	f000 fdb6 	bl	8008acc <__malloc_unlock>
 8007f60:	e7e3      	b.n	8007f2a <_malloc_r+0x1e>
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	1b5b      	subs	r3, r3, r5
 8007f66:	d417      	bmi.n	8007f98 <_malloc_r+0x8c>
 8007f68:	2b0b      	cmp	r3, #11
 8007f6a:	d903      	bls.n	8007f74 <_malloc_r+0x68>
 8007f6c:	6023      	str	r3, [r4, #0]
 8007f6e:	441c      	add	r4, r3
 8007f70:	6025      	str	r5, [r4, #0]
 8007f72:	e004      	b.n	8007f7e <_malloc_r+0x72>
 8007f74:	6863      	ldr	r3, [r4, #4]
 8007f76:	42a2      	cmp	r2, r4
 8007f78:	bf0c      	ite	eq
 8007f7a:	600b      	streq	r3, [r1, #0]
 8007f7c:	6053      	strne	r3, [r2, #4]
 8007f7e:	4630      	mov	r0, r6
 8007f80:	f000 fda4 	bl	8008acc <__malloc_unlock>
 8007f84:	f104 000b 	add.w	r0, r4, #11
 8007f88:	1d23      	adds	r3, r4, #4
 8007f8a:	f020 0007 	bic.w	r0, r0, #7
 8007f8e:	1ac2      	subs	r2, r0, r3
 8007f90:	d0cc      	beq.n	8007f2c <_malloc_r+0x20>
 8007f92:	1a1b      	subs	r3, r3, r0
 8007f94:	50a3      	str	r3, [r4, r2]
 8007f96:	e7c9      	b.n	8007f2c <_malloc_r+0x20>
 8007f98:	4622      	mov	r2, r4
 8007f9a:	6864      	ldr	r4, [r4, #4]
 8007f9c:	e7cc      	b.n	8007f38 <_malloc_r+0x2c>
 8007f9e:	1cc4      	adds	r4, r0, #3
 8007fa0:	f024 0403 	bic.w	r4, r4, #3
 8007fa4:	42a0      	cmp	r0, r4
 8007fa6:	d0e3      	beq.n	8007f70 <_malloc_r+0x64>
 8007fa8:	1a21      	subs	r1, r4, r0
 8007faa:	4630      	mov	r0, r6
 8007fac:	f000 fabe 	bl	800852c <_sbrk_r>
 8007fb0:	3001      	adds	r0, #1
 8007fb2:	d1dd      	bne.n	8007f70 <_malloc_r+0x64>
 8007fb4:	e7cf      	b.n	8007f56 <_malloc_r+0x4a>
 8007fb6:	bf00      	nop
 8007fb8:	2000060c 	.word	0x2000060c
 8007fbc:	20000610 	.word	0x20000610

08007fc0 <__ssputs_r>:
 8007fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fc4:	688e      	ldr	r6, [r1, #8]
 8007fc6:	429e      	cmp	r6, r3
 8007fc8:	4682      	mov	sl, r0
 8007fca:	460c      	mov	r4, r1
 8007fcc:	4690      	mov	r8, r2
 8007fce:	461f      	mov	r7, r3
 8007fd0:	d838      	bhi.n	8008044 <__ssputs_r+0x84>
 8007fd2:	898a      	ldrh	r2, [r1, #12]
 8007fd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fd8:	d032      	beq.n	8008040 <__ssputs_r+0x80>
 8007fda:	6825      	ldr	r5, [r4, #0]
 8007fdc:	6909      	ldr	r1, [r1, #16]
 8007fde:	eba5 0901 	sub.w	r9, r5, r1
 8007fe2:	6965      	ldr	r5, [r4, #20]
 8007fe4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fe8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fec:	3301      	adds	r3, #1
 8007fee:	444b      	add	r3, r9
 8007ff0:	106d      	asrs	r5, r5, #1
 8007ff2:	429d      	cmp	r5, r3
 8007ff4:	bf38      	it	cc
 8007ff6:	461d      	movcc	r5, r3
 8007ff8:	0553      	lsls	r3, r2, #21
 8007ffa:	d531      	bpl.n	8008060 <__ssputs_r+0xa0>
 8007ffc:	4629      	mov	r1, r5
 8007ffe:	f7ff ff85 	bl	8007f0c <_malloc_r>
 8008002:	4606      	mov	r6, r0
 8008004:	b950      	cbnz	r0, 800801c <__ssputs_r+0x5c>
 8008006:	230c      	movs	r3, #12
 8008008:	f8ca 3000 	str.w	r3, [sl]
 800800c:	89a3      	ldrh	r3, [r4, #12]
 800800e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008012:	81a3      	strh	r3, [r4, #12]
 8008014:	f04f 30ff 	mov.w	r0, #4294967295
 8008018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800801c:	6921      	ldr	r1, [r4, #16]
 800801e:	464a      	mov	r2, r9
 8008020:	f7ff fb88 	bl	8007734 <memcpy>
 8008024:	89a3      	ldrh	r3, [r4, #12]
 8008026:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800802a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800802e:	81a3      	strh	r3, [r4, #12]
 8008030:	6126      	str	r6, [r4, #16]
 8008032:	6165      	str	r5, [r4, #20]
 8008034:	444e      	add	r6, r9
 8008036:	eba5 0509 	sub.w	r5, r5, r9
 800803a:	6026      	str	r6, [r4, #0]
 800803c:	60a5      	str	r5, [r4, #8]
 800803e:	463e      	mov	r6, r7
 8008040:	42be      	cmp	r6, r7
 8008042:	d900      	bls.n	8008046 <__ssputs_r+0x86>
 8008044:	463e      	mov	r6, r7
 8008046:	4632      	mov	r2, r6
 8008048:	6820      	ldr	r0, [r4, #0]
 800804a:	4641      	mov	r1, r8
 800804c:	f000 fd1e 	bl	8008a8c <memmove>
 8008050:	68a3      	ldr	r3, [r4, #8]
 8008052:	6822      	ldr	r2, [r4, #0]
 8008054:	1b9b      	subs	r3, r3, r6
 8008056:	4432      	add	r2, r6
 8008058:	60a3      	str	r3, [r4, #8]
 800805a:	6022      	str	r2, [r4, #0]
 800805c:	2000      	movs	r0, #0
 800805e:	e7db      	b.n	8008018 <__ssputs_r+0x58>
 8008060:	462a      	mov	r2, r5
 8008062:	f000 fd39 	bl	8008ad8 <_realloc_r>
 8008066:	4606      	mov	r6, r0
 8008068:	2800      	cmp	r0, #0
 800806a:	d1e1      	bne.n	8008030 <__ssputs_r+0x70>
 800806c:	6921      	ldr	r1, [r4, #16]
 800806e:	4650      	mov	r0, sl
 8008070:	f7ff fefc 	bl	8007e6c <_free_r>
 8008074:	e7c7      	b.n	8008006 <__ssputs_r+0x46>
	...

08008078 <_svfiprintf_r>:
 8008078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800807c:	4698      	mov	r8, r3
 800807e:	898b      	ldrh	r3, [r1, #12]
 8008080:	061b      	lsls	r3, r3, #24
 8008082:	b09d      	sub	sp, #116	; 0x74
 8008084:	4607      	mov	r7, r0
 8008086:	460d      	mov	r5, r1
 8008088:	4614      	mov	r4, r2
 800808a:	d50e      	bpl.n	80080aa <_svfiprintf_r+0x32>
 800808c:	690b      	ldr	r3, [r1, #16]
 800808e:	b963      	cbnz	r3, 80080aa <_svfiprintf_r+0x32>
 8008090:	2140      	movs	r1, #64	; 0x40
 8008092:	f7ff ff3b 	bl	8007f0c <_malloc_r>
 8008096:	6028      	str	r0, [r5, #0]
 8008098:	6128      	str	r0, [r5, #16]
 800809a:	b920      	cbnz	r0, 80080a6 <_svfiprintf_r+0x2e>
 800809c:	230c      	movs	r3, #12
 800809e:	603b      	str	r3, [r7, #0]
 80080a0:	f04f 30ff 	mov.w	r0, #4294967295
 80080a4:	e0d1      	b.n	800824a <_svfiprintf_r+0x1d2>
 80080a6:	2340      	movs	r3, #64	; 0x40
 80080a8:	616b      	str	r3, [r5, #20]
 80080aa:	2300      	movs	r3, #0
 80080ac:	9309      	str	r3, [sp, #36]	; 0x24
 80080ae:	2320      	movs	r3, #32
 80080b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80080b8:	2330      	movs	r3, #48	; 0x30
 80080ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008264 <_svfiprintf_r+0x1ec>
 80080be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080c2:	f04f 0901 	mov.w	r9, #1
 80080c6:	4623      	mov	r3, r4
 80080c8:	469a      	mov	sl, r3
 80080ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080ce:	b10a      	cbz	r2, 80080d4 <_svfiprintf_r+0x5c>
 80080d0:	2a25      	cmp	r2, #37	; 0x25
 80080d2:	d1f9      	bne.n	80080c8 <_svfiprintf_r+0x50>
 80080d4:	ebba 0b04 	subs.w	fp, sl, r4
 80080d8:	d00b      	beq.n	80080f2 <_svfiprintf_r+0x7a>
 80080da:	465b      	mov	r3, fp
 80080dc:	4622      	mov	r2, r4
 80080de:	4629      	mov	r1, r5
 80080e0:	4638      	mov	r0, r7
 80080e2:	f7ff ff6d 	bl	8007fc0 <__ssputs_r>
 80080e6:	3001      	adds	r0, #1
 80080e8:	f000 80aa 	beq.w	8008240 <_svfiprintf_r+0x1c8>
 80080ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080ee:	445a      	add	r2, fp
 80080f0:	9209      	str	r2, [sp, #36]	; 0x24
 80080f2:	f89a 3000 	ldrb.w	r3, [sl]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f000 80a2 	beq.w	8008240 <_svfiprintf_r+0x1c8>
 80080fc:	2300      	movs	r3, #0
 80080fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008102:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008106:	f10a 0a01 	add.w	sl, sl, #1
 800810a:	9304      	str	r3, [sp, #16]
 800810c:	9307      	str	r3, [sp, #28]
 800810e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008112:	931a      	str	r3, [sp, #104]	; 0x68
 8008114:	4654      	mov	r4, sl
 8008116:	2205      	movs	r2, #5
 8008118:	f814 1b01 	ldrb.w	r1, [r4], #1
 800811c:	4851      	ldr	r0, [pc, #324]	; (8008264 <_svfiprintf_r+0x1ec>)
 800811e:	f7f8 f85f 	bl	80001e0 <memchr>
 8008122:	9a04      	ldr	r2, [sp, #16]
 8008124:	b9d8      	cbnz	r0, 800815e <_svfiprintf_r+0xe6>
 8008126:	06d0      	lsls	r0, r2, #27
 8008128:	bf44      	itt	mi
 800812a:	2320      	movmi	r3, #32
 800812c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008130:	0711      	lsls	r1, r2, #28
 8008132:	bf44      	itt	mi
 8008134:	232b      	movmi	r3, #43	; 0x2b
 8008136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800813a:	f89a 3000 	ldrb.w	r3, [sl]
 800813e:	2b2a      	cmp	r3, #42	; 0x2a
 8008140:	d015      	beq.n	800816e <_svfiprintf_r+0xf6>
 8008142:	9a07      	ldr	r2, [sp, #28]
 8008144:	4654      	mov	r4, sl
 8008146:	2000      	movs	r0, #0
 8008148:	f04f 0c0a 	mov.w	ip, #10
 800814c:	4621      	mov	r1, r4
 800814e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008152:	3b30      	subs	r3, #48	; 0x30
 8008154:	2b09      	cmp	r3, #9
 8008156:	d94e      	bls.n	80081f6 <_svfiprintf_r+0x17e>
 8008158:	b1b0      	cbz	r0, 8008188 <_svfiprintf_r+0x110>
 800815a:	9207      	str	r2, [sp, #28]
 800815c:	e014      	b.n	8008188 <_svfiprintf_r+0x110>
 800815e:	eba0 0308 	sub.w	r3, r0, r8
 8008162:	fa09 f303 	lsl.w	r3, r9, r3
 8008166:	4313      	orrs	r3, r2
 8008168:	9304      	str	r3, [sp, #16]
 800816a:	46a2      	mov	sl, r4
 800816c:	e7d2      	b.n	8008114 <_svfiprintf_r+0x9c>
 800816e:	9b03      	ldr	r3, [sp, #12]
 8008170:	1d19      	adds	r1, r3, #4
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	9103      	str	r1, [sp, #12]
 8008176:	2b00      	cmp	r3, #0
 8008178:	bfbb      	ittet	lt
 800817a:	425b      	neglt	r3, r3
 800817c:	f042 0202 	orrlt.w	r2, r2, #2
 8008180:	9307      	strge	r3, [sp, #28]
 8008182:	9307      	strlt	r3, [sp, #28]
 8008184:	bfb8      	it	lt
 8008186:	9204      	strlt	r2, [sp, #16]
 8008188:	7823      	ldrb	r3, [r4, #0]
 800818a:	2b2e      	cmp	r3, #46	; 0x2e
 800818c:	d10c      	bne.n	80081a8 <_svfiprintf_r+0x130>
 800818e:	7863      	ldrb	r3, [r4, #1]
 8008190:	2b2a      	cmp	r3, #42	; 0x2a
 8008192:	d135      	bne.n	8008200 <_svfiprintf_r+0x188>
 8008194:	9b03      	ldr	r3, [sp, #12]
 8008196:	1d1a      	adds	r2, r3, #4
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	9203      	str	r2, [sp, #12]
 800819c:	2b00      	cmp	r3, #0
 800819e:	bfb8      	it	lt
 80081a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80081a4:	3402      	adds	r4, #2
 80081a6:	9305      	str	r3, [sp, #20]
 80081a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008274 <_svfiprintf_r+0x1fc>
 80081ac:	7821      	ldrb	r1, [r4, #0]
 80081ae:	2203      	movs	r2, #3
 80081b0:	4650      	mov	r0, sl
 80081b2:	f7f8 f815 	bl	80001e0 <memchr>
 80081b6:	b140      	cbz	r0, 80081ca <_svfiprintf_r+0x152>
 80081b8:	2340      	movs	r3, #64	; 0x40
 80081ba:	eba0 000a 	sub.w	r0, r0, sl
 80081be:	fa03 f000 	lsl.w	r0, r3, r0
 80081c2:	9b04      	ldr	r3, [sp, #16]
 80081c4:	4303      	orrs	r3, r0
 80081c6:	3401      	adds	r4, #1
 80081c8:	9304      	str	r3, [sp, #16]
 80081ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ce:	4826      	ldr	r0, [pc, #152]	; (8008268 <_svfiprintf_r+0x1f0>)
 80081d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081d4:	2206      	movs	r2, #6
 80081d6:	f7f8 f803 	bl	80001e0 <memchr>
 80081da:	2800      	cmp	r0, #0
 80081dc:	d038      	beq.n	8008250 <_svfiprintf_r+0x1d8>
 80081de:	4b23      	ldr	r3, [pc, #140]	; (800826c <_svfiprintf_r+0x1f4>)
 80081e0:	bb1b      	cbnz	r3, 800822a <_svfiprintf_r+0x1b2>
 80081e2:	9b03      	ldr	r3, [sp, #12]
 80081e4:	3307      	adds	r3, #7
 80081e6:	f023 0307 	bic.w	r3, r3, #7
 80081ea:	3308      	adds	r3, #8
 80081ec:	9303      	str	r3, [sp, #12]
 80081ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081f0:	4433      	add	r3, r6
 80081f2:	9309      	str	r3, [sp, #36]	; 0x24
 80081f4:	e767      	b.n	80080c6 <_svfiprintf_r+0x4e>
 80081f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80081fa:	460c      	mov	r4, r1
 80081fc:	2001      	movs	r0, #1
 80081fe:	e7a5      	b.n	800814c <_svfiprintf_r+0xd4>
 8008200:	2300      	movs	r3, #0
 8008202:	3401      	adds	r4, #1
 8008204:	9305      	str	r3, [sp, #20]
 8008206:	4619      	mov	r1, r3
 8008208:	f04f 0c0a 	mov.w	ip, #10
 800820c:	4620      	mov	r0, r4
 800820e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008212:	3a30      	subs	r2, #48	; 0x30
 8008214:	2a09      	cmp	r2, #9
 8008216:	d903      	bls.n	8008220 <_svfiprintf_r+0x1a8>
 8008218:	2b00      	cmp	r3, #0
 800821a:	d0c5      	beq.n	80081a8 <_svfiprintf_r+0x130>
 800821c:	9105      	str	r1, [sp, #20]
 800821e:	e7c3      	b.n	80081a8 <_svfiprintf_r+0x130>
 8008220:	fb0c 2101 	mla	r1, ip, r1, r2
 8008224:	4604      	mov	r4, r0
 8008226:	2301      	movs	r3, #1
 8008228:	e7f0      	b.n	800820c <_svfiprintf_r+0x194>
 800822a:	ab03      	add	r3, sp, #12
 800822c:	9300      	str	r3, [sp, #0]
 800822e:	462a      	mov	r2, r5
 8008230:	4b0f      	ldr	r3, [pc, #60]	; (8008270 <_svfiprintf_r+0x1f8>)
 8008232:	a904      	add	r1, sp, #16
 8008234:	4638      	mov	r0, r7
 8008236:	f7fd fefb 	bl	8006030 <_printf_float>
 800823a:	1c42      	adds	r2, r0, #1
 800823c:	4606      	mov	r6, r0
 800823e:	d1d6      	bne.n	80081ee <_svfiprintf_r+0x176>
 8008240:	89ab      	ldrh	r3, [r5, #12]
 8008242:	065b      	lsls	r3, r3, #25
 8008244:	f53f af2c 	bmi.w	80080a0 <_svfiprintf_r+0x28>
 8008248:	9809      	ldr	r0, [sp, #36]	; 0x24
 800824a:	b01d      	add	sp, #116	; 0x74
 800824c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008250:	ab03      	add	r3, sp, #12
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	462a      	mov	r2, r5
 8008256:	4b06      	ldr	r3, [pc, #24]	; (8008270 <_svfiprintf_r+0x1f8>)
 8008258:	a904      	add	r1, sp, #16
 800825a:	4638      	mov	r0, r7
 800825c:	f7fe f98c 	bl	8006578 <_printf_i>
 8008260:	e7eb      	b.n	800823a <_svfiprintf_r+0x1c2>
 8008262:	bf00      	nop
 8008264:	08009cb4 	.word	0x08009cb4
 8008268:	08009cbe 	.word	0x08009cbe
 800826c:	08006031 	.word	0x08006031
 8008270:	08007fc1 	.word	0x08007fc1
 8008274:	08009cba 	.word	0x08009cba

08008278 <__sfputc_r>:
 8008278:	6893      	ldr	r3, [r2, #8]
 800827a:	3b01      	subs	r3, #1
 800827c:	2b00      	cmp	r3, #0
 800827e:	b410      	push	{r4}
 8008280:	6093      	str	r3, [r2, #8]
 8008282:	da08      	bge.n	8008296 <__sfputc_r+0x1e>
 8008284:	6994      	ldr	r4, [r2, #24]
 8008286:	42a3      	cmp	r3, r4
 8008288:	db01      	blt.n	800828e <__sfputc_r+0x16>
 800828a:	290a      	cmp	r1, #10
 800828c:	d103      	bne.n	8008296 <__sfputc_r+0x1e>
 800828e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008292:	f000 b99f 	b.w	80085d4 <__swbuf_r>
 8008296:	6813      	ldr	r3, [r2, #0]
 8008298:	1c58      	adds	r0, r3, #1
 800829a:	6010      	str	r0, [r2, #0]
 800829c:	7019      	strb	r1, [r3, #0]
 800829e:	4608      	mov	r0, r1
 80082a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <__sfputs_r>:
 80082a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a8:	4606      	mov	r6, r0
 80082aa:	460f      	mov	r7, r1
 80082ac:	4614      	mov	r4, r2
 80082ae:	18d5      	adds	r5, r2, r3
 80082b0:	42ac      	cmp	r4, r5
 80082b2:	d101      	bne.n	80082b8 <__sfputs_r+0x12>
 80082b4:	2000      	movs	r0, #0
 80082b6:	e007      	b.n	80082c8 <__sfputs_r+0x22>
 80082b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082bc:	463a      	mov	r2, r7
 80082be:	4630      	mov	r0, r6
 80082c0:	f7ff ffda 	bl	8008278 <__sfputc_r>
 80082c4:	1c43      	adds	r3, r0, #1
 80082c6:	d1f3      	bne.n	80082b0 <__sfputs_r+0xa>
 80082c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082cc <_vfiprintf_r>:
 80082cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d0:	460d      	mov	r5, r1
 80082d2:	b09d      	sub	sp, #116	; 0x74
 80082d4:	4614      	mov	r4, r2
 80082d6:	4698      	mov	r8, r3
 80082d8:	4606      	mov	r6, r0
 80082da:	b118      	cbz	r0, 80082e4 <_vfiprintf_r+0x18>
 80082dc:	6983      	ldr	r3, [r0, #24]
 80082de:	b90b      	cbnz	r3, 80082e4 <_vfiprintf_r+0x18>
 80082e0:	f7ff f97a 	bl	80075d8 <__sinit>
 80082e4:	4b89      	ldr	r3, [pc, #548]	; (800850c <_vfiprintf_r+0x240>)
 80082e6:	429d      	cmp	r5, r3
 80082e8:	d11b      	bne.n	8008322 <_vfiprintf_r+0x56>
 80082ea:	6875      	ldr	r5, [r6, #4]
 80082ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082ee:	07d9      	lsls	r1, r3, #31
 80082f0:	d405      	bmi.n	80082fe <_vfiprintf_r+0x32>
 80082f2:	89ab      	ldrh	r3, [r5, #12]
 80082f4:	059a      	lsls	r2, r3, #22
 80082f6:	d402      	bmi.n	80082fe <_vfiprintf_r+0x32>
 80082f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082fa:	f7ff fa10 	bl	800771e <__retarget_lock_acquire_recursive>
 80082fe:	89ab      	ldrh	r3, [r5, #12]
 8008300:	071b      	lsls	r3, r3, #28
 8008302:	d501      	bpl.n	8008308 <_vfiprintf_r+0x3c>
 8008304:	692b      	ldr	r3, [r5, #16]
 8008306:	b9eb      	cbnz	r3, 8008344 <_vfiprintf_r+0x78>
 8008308:	4629      	mov	r1, r5
 800830a:	4630      	mov	r0, r6
 800830c:	f000 f9c6 	bl	800869c <__swsetup_r>
 8008310:	b1c0      	cbz	r0, 8008344 <_vfiprintf_r+0x78>
 8008312:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008314:	07dc      	lsls	r4, r3, #31
 8008316:	d50e      	bpl.n	8008336 <_vfiprintf_r+0x6a>
 8008318:	f04f 30ff 	mov.w	r0, #4294967295
 800831c:	b01d      	add	sp, #116	; 0x74
 800831e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008322:	4b7b      	ldr	r3, [pc, #492]	; (8008510 <_vfiprintf_r+0x244>)
 8008324:	429d      	cmp	r5, r3
 8008326:	d101      	bne.n	800832c <_vfiprintf_r+0x60>
 8008328:	68b5      	ldr	r5, [r6, #8]
 800832a:	e7df      	b.n	80082ec <_vfiprintf_r+0x20>
 800832c:	4b79      	ldr	r3, [pc, #484]	; (8008514 <_vfiprintf_r+0x248>)
 800832e:	429d      	cmp	r5, r3
 8008330:	bf08      	it	eq
 8008332:	68f5      	ldreq	r5, [r6, #12]
 8008334:	e7da      	b.n	80082ec <_vfiprintf_r+0x20>
 8008336:	89ab      	ldrh	r3, [r5, #12]
 8008338:	0598      	lsls	r0, r3, #22
 800833a:	d4ed      	bmi.n	8008318 <_vfiprintf_r+0x4c>
 800833c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800833e:	f7ff f9ef 	bl	8007720 <__retarget_lock_release_recursive>
 8008342:	e7e9      	b.n	8008318 <_vfiprintf_r+0x4c>
 8008344:	2300      	movs	r3, #0
 8008346:	9309      	str	r3, [sp, #36]	; 0x24
 8008348:	2320      	movs	r3, #32
 800834a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800834e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008352:	2330      	movs	r3, #48	; 0x30
 8008354:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008518 <_vfiprintf_r+0x24c>
 8008358:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800835c:	f04f 0901 	mov.w	r9, #1
 8008360:	4623      	mov	r3, r4
 8008362:	469a      	mov	sl, r3
 8008364:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008368:	b10a      	cbz	r2, 800836e <_vfiprintf_r+0xa2>
 800836a:	2a25      	cmp	r2, #37	; 0x25
 800836c:	d1f9      	bne.n	8008362 <_vfiprintf_r+0x96>
 800836e:	ebba 0b04 	subs.w	fp, sl, r4
 8008372:	d00b      	beq.n	800838c <_vfiprintf_r+0xc0>
 8008374:	465b      	mov	r3, fp
 8008376:	4622      	mov	r2, r4
 8008378:	4629      	mov	r1, r5
 800837a:	4630      	mov	r0, r6
 800837c:	f7ff ff93 	bl	80082a6 <__sfputs_r>
 8008380:	3001      	adds	r0, #1
 8008382:	f000 80aa 	beq.w	80084da <_vfiprintf_r+0x20e>
 8008386:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008388:	445a      	add	r2, fp
 800838a:	9209      	str	r2, [sp, #36]	; 0x24
 800838c:	f89a 3000 	ldrb.w	r3, [sl]
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 80a2 	beq.w	80084da <_vfiprintf_r+0x20e>
 8008396:	2300      	movs	r3, #0
 8008398:	f04f 32ff 	mov.w	r2, #4294967295
 800839c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083a0:	f10a 0a01 	add.w	sl, sl, #1
 80083a4:	9304      	str	r3, [sp, #16]
 80083a6:	9307      	str	r3, [sp, #28]
 80083a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083ac:	931a      	str	r3, [sp, #104]	; 0x68
 80083ae:	4654      	mov	r4, sl
 80083b0:	2205      	movs	r2, #5
 80083b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083b6:	4858      	ldr	r0, [pc, #352]	; (8008518 <_vfiprintf_r+0x24c>)
 80083b8:	f7f7 ff12 	bl	80001e0 <memchr>
 80083bc:	9a04      	ldr	r2, [sp, #16]
 80083be:	b9d8      	cbnz	r0, 80083f8 <_vfiprintf_r+0x12c>
 80083c0:	06d1      	lsls	r1, r2, #27
 80083c2:	bf44      	itt	mi
 80083c4:	2320      	movmi	r3, #32
 80083c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083ca:	0713      	lsls	r3, r2, #28
 80083cc:	bf44      	itt	mi
 80083ce:	232b      	movmi	r3, #43	; 0x2b
 80083d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083d4:	f89a 3000 	ldrb.w	r3, [sl]
 80083d8:	2b2a      	cmp	r3, #42	; 0x2a
 80083da:	d015      	beq.n	8008408 <_vfiprintf_r+0x13c>
 80083dc:	9a07      	ldr	r2, [sp, #28]
 80083de:	4654      	mov	r4, sl
 80083e0:	2000      	movs	r0, #0
 80083e2:	f04f 0c0a 	mov.w	ip, #10
 80083e6:	4621      	mov	r1, r4
 80083e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083ec:	3b30      	subs	r3, #48	; 0x30
 80083ee:	2b09      	cmp	r3, #9
 80083f0:	d94e      	bls.n	8008490 <_vfiprintf_r+0x1c4>
 80083f2:	b1b0      	cbz	r0, 8008422 <_vfiprintf_r+0x156>
 80083f4:	9207      	str	r2, [sp, #28]
 80083f6:	e014      	b.n	8008422 <_vfiprintf_r+0x156>
 80083f8:	eba0 0308 	sub.w	r3, r0, r8
 80083fc:	fa09 f303 	lsl.w	r3, r9, r3
 8008400:	4313      	orrs	r3, r2
 8008402:	9304      	str	r3, [sp, #16]
 8008404:	46a2      	mov	sl, r4
 8008406:	e7d2      	b.n	80083ae <_vfiprintf_r+0xe2>
 8008408:	9b03      	ldr	r3, [sp, #12]
 800840a:	1d19      	adds	r1, r3, #4
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	9103      	str	r1, [sp, #12]
 8008410:	2b00      	cmp	r3, #0
 8008412:	bfbb      	ittet	lt
 8008414:	425b      	neglt	r3, r3
 8008416:	f042 0202 	orrlt.w	r2, r2, #2
 800841a:	9307      	strge	r3, [sp, #28]
 800841c:	9307      	strlt	r3, [sp, #28]
 800841e:	bfb8      	it	lt
 8008420:	9204      	strlt	r2, [sp, #16]
 8008422:	7823      	ldrb	r3, [r4, #0]
 8008424:	2b2e      	cmp	r3, #46	; 0x2e
 8008426:	d10c      	bne.n	8008442 <_vfiprintf_r+0x176>
 8008428:	7863      	ldrb	r3, [r4, #1]
 800842a:	2b2a      	cmp	r3, #42	; 0x2a
 800842c:	d135      	bne.n	800849a <_vfiprintf_r+0x1ce>
 800842e:	9b03      	ldr	r3, [sp, #12]
 8008430:	1d1a      	adds	r2, r3, #4
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	9203      	str	r2, [sp, #12]
 8008436:	2b00      	cmp	r3, #0
 8008438:	bfb8      	it	lt
 800843a:	f04f 33ff 	movlt.w	r3, #4294967295
 800843e:	3402      	adds	r4, #2
 8008440:	9305      	str	r3, [sp, #20]
 8008442:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008528 <_vfiprintf_r+0x25c>
 8008446:	7821      	ldrb	r1, [r4, #0]
 8008448:	2203      	movs	r2, #3
 800844a:	4650      	mov	r0, sl
 800844c:	f7f7 fec8 	bl	80001e0 <memchr>
 8008450:	b140      	cbz	r0, 8008464 <_vfiprintf_r+0x198>
 8008452:	2340      	movs	r3, #64	; 0x40
 8008454:	eba0 000a 	sub.w	r0, r0, sl
 8008458:	fa03 f000 	lsl.w	r0, r3, r0
 800845c:	9b04      	ldr	r3, [sp, #16]
 800845e:	4303      	orrs	r3, r0
 8008460:	3401      	adds	r4, #1
 8008462:	9304      	str	r3, [sp, #16]
 8008464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008468:	482c      	ldr	r0, [pc, #176]	; (800851c <_vfiprintf_r+0x250>)
 800846a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800846e:	2206      	movs	r2, #6
 8008470:	f7f7 feb6 	bl	80001e0 <memchr>
 8008474:	2800      	cmp	r0, #0
 8008476:	d03f      	beq.n	80084f8 <_vfiprintf_r+0x22c>
 8008478:	4b29      	ldr	r3, [pc, #164]	; (8008520 <_vfiprintf_r+0x254>)
 800847a:	bb1b      	cbnz	r3, 80084c4 <_vfiprintf_r+0x1f8>
 800847c:	9b03      	ldr	r3, [sp, #12]
 800847e:	3307      	adds	r3, #7
 8008480:	f023 0307 	bic.w	r3, r3, #7
 8008484:	3308      	adds	r3, #8
 8008486:	9303      	str	r3, [sp, #12]
 8008488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800848a:	443b      	add	r3, r7
 800848c:	9309      	str	r3, [sp, #36]	; 0x24
 800848e:	e767      	b.n	8008360 <_vfiprintf_r+0x94>
 8008490:	fb0c 3202 	mla	r2, ip, r2, r3
 8008494:	460c      	mov	r4, r1
 8008496:	2001      	movs	r0, #1
 8008498:	e7a5      	b.n	80083e6 <_vfiprintf_r+0x11a>
 800849a:	2300      	movs	r3, #0
 800849c:	3401      	adds	r4, #1
 800849e:	9305      	str	r3, [sp, #20]
 80084a0:	4619      	mov	r1, r3
 80084a2:	f04f 0c0a 	mov.w	ip, #10
 80084a6:	4620      	mov	r0, r4
 80084a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084ac:	3a30      	subs	r2, #48	; 0x30
 80084ae:	2a09      	cmp	r2, #9
 80084b0:	d903      	bls.n	80084ba <_vfiprintf_r+0x1ee>
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d0c5      	beq.n	8008442 <_vfiprintf_r+0x176>
 80084b6:	9105      	str	r1, [sp, #20]
 80084b8:	e7c3      	b.n	8008442 <_vfiprintf_r+0x176>
 80084ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80084be:	4604      	mov	r4, r0
 80084c0:	2301      	movs	r3, #1
 80084c2:	e7f0      	b.n	80084a6 <_vfiprintf_r+0x1da>
 80084c4:	ab03      	add	r3, sp, #12
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	462a      	mov	r2, r5
 80084ca:	4b16      	ldr	r3, [pc, #88]	; (8008524 <_vfiprintf_r+0x258>)
 80084cc:	a904      	add	r1, sp, #16
 80084ce:	4630      	mov	r0, r6
 80084d0:	f7fd fdae 	bl	8006030 <_printf_float>
 80084d4:	4607      	mov	r7, r0
 80084d6:	1c78      	adds	r0, r7, #1
 80084d8:	d1d6      	bne.n	8008488 <_vfiprintf_r+0x1bc>
 80084da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084dc:	07d9      	lsls	r1, r3, #31
 80084de:	d405      	bmi.n	80084ec <_vfiprintf_r+0x220>
 80084e0:	89ab      	ldrh	r3, [r5, #12]
 80084e2:	059a      	lsls	r2, r3, #22
 80084e4:	d402      	bmi.n	80084ec <_vfiprintf_r+0x220>
 80084e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084e8:	f7ff f91a 	bl	8007720 <__retarget_lock_release_recursive>
 80084ec:	89ab      	ldrh	r3, [r5, #12]
 80084ee:	065b      	lsls	r3, r3, #25
 80084f0:	f53f af12 	bmi.w	8008318 <_vfiprintf_r+0x4c>
 80084f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084f6:	e711      	b.n	800831c <_vfiprintf_r+0x50>
 80084f8:	ab03      	add	r3, sp, #12
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	462a      	mov	r2, r5
 80084fe:	4b09      	ldr	r3, [pc, #36]	; (8008524 <_vfiprintf_r+0x258>)
 8008500:	a904      	add	r1, sp, #16
 8008502:	4630      	mov	r0, r6
 8008504:	f7fe f838 	bl	8006578 <_printf_i>
 8008508:	e7e4      	b.n	80084d4 <_vfiprintf_r+0x208>
 800850a:	bf00      	nop
 800850c:	08009b18 	.word	0x08009b18
 8008510:	08009b38 	.word	0x08009b38
 8008514:	08009af8 	.word	0x08009af8
 8008518:	08009cb4 	.word	0x08009cb4
 800851c:	08009cbe 	.word	0x08009cbe
 8008520:	08006031 	.word	0x08006031
 8008524:	080082a7 	.word	0x080082a7
 8008528:	08009cba 	.word	0x08009cba

0800852c <_sbrk_r>:
 800852c:	b538      	push	{r3, r4, r5, lr}
 800852e:	4d06      	ldr	r5, [pc, #24]	; (8008548 <_sbrk_r+0x1c>)
 8008530:	2300      	movs	r3, #0
 8008532:	4604      	mov	r4, r0
 8008534:	4608      	mov	r0, r1
 8008536:	602b      	str	r3, [r5, #0]
 8008538:	f7f9 fb58 	bl	8001bec <_sbrk>
 800853c:	1c43      	adds	r3, r0, #1
 800853e:	d102      	bne.n	8008546 <_sbrk_r+0x1a>
 8008540:	682b      	ldr	r3, [r5, #0]
 8008542:	b103      	cbz	r3, 8008546 <_sbrk_r+0x1a>
 8008544:	6023      	str	r3, [r4, #0]
 8008546:	bd38      	pop	{r3, r4, r5, pc}
 8008548:	200007a4 	.word	0x200007a4

0800854c <__sread>:
 800854c:	b510      	push	{r4, lr}
 800854e:	460c      	mov	r4, r1
 8008550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008554:	f000 fae6 	bl	8008b24 <_read_r>
 8008558:	2800      	cmp	r0, #0
 800855a:	bfab      	itete	ge
 800855c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800855e:	89a3      	ldrhlt	r3, [r4, #12]
 8008560:	181b      	addge	r3, r3, r0
 8008562:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008566:	bfac      	ite	ge
 8008568:	6563      	strge	r3, [r4, #84]	; 0x54
 800856a:	81a3      	strhlt	r3, [r4, #12]
 800856c:	bd10      	pop	{r4, pc}

0800856e <__swrite>:
 800856e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008572:	461f      	mov	r7, r3
 8008574:	898b      	ldrh	r3, [r1, #12]
 8008576:	05db      	lsls	r3, r3, #23
 8008578:	4605      	mov	r5, r0
 800857a:	460c      	mov	r4, r1
 800857c:	4616      	mov	r6, r2
 800857e:	d505      	bpl.n	800858c <__swrite+0x1e>
 8008580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008584:	2302      	movs	r3, #2
 8008586:	2200      	movs	r2, #0
 8008588:	f000 f9f8 	bl	800897c <_lseek_r>
 800858c:	89a3      	ldrh	r3, [r4, #12]
 800858e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008592:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008596:	81a3      	strh	r3, [r4, #12]
 8008598:	4632      	mov	r2, r6
 800859a:	463b      	mov	r3, r7
 800859c:	4628      	mov	r0, r5
 800859e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085a2:	f000 b869 	b.w	8008678 <_write_r>

080085a6 <__sseek>:
 80085a6:	b510      	push	{r4, lr}
 80085a8:	460c      	mov	r4, r1
 80085aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ae:	f000 f9e5 	bl	800897c <_lseek_r>
 80085b2:	1c43      	adds	r3, r0, #1
 80085b4:	89a3      	ldrh	r3, [r4, #12]
 80085b6:	bf15      	itete	ne
 80085b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80085ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085c2:	81a3      	strheq	r3, [r4, #12]
 80085c4:	bf18      	it	ne
 80085c6:	81a3      	strhne	r3, [r4, #12]
 80085c8:	bd10      	pop	{r4, pc}

080085ca <__sclose>:
 80085ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ce:	f000 b8f1 	b.w	80087b4 <_close_r>
	...

080085d4 <__swbuf_r>:
 80085d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d6:	460e      	mov	r6, r1
 80085d8:	4614      	mov	r4, r2
 80085da:	4605      	mov	r5, r0
 80085dc:	b118      	cbz	r0, 80085e6 <__swbuf_r+0x12>
 80085de:	6983      	ldr	r3, [r0, #24]
 80085e0:	b90b      	cbnz	r3, 80085e6 <__swbuf_r+0x12>
 80085e2:	f7fe fff9 	bl	80075d8 <__sinit>
 80085e6:	4b21      	ldr	r3, [pc, #132]	; (800866c <__swbuf_r+0x98>)
 80085e8:	429c      	cmp	r4, r3
 80085ea:	d12b      	bne.n	8008644 <__swbuf_r+0x70>
 80085ec:	686c      	ldr	r4, [r5, #4]
 80085ee:	69a3      	ldr	r3, [r4, #24]
 80085f0:	60a3      	str	r3, [r4, #8]
 80085f2:	89a3      	ldrh	r3, [r4, #12]
 80085f4:	071a      	lsls	r2, r3, #28
 80085f6:	d52f      	bpl.n	8008658 <__swbuf_r+0x84>
 80085f8:	6923      	ldr	r3, [r4, #16]
 80085fa:	b36b      	cbz	r3, 8008658 <__swbuf_r+0x84>
 80085fc:	6923      	ldr	r3, [r4, #16]
 80085fe:	6820      	ldr	r0, [r4, #0]
 8008600:	1ac0      	subs	r0, r0, r3
 8008602:	6963      	ldr	r3, [r4, #20]
 8008604:	b2f6      	uxtb	r6, r6
 8008606:	4283      	cmp	r3, r0
 8008608:	4637      	mov	r7, r6
 800860a:	dc04      	bgt.n	8008616 <__swbuf_r+0x42>
 800860c:	4621      	mov	r1, r4
 800860e:	4628      	mov	r0, r5
 8008610:	f000 f966 	bl	80088e0 <_fflush_r>
 8008614:	bb30      	cbnz	r0, 8008664 <__swbuf_r+0x90>
 8008616:	68a3      	ldr	r3, [r4, #8]
 8008618:	3b01      	subs	r3, #1
 800861a:	60a3      	str	r3, [r4, #8]
 800861c:	6823      	ldr	r3, [r4, #0]
 800861e:	1c5a      	adds	r2, r3, #1
 8008620:	6022      	str	r2, [r4, #0]
 8008622:	701e      	strb	r6, [r3, #0]
 8008624:	6963      	ldr	r3, [r4, #20]
 8008626:	3001      	adds	r0, #1
 8008628:	4283      	cmp	r3, r0
 800862a:	d004      	beq.n	8008636 <__swbuf_r+0x62>
 800862c:	89a3      	ldrh	r3, [r4, #12]
 800862e:	07db      	lsls	r3, r3, #31
 8008630:	d506      	bpl.n	8008640 <__swbuf_r+0x6c>
 8008632:	2e0a      	cmp	r6, #10
 8008634:	d104      	bne.n	8008640 <__swbuf_r+0x6c>
 8008636:	4621      	mov	r1, r4
 8008638:	4628      	mov	r0, r5
 800863a:	f000 f951 	bl	80088e0 <_fflush_r>
 800863e:	b988      	cbnz	r0, 8008664 <__swbuf_r+0x90>
 8008640:	4638      	mov	r0, r7
 8008642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008644:	4b0a      	ldr	r3, [pc, #40]	; (8008670 <__swbuf_r+0x9c>)
 8008646:	429c      	cmp	r4, r3
 8008648:	d101      	bne.n	800864e <__swbuf_r+0x7a>
 800864a:	68ac      	ldr	r4, [r5, #8]
 800864c:	e7cf      	b.n	80085ee <__swbuf_r+0x1a>
 800864e:	4b09      	ldr	r3, [pc, #36]	; (8008674 <__swbuf_r+0xa0>)
 8008650:	429c      	cmp	r4, r3
 8008652:	bf08      	it	eq
 8008654:	68ec      	ldreq	r4, [r5, #12]
 8008656:	e7ca      	b.n	80085ee <__swbuf_r+0x1a>
 8008658:	4621      	mov	r1, r4
 800865a:	4628      	mov	r0, r5
 800865c:	f000 f81e 	bl	800869c <__swsetup_r>
 8008660:	2800      	cmp	r0, #0
 8008662:	d0cb      	beq.n	80085fc <__swbuf_r+0x28>
 8008664:	f04f 37ff 	mov.w	r7, #4294967295
 8008668:	e7ea      	b.n	8008640 <__swbuf_r+0x6c>
 800866a:	bf00      	nop
 800866c:	08009b18 	.word	0x08009b18
 8008670:	08009b38 	.word	0x08009b38
 8008674:	08009af8 	.word	0x08009af8

08008678 <_write_r>:
 8008678:	b538      	push	{r3, r4, r5, lr}
 800867a:	4d07      	ldr	r5, [pc, #28]	; (8008698 <_write_r+0x20>)
 800867c:	4604      	mov	r4, r0
 800867e:	4608      	mov	r0, r1
 8008680:	4611      	mov	r1, r2
 8008682:	2200      	movs	r2, #0
 8008684:	602a      	str	r2, [r5, #0]
 8008686:	461a      	mov	r2, r3
 8008688:	f7f9 fa5f 	bl	8001b4a <_write>
 800868c:	1c43      	adds	r3, r0, #1
 800868e:	d102      	bne.n	8008696 <_write_r+0x1e>
 8008690:	682b      	ldr	r3, [r5, #0]
 8008692:	b103      	cbz	r3, 8008696 <_write_r+0x1e>
 8008694:	6023      	str	r3, [r4, #0]
 8008696:	bd38      	pop	{r3, r4, r5, pc}
 8008698:	200007a4 	.word	0x200007a4

0800869c <__swsetup_r>:
 800869c:	4b32      	ldr	r3, [pc, #200]	; (8008768 <__swsetup_r+0xcc>)
 800869e:	b570      	push	{r4, r5, r6, lr}
 80086a0:	681d      	ldr	r5, [r3, #0]
 80086a2:	4606      	mov	r6, r0
 80086a4:	460c      	mov	r4, r1
 80086a6:	b125      	cbz	r5, 80086b2 <__swsetup_r+0x16>
 80086a8:	69ab      	ldr	r3, [r5, #24]
 80086aa:	b913      	cbnz	r3, 80086b2 <__swsetup_r+0x16>
 80086ac:	4628      	mov	r0, r5
 80086ae:	f7fe ff93 	bl	80075d8 <__sinit>
 80086b2:	4b2e      	ldr	r3, [pc, #184]	; (800876c <__swsetup_r+0xd0>)
 80086b4:	429c      	cmp	r4, r3
 80086b6:	d10f      	bne.n	80086d8 <__swsetup_r+0x3c>
 80086b8:	686c      	ldr	r4, [r5, #4]
 80086ba:	89a3      	ldrh	r3, [r4, #12]
 80086bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086c0:	0719      	lsls	r1, r3, #28
 80086c2:	d42c      	bmi.n	800871e <__swsetup_r+0x82>
 80086c4:	06dd      	lsls	r5, r3, #27
 80086c6:	d411      	bmi.n	80086ec <__swsetup_r+0x50>
 80086c8:	2309      	movs	r3, #9
 80086ca:	6033      	str	r3, [r6, #0]
 80086cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80086d0:	81a3      	strh	r3, [r4, #12]
 80086d2:	f04f 30ff 	mov.w	r0, #4294967295
 80086d6:	e03e      	b.n	8008756 <__swsetup_r+0xba>
 80086d8:	4b25      	ldr	r3, [pc, #148]	; (8008770 <__swsetup_r+0xd4>)
 80086da:	429c      	cmp	r4, r3
 80086dc:	d101      	bne.n	80086e2 <__swsetup_r+0x46>
 80086de:	68ac      	ldr	r4, [r5, #8]
 80086e0:	e7eb      	b.n	80086ba <__swsetup_r+0x1e>
 80086e2:	4b24      	ldr	r3, [pc, #144]	; (8008774 <__swsetup_r+0xd8>)
 80086e4:	429c      	cmp	r4, r3
 80086e6:	bf08      	it	eq
 80086e8:	68ec      	ldreq	r4, [r5, #12]
 80086ea:	e7e6      	b.n	80086ba <__swsetup_r+0x1e>
 80086ec:	0758      	lsls	r0, r3, #29
 80086ee:	d512      	bpl.n	8008716 <__swsetup_r+0x7a>
 80086f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086f2:	b141      	cbz	r1, 8008706 <__swsetup_r+0x6a>
 80086f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086f8:	4299      	cmp	r1, r3
 80086fa:	d002      	beq.n	8008702 <__swsetup_r+0x66>
 80086fc:	4630      	mov	r0, r6
 80086fe:	f7ff fbb5 	bl	8007e6c <_free_r>
 8008702:	2300      	movs	r3, #0
 8008704:	6363      	str	r3, [r4, #52]	; 0x34
 8008706:	89a3      	ldrh	r3, [r4, #12]
 8008708:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800870c:	81a3      	strh	r3, [r4, #12]
 800870e:	2300      	movs	r3, #0
 8008710:	6063      	str	r3, [r4, #4]
 8008712:	6923      	ldr	r3, [r4, #16]
 8008714:	6023      	str	r3, [r4, #0]
 8008716:	89a3      	ldrh	r3, [r4, #12]
 8008718:	f043 0308 	orr.w	r3, r3, #8
 800871c:	81a3      	strh	r3, [r4, #12]
 800871e:	6923      	ldr	r3, [r4, #16]
 8008720:	b94b      	cbnz	r3, 8008736 <__swsetup_r+0x9a>
 8008722:	89a3      	ldrh	r3, [r4, #12]
 8008724:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800872c:	d003      	beq.n	8008736 <__swsetup_r+0x9a>
 800872e:	4621      	mov	r1, r4
 8008730:	4630      	mov	r0, r6
 8008732:	f000 f959 	bl	80089e8 <__smakebuf_r>
 8008736:	89a0      	ldrh	r0, [r4, #12]
 8008738:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800873c:	f010 0301 	ands.w	r3, r0, #1
 8008740:	d00a      	beq.n	8008758 <__swsetup_r+0xbc>
 8008742:	2300      	movs	r3, #0
 8008744:	60a3      	str	r3, [r4, #8]
 8008746:	6963      	ldr	r3, [r4, #20]
 8008748:	425b      	negs	r3, r3
 800874a:	61a3      	str	r3, [r4, #24]
 800874c:	6923      	ldr	r3, [r4, #16]
 800874e:	b943      	cbnz	r3, 8008762 <__swsetup_r+0xc6>
 8008750:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008754:	d1ba      	bne.n	80086cc <__swsetup_r+0x30>
 8008756:	bd70      	pop	{r4, r5, r6, pc}
 8008758:	0781      	lsls	r1, r0, #30
 800875a:	bf58      	it	pl
 800875c:	6963      	ldrpl	r3, [r4, #20]
 800875e:	60a3      	str	r3, [r4, #8]
 8008760:	e7f4      	b.n	800874c <__swsetup_r+0xb0>
 8008762:	2000      	movs	r0, #0
 8008764:	e7f7      	b.n	8008756 <__swsetup_r+0xba>
 8008766:	bf00      	nop
 8008768:	20000014 	.word	0x20000014
 800876c:	08009b18 	.word	0x08009b18
 8008770:	08009b38 	.word	0x08009b38
 8008774:	08009af8 	.word	0x08009af8

08008778 <__assert_func>:
 8008778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800877a:	4614      	mov	r4, r2
 800877c:	461a      	mov	r2, r3
 800877e:	4b09      	ldr	r3, [pc, #36]	; (80087a4 <__assert_func+0x2c>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4605      	mov	r5, r0
 8008784:	68d8      	ldr	r0, [r3, #12]
 8008786:	b14c      	cbz	r4, 800879c <__assert_func+0x24>
 8008788:	4b07      	ldr	r3, [pc, #28]	; (80087a8 <__assert_func+0x30>)
 800878a:	9100      	str	r1, [sp, #0]
 800878c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008790:	4906      	ldr	r1, [pc, #24]	; (80087ac <__assert_func+0x34>)
 8008792:	462b      	mov	r3, r5
 8008794:	f000 f8e0 	bl	8008958 <fiprintf>
 8008798:	f000 f9e3 	bl	8008b62 <abort>
 800879c:	4b04      	ldr	r3, [pc, #16]	; (80087b0 <__assert_func+0x38>)
 800879e:	461c      	mov	r4, r3
 80087a0:	e7f3      	b.n	800878a <__assert_func+0x12>
 80087a2:	bf00      	nop
 80087a4:	20000014 	.word	0x20000014
 80087a8:	08009cc5 	.word	0x08009cc5
 80087ac:	08009cd2 	.word	0x08009cd2
 80087b0:	08009d00 	.word	0x08009d00

080087b4 <_close_r>:
 80087b4:	b538      	push	{r3, r4, r5, lr}
 80087b6:	4d06      	ldr	r5, [pc, #24]	; (80087d0 <_close_r+0x1c>)
 80087b8:	2300      	movs	r3, #0
 80087ba:	4604      	mov	r4, r0
 80087bc:	4608      	mov	r0, r1
 80087be:	602b      	str	r3, [r5, #0]
 80087c0:	f7f9 f9df 	bl	8001b82 <_close>
 80087c4:	1c43      	adds	r3, r0, #1
 80087c6:	d102      	bne.n	80087ce <_close_r+0x1a>
 80087c8:	682b      	ldr	r3, [r5, #0]
 80087ca:	b103      	cbz	r3, 80087ce <_close_r+0x1a>
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	bd38      	pop	{r3, r4, r5, pc}
 80087d0:	200007a4 	.word	0x200007a4

080087d4 <__sflush_r>:
 80087d4:	898a      	ldrh	r2, [r1, #12]
 80087d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087da:	4605      	mov	r5, r0
 80087dc:	0710      	lsls	r0, r2, #28
 80087de:	460c      	mov	r4, r1
 80087e0:	d458      	bmi.n	8008894 <__sflush_r+0xc0>
 80087e2:	684b      	ldr	r3, [r1, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	dc05      	bgt.n	80087f4 <__sflush_r+0x20>
 80087e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	dc02      	bgt.n	80087f4 <__sflush_r+0x20>
 80087ee:	2000      	movs	r0, #0
 80087f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087f6:	2e00      	cmp	r6, #0
 80087f8:	d0f9      	beq.n	80087ee <__sflush_r+0x1a>
 80087fa:	2300      	movs	r3, #0
 80087fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008800:	682f      	ldr	r7, [r5, #0]
 8008802:	602b      	str	r3, [r5, #0]
 8008804:	d032      	beq.n	800886c <__sflush_r+0x98>
 8008806:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008808:	89a3      	ldrh	r3, [r4, #12]
 800880a:	075a      	lsls	r2, r3, #29
 800880c:	d505      	bpl.n	800881a <__sflush_r+0x46>
 800880e:	6863      	ldr	r3, [r4, #4]
 8008810:	1ac0      	subs	r0, r0, r3
 8008812:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008814:	b10b      	cbz	r3, 800881a <__sflush_r+0x46>
 8008816:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008818:	1ac0      	subs	r0, r0, r3
 800881a:	2300      	movs	r3, #0
 800881c:	4602      	mov	r2, r0
 800881e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008820:	6a21      	ldr	r1, [r4, #32]
 8008822:	4628      	mov	r0, r5
 8008824:	47b0      	blx	r6
 8008826:	1c43      	adds	r3, r0, #1
 8008828:	89a3      	ldrh	r3, [r4, #12]
 800882a:	d106      	bne.n	800883a <__sflush_r+0x66>
 800882c:	6829      	ldr	r1, [r5, #0]
 800882e:	291d      	cmp	r1, #29
 8008830:	d82c      	bhi.n	800888c <__sflush_r+0xb8>
 8008832:	4a2a      	ldr	r2, [pc, #168]	; (80088dc <__sflush_r+0x108>)
 8008834:	40ca      	lsrs	r2, r1
 8008836:	07d6      	lsls	r6, r2, #31
 8008838:	d528      	bpl.n	800888c <__sflush_r+0xb8>
 800883a:	2200      	movs	r2, #0
 800883c:	6062      	str	r2, [r4, #4]
 800883e:	04d9      	lsls	r1, r3, #19
 8008840:	6922      	ldr	r2, [r4, #16]
 8008842:	6022      	str	r2, [r4, #0]
 8008844:	d504      	bpl.n	8008850 <__sflush_r+0x7c>
 8008846:	1c42      	adds	r2, r0, #1
 8008848:	d101      	bne.n	800884e <__sflush_r+0x7a>
 800884a:	682b      	ldr	r3, [r5, #0]
 800884c:	b903      	cbnz	r3, 8008850 <__sflush_r+0x7c>
 800884e:	6560      	str	r0, [r4, #84]	; 0x54
 8008850:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008852:	602f      	str	r7, [r5, #0]
 8008854:	2900      	cmp	r1, #0
 8008856:	d0ca      	beq.n	80087ee <__sflush_r+0x1a>
 8008858:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800885c:	4299      	cmp	r1, r3
 800885e:	d002      	beq.n	8008866 <__sflush_r+0x92>
 8008860:	4628      	mov	r0, r5
 8008862:	f7ff fb03 	bl	8007e6c <_free_r>
 8008866:	2000      	movs	r0, #0
 8008868:	6360      	str	r0, [r4, #52]	; 0x34
 800886a:	e7c1      	b.n	80087f0 <__sflush_r+0x1c>
 800886c:	6a21      	ldr	r1, [r4, #32]
 800886e:	2301      	movs	r3, #1
 8008870:	4628      	mov	r0, r5
 8008872:	47b0      	blx	r6
 8008874:	1c41      	adds	r1, r0, #1
 8008876:	d1c7      	bne.n	8008808 <__sflush_r+0x34>
 8008878:	682b      	ldr	r3, [r5, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d0c4      	beq.n	8008808 <__sflush_r+0x34>
 800887e:	2b1d      	cmp	r3, #29
 8008880:	d001      	beq.n	8008886 <__sflush_r+0xb2>
 8008882:	2b16      	cmp	r3, #22
 8008884:	d101      	bne.n	800888a <__sflush_r+0xb6>
 8008886:	602f      	str	r7, [r5, #0]
 8008888:	e7b1      	b.n	80087ee <__sflush_r+0x1a>
 800888a:	89a3      	ldrh	r3, [r4, #12]
 800888c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008890:	81a3      	strh	r3, [r4, #12]
 8008892:	e7ad      	b.n	80087f0 <__sflush_r+0x1c>
 8008894:	690f      	ldr	r7, [r1, #16]
 8008896:	2f00      	cmp	r7, #0
 8008898:	d0a9      	beq.n	80087ee <__sflush_r+0x1a>
 800889a:	0793      	lsls	r3, r2, #30
 800889c:	680e      	ldr	r6, [r1, #0]
 800889e:	bf08      	it	eq
 80088a0:	694b      	ldreq	r3, [r1, #20]
 80088a2:	600f      	str	r7, [r1, #0]
 80088a4:	bf18      	it	ne
 80088a6:	2300      	movne	r3, #0
 80088a8:	eba6 0807 	sub.w	r8, r6, r7
 80088ac:	608b      	str	r3, [r1, #8]
 80088ae:	f1b8 0f00 	cmp.w	r8, #0
 80088b2:	dd9c      	ble.n	80087ee <__sflush_r+0x1a>
 80088b4:	6a21      	ldr	r1, [r4, #32]
 80088b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088b8:	4643      	mov	r3, r8
 80088ba:	463a      	mov	r2, r7
 80088bc:	4628      	mov	r0, r5
 80088be:	47b0      	blx	r6
 80088c0:	2800      	cmp	r0, #0
 80088c2:	dc06      	bgt.n	80088d2 <__sflush_r+0xfe>
 80088c4:	89a3      	ldrh	r3, [r4, #12]
 80088c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088ca:	81a3      	strh	r3, [r4, #12]
 80088cc:	f04f 30ff 	mov.w	r0, #4294967295
 80088d0:	e78e      	b.n	80087f0 <__sflush_r+0x1c>
 80088d2:	4407      	add	r7, r0
 80088d4:	eba8 0800 	sub.w	r8, r8, r0
 80088d8:	e7e9      	b.n	80088ae <__sflush_r+0xda>
 80088da:	bf00      	nop
 80088dc:	20400001 	.word	0x20400001

080088e0 <_fflush_r>:
 80088e0:	b538      	push	{r3, r4, r5, lr}
 80088e2:	690b      	ldr	r3, [r1, #16]
 80088e4:	4605      	mov	r5, r0
 80088e6:	460c      	mov	r4, r1
 80088e8:	b913      	cbnz	r3, 80088f0 <_fflush_r+0x10>
 80088ea:	2500      	movs	r5, #0
 80088ec:	4628      	mov	r0, r5
 80088ee:	bd38      	pop	{r3, r4, r5, pc}
 80088f0:	b118      	cbz	r0, 80088fa <_fflush_r+0x1a>
 80088f2:	6983      	ldr	r3, [r0, #24]
 80088f4:	b90b      	cbnz	r3, 80088fa <_fflush_r+0x1a>
 80088f6:	f7fe fe6f 	bl	80075d8 <__sinit>
 80088fa:	4b14      	ldr	r3, [pc, #80]	; (800894c <_fflush_r+0x6c>)
 80088fc:	429c      	cmp	r4, r3
 80088fe:	d11b      	bne.n	8008938 <_fflush_r+0x58>
 8008900:	686c      	ldr	r4, [r5, #4]
 8008902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d0ef      	beq.n	80088ea <_fflush_r+0xa>
 800890a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800890c:	07d0      	lsls	r0, r2, #31
 800890e:	d404      	bmi.n	800891a <_fflush_r+0x3a>
 8008910:	0599      	lsls	r1, r3, #22
 8008912:	d402      	bmi.n	800891a <_fflush_r+0x3a>
 8008914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008916:	f7fe ff02 	bl	800771e <__retarget_lock_acquire_recursive>
 800891a:	4628      	mov	r0, r5
 800891c:	4621      	mov	r1, r4
 800891e:	f7ff ff59 	bl	80087d4 <__sflush_r>
 8008922:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008924:	07da      	lsls	r2, r3, #31
 8008926:	4605      	mov	r5, r0
 8008928:	d4e0      	bmi.n	80088ec <_fflush_r+0xc>
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	059b      	lsls	r3, r3, #22
 800892e:	d4dd      	bmi.n	80088ec <_fflush_r+0xc>
 8008930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008932:	f7fe fef5 	bl	8007720 <__retarget_lock_release_recursive>
 8008936:	e7d9      	b.n	80088ec <_fflush_r+0xc>
 8008938:	4b05      	ldr	r3, [pc, #20]	; (8008950 <_fflush_r+0x70>)
 800893a:	429c      	cmp	r4, r3
 800893c:	d101      	bne.n	8008942 <_fflush_r+0x62>
 800893e:	68ac      	ldr	r4, [r5, #8]
 8008940:	e7df      	b.n	8008902 <_fflush_r+0x22>
 8008942:	4b04      	ldr	r3, [pc, #16]	; (8008954 <_fflush_r+0x74>)
 8008944:	429c      	cmp	r4, r3
 8008946:	bf08      	it	eq
 8008948:	68ec      	ldreq	r4, [r5, #12]
 800894a:	e7da      	b.n	8008902 <_fflush_r+0x22>
 800894c:	08009b18 	.word	0x08009b18
 8008950:	08009b38 	.word	0x08009b38
 8008954:	08009af8 	.word	0x08009af8

08008958 <fiprintf>:
 8008958:	b40e      	push	{r1, r2, r3}
 800895a:	b503      	push	{r0, r1, lr}
 800895c:	4601      	mov	r1, r0
 800895e:	ab03      	add	r3, sp, #12
 8008960:	4805      	ldr	r0, [pc, #20]	; (8008978 <fiprintf+0x20>)
 8008962:	f853 2b04 	ldr.w	r2, [r3], #4
 8008966:	6800      	ldr	r0, [r0, #0]
 8008968:	9301      	str	r3, [sp, #4]
 800896a:	f7ff fcaf 	bl	80082cc <_vfiprintf_r>
 800896e:	b002      	add	sp, #8
 8008970:	f85d eb04 	ldr.w	lr, [sp], #4
 8008974:	b003      	add	sp, #12
 8008976:	4770      	bx	lr
 8008978:	20000014 	.word	0x20000014

0800897c <_lseek_r>:
 800897c:	b538      	push	{r3, r4, r5, lr}
 800897e:	4d07      	ldr	r5, [pc, #28]	; (800899c <_lseek_r+0x20>)
 8008980:	4604      	mov	r4, r0
 8008982:	4608      	mov	r0, r1
 8008984:	4611      	mov	r1, r2
 8008986:	2200      	movs	r2, #0
 8008988:	602a      	str	r2, [r5, #0]
 800898a:	461a      	mov	r2, r3
 800898c:	f7f9 f920 	bl	8001bd0 <_lseek>
 8008990:	1c43      	adds	r3, r0, #1
 8008992:	d102      	bne.n	800899a <_lseek_r+0x1e>
 8008994:	682b      	ldr	r3, [r5, #0]
 8008996:	b103      	cbz	r3, 800899a <_lseek_r+0x1e>
 8008998:	6023      	str	r3, [r4, #0]
 800899a:	bd38      	pop	{r3, r4, r5, pc}
 800899c:	200007a4 	.word	0x200007a4

080089a0 <__swhatbuf_r>:
 80089a0:	b570      	push	{r4, r5, r6, lr}
 80089a2:	460e      	mov	r6, r1
 80089a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a8:	2900      	cmp	r1, #0
 80089aa:	b096      	sub	sp, #88	; 0x58
 80089ac:	4614      	mov	r4, r2
 80089ae:	461d      	mov	r5, r3
 80089b0:	da07      	bge.n	80089c2 <__swhatbuf_r+0x22>
 80089b2:	2300      	movs	r3, #0
 80089b4:	602b      	str	r3, [r5, #0]
 80089b6:	89b3      	ldrh	r3, [r6, #12]
 80089b8:	061a      	lsls	r2, r3, #24
 80089ba:	d410      	bmi.n	80089de <__swhatbuf_r+0x3e>
 80089bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089c0:	e00e      	b.n	80089e0 <__swhatbuf_r+0x40>
 80089c2:	466a      	mov	r2, sp
 80089c4:	f000 f8d4 	bl	8008b70 <_fstat_r>
 80089c8:	2800      	cmp	r0, #0
 80089ca:	dbf2      	blt.n	80089b2 <__swhatbuf_r+0x12>
 80089cc:	9a01      	ldr	r2, [sp, #4]
 80089ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80089d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80089d6:	425a      	negs	r2, r3
 80089d8:	415a      	adcs	r2, r3
 80089da:	602a      	str	r2, [r5, #0]
 80089dc:	e7ee      	b.n	80089bc <__swhatbuf_r+0x1c>
 80089de:	2340      	movs	r3, #64	; 0x40
 80089e0:	2000      	movs	r0, #0
 80089e2:	6023      	str	r3, [r4, #0]
 80089e4:	b016      	add	sp, #88	; 0x58
 80089e6:	bd70      	pop	{r4, r5, r6, pc}

080089e8 <__smakebuf_r>:
 80089e8:	898b      	ldrh	r3, [r1, #12]
 80089ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089ec:	079d      	lsls	r5, r3, #30
 80089ee:	4606      	mov	r6, r0
 80089f0:	460c      	mov	r4, r1
 80089f2:	d507      	bpl.n	8008a04 <__smakebuf_r+0x1c>
 80089f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089f8:	6023      	str	r3, [r4, #0]
 80089fa:	6123      	str	r3, [r4, #16]
 80089fc:	2301      	movs	r3, #1
 80089fe:	6163      	str	r3, [r4, #20]
 8008a00:	b002      	add	sp, #8
 8008a02:	bd70      	pop	{r4, r5, r6, pc}
 8008a04:	ab01      	add	r3, sp, #4
 8008a06:	466a      	mov	r2, sp
 8008a08:	f7ff ffca 	bl	80089a0 <__swhatbuf_r>
 8008a0c:	9900      	ldr	r1, [sp, #0]
 8008a0e:	4605      	mov	r5, r0
 8008a10:	4630      	mov	r0, r6
 8008a12:	f7ff fa7b 	bl	8007f0c <_malloc_r>
 8008a16:	b948      	cbnz	r0, 8008a2c <__smakebuf_r+0x44>
 8008a18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a1c:	059a      	lsls	r2, r3, #22
 8008a1e:	d4ef      	bmi.n	8008a00 <__smakebuf_r+0x18>
 8008a20:	f023 0303 	bic.w	r3, r3, #3
 8008a24:	f043 0302 	orr.w	r3, r3, #2
 8008a28:	81a3      	strh	r3, [r4, #12]
 8008a2a:	e7e3      	b.n	80089f4 <__smakebuf_r+0xc>
 8008a2c:	4b0d      	ldr	r3, [pc, #52]	; (8008a64 <__smakebuf_r+0x7c>)
 8008a2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a30:	89a3      	ldrh	r3, [r4, #12]
 8008a32:	6020      	str	r0, [r4, #0]
 8008a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a38:	81a3      	strh	r3, [r4, #12]
 8008a3a:	9b00      	ldr	r3, [sp, #0]
 8008a3c:	6163      	str	r3, [r4, #20]
 8008a3e:	9b01      	ldr	r3, [sp, #4]
 8008a40:	6120      	str	r0, [r4, #16]
 8008a42:	b15b      	cbz	r3, 8008a5c <__smakebuf_r+0x74>
 8008a44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a48:	4630      	mov	r0, r6
 8008a4a:	f000 f8a3 	bl	8008b94 <_isatty_r>
 8008a4e:	b128      	cbz	r0, 8008a5c <__smakebuf_r+0x74>
 8008a50:	89a3      	ldrh	r3, [r4, #12]
 8008a52:	f023 0303 	bic.w	r3, r3, #3
 8008a56:	f043 0301 	orr.w	r3, r3, #1
 8008a5a:	81a3      	strh	r3, [r4, #12]
 8008a5c:	89a0      	ldrh	r0, [r4, #12]
 8008a5e:	4305      	orrs	r5, r0
 8008a60:	81a5      	strh	r5, [r4, #12]
 8008a62:	e7cd      	b.n	8008a00 <__smakebuf_r+0x18>
 8008a64:	08007571 	.word	0x08007571

08008a68 <__ascii_mbtowc>:
 8008a68:	b082      	sub	sp, #8
 8008a6a:	b901      	cbnz	r1, 8008a6e <__ascii_mbtowc+0x6>
 8008a6c:	a901      	add	r1, sp, #4
 8008a6e:	b142      	cbz	r2, 8008a82 <__ascii_mbtowc+0x1a>
 8008a70:	b14b      	cbz	r3, 8008a86 <__ascii_mbtowc+0x1e>
 8008a72:	7813      	ldrb	r3, [r2, #0]
 8008a74:	600b      	str	r3, [r1, #0]
 8008a76:	7812      	ldrb	r2, [r2, #0]
 8008a78:	1e10      	subs	r0, r2, #0
 8008a7a:	bf18      	it	ne
 8008a7c:	2001      	movne	r0, #1
 8008a7e:	b002      	add	sp, #8
 8008a80:	4770      	bx	lr
 8008a82:	4610      	mov	r0, r2
 8008a84:	e7fb      	b.n	8008a7e <__ascii_mbtowc+0x16>
 8008a86:	f06f 0001 	mvn.w	r0, #1
 8008a8a:	e7f8      	b.n	8008a7e <__ascii_mbtowc+0x16>

08008a8c <memmove>:
 8008a8c:	4288      	cmp	r0, r1
 8008a8e:	b510      	push	{r4, lr}
 8008a90:	eb01 0402 	add.w	r4, r1, r2
 8008a94:	d902      	bls.n	8008a9c <memmove+0x10>
 8008a96:	4284      	cmp	r4, r0
 8008a98:	4623      	mov	r3, r4
 8008a9a:	d807      	bhi.n	8008aac <memmove+0x20>
 8008a9c:	1e43      	subs	r3, r0, #1
 8008a9e:	42a1      	cmp	r1, r4
 8008aa0:	d008      	beq.n	8008ab4 <memmove+0x28>
 8008aa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008aa6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008aaa:	e7f8      	b.n	8008a9e <memmove+0x12>
 8008aac:	4402      	add	r2, r0
 8008aae:	4601      	mov	r1, r0
 8008ab0:	428a      	cmp	r2, r1
 8008ab2:	d100      	bne.n	8008ab6 <memmove+0x2a>
 8008ab4:	bd10      	pop	{r4, pc}
 8008ab6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008aba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008abe:	e7f7      	b.n	8008ab0 <memmove+0x24>

08008ac0 <__malloc_lock>:
 8008ac0:	4801      	ldr	r0, [pc, #4]	; (8008ac8 <__malloc_lock+0x8>)
 8008ac2:	f7fe be2c 	b.w	800771e <__retarget_lock_acquire_recursive>
 8008ac6:	bf00      	nop
 8008ac8:	2000079c 	.word	0x2000079c

08008acc <__malloc_unlock>:
 8008acc:	4801      	ldr	r0, [pc, #4]	; (8008ad4 <__malloc_unlock+0x8>)
 8008ace:	f7fe be27 	b.w	8007720 <__retarget_lock_release_recursive>
 8008ad2:	bf00      	nop
 8008ad4:	2000079c 	.word	0x2000079c

08008ad8 <_realloc_r>:
 8008ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ada:	4607      	mov	r7, r0
 8008adc:	4614      	mov	r4, r2
 8008ade:	460e      	mov	r6, r1
 8008ae0:	b921      	cbnz	r1, 8008aec <_realloc_r+0x14>
 8008ae2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008ae6:	4611      	mov	r1, r2
 8008ae8:	f7ff ba10 	b.w	8007f0c <_malloc_r>
 8008aec:	b922      	cbnz	r2, 8008af8 <_realloc_r+0x20>
 8008aee:	f7ff f9bd 	bl	8007e6c <_free_r>
 8008af2:	4625      	mov	r5, r4
 8008af4:	4628      	mov	r0, r5
 8008af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008af8:	f000 f85c 	bl	8008bb4 <_malloc_usable_size_r>
 8008afc:	42a0      	cmp	r0, r4
 8008afe:	d20f      	bcs.n	8008b20 <_realloc_r+0x48>
 8008b00:	4621      	mov	r1, r4
 8008b02:	4638      	mov	r0, r7
 8008b04:	f7ff fa02 	bl	8007f0c <_malloc_r>
 8008b08:	4605      	mov	r5, r0
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	d0f2      	beq.n	8008af4 <_realloc_r+0x1c>
 8008b0e:	4631      	mov	r1, r6
 8008b10:	4622      	mov	r2, r4
 8008b12:	f7fe fe0f 	bl	8007734 <memcpy>
 8008b16:	4631      	mov	r1, r6
 8008b18:	4638      	mov	r0, r7
 8008b1a:	f7ff f9a7 	bl	8007e6c <_free_r>
 8008b1e:	e7e9      	b.n	8008af4 <_realloc_r+0x1c>
 8008b20:	4635      	mov	r5, r6
 8008b22:	e7e7      	b.n	8008af4 <_realloc_r+0x1c>

08008b24 <_read_r>:
 8008b24:	b538      	push	{r3, r4, r5, lr}
 8008b26:	4d07      	ldr	r5, [pc, #28]	; (8008b44 <_read_r+0x20>)
 8008b28:	4604      	mov	r4, r0
 8008b2a:	4608      	mov	r0, r1
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	2200      	movs	r2, #0
 8008b30:	602a      	str	r2, [r5, #0]
 8008b32:	461a      	mov	r2, r3
 8008b34:	f7f8 ffec 	bl	8001b10 <_read>
 8008b38:	1c43      	adds	r3, r0, #1
 8008b3a:	d102      	bne.n	8008b42 <_read_r+0x1e>
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	b103      	cbz	r3, 8008b42 <_read_r+0x1e>
 8008b40:	6023      	str	r3, [r4, #0]
 8008b42:	bd38      	pop	{r3, r4, r5, pc}
 8008b44:	200007a4 	.word	0x200007a4

08008b48 <__ascii_wctomb>:
 8008b48:	b149      	cbz	r1, 8008b5e <__ascii_wctomb+0x16>
 8008b4a:	2aff      	cmp	r2, #255	; 0xff
 8008b4c:	bf85      	ittet	hi
 8008b4e:	238a      	movhi	r3, #138	; 0x8a
 8008b50:	6003      	strhi	r3, [r0, #0]
 8008b52:	700a      	strbls	r2, [r1, #0]
 8008b54:	f04f 30ff 	movhi.w	r0, #4294967295
 8008b58:	bf98      	it	ls
 8008b5a:	2001      	movls	r0, #1
 8008b5c:	4770      	bx	lr
 8008b5e:	4608      	mov	r0, r1
 8008b60:	4770      	bx	lr

08008b62 <abort>:
 8008b62:	b508      	push	{r3, lr}
 8008b64:	2006      	movs	r0, #6
 8008b66:	f000 f855 	bl	8008c14 <raise>
 8008b6a:	2001      	movs	r0, #1
 8008b6c:	f7f8 ffc6 	bl	8001afc <_exit>

08008b70 <_fstat_r>:
 8008b70:	b538      	push	{r3, r4, r5, lr}
 8008b72:	4d07      	ldr	r5, [pc, #28]	; (8008b90 <_fstat_r+0x20>)
 8008b74:	2300      	movs	r3, #0
 8008b76:	4604      	mov	r4, r0
 8008b78:	4608      	mov	r0, r1
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	602b      	str	r3, [r5, #0]
 8008b7e:	f7f9 f80c 	bl	8001b9a <_fstat>
 8008b82:	1c43      	adds	r3, r0, #1
 8008b84:	d102      	bne.n	8008b8c <_fstat_r+0x1c>
 8008b86:	682b      	ldr	r3, [r5, #0]
 8008b88:	b103      	cbz	r3, 8008b8c <_fstat_r+0x1c>
 8008b8a:	6023      	str	r3, [r4, #0]
 8008b8c:	bd38      	pop	{r3, r4, r5, pc}
 8008b8e:	bf00      	nop
 8008b90:	200007a4 	.word	0x200007a4

08008b94 <_isatty_r>:
 8008b94:	b538      	push	{r3, r4, r5, lr}
 8008b96:	4d06      	ldr	r5, [pc, #24]	; (8008bb0 <_isatty_r+0x1c>)
 8008b98:	2300      	movs	r3, #0
 8008b9a:	4604      	mov	r4, r0
 8008b9c:	4608      	mov	r0, r1
 8008b9e:	602b      	str	r3, [r5, #0]
 8008ba0:	f7f9 f80b 	bl	8001bba <_isatty>
 8008ba4:	1c43      	adds	r3, r0, #1
 8008ba6:	d102      	bne.n	8008bae <_isatty_r+0x1a>
 8008ba8:	682b      	ldr	r3, [r5, #0]
 8008baa:	b103      	cbz	r3, 8008bae <_isatty_r+0x1a>
 8008bac:	6023      	str	r3, [r4, #0]
 8008bae:	bd38      	pop	{r3, r4, r5, pc}
 8008bb0:	200007a4 	.word	0x200007a4

08008bb4 <_malloc_usable_size_r>:
 8008bb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bb8:	1f18      	subs	r0, r3, #4
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	bfbc      	itt	lt
 8008bbe:	580b      	ldrlt	r3, [r1, r0]
 8008bc0:	18c0      	addlt	r0, r0, r3
 8008bc2:	4770      	bx	lr

08008bc4 <_raise_r>:
 8008bc4:	291f      	cmp	r1, #31
 8008bc6:	b538      	push	{r3, r4, r5, lr}
 8008bc8:	4604      	mov	r4, r0
 8008bca:	460d      	mov	r5, r1
 8008bcc:	d904      	bls.n	8008bd8 <_raise_r+0x14>
 8008bce:	2316      	movs	r3, #22
 8008bd0:	6003      	str	r3, [r0, #0]
 8008bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd6:	bd38      	pop	{r3, r4, r5, pc}
 8008bd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008bda:	b112      	cbz	r2, 8008be2 <_raise_r+0x1e>
 8008bdc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008be0:	b94b      	cbnz	r3, 8008bf6 <_raise_r+0x32>
 8008be2:	4620      	mov	r0, r4
 8008be4:	f000 f830 	bl	8008c48 <_getpid_r>
 8008be8:	462a      	mov	r2, r5
 8008bea:	4601      	mov	r1, r0
 8008bec:	4620      	mov	r0, r4
 8008bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008bf2:	f000 b817 	b.w	8008c24 <_kill_r>
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d00a      	beq.n	8008c10 <_raise_r+0x4c>
 8008bfa:	1c59      	adds	r1, r3, #1
 8008bfc:	d103      	bne.n	8008c06 <_raise_r+0x42>
 8008bfe:	2316      	movs	r3, #22
 8008c00:	6003      	str	r3, [r0, #0]
 8008c02:	2001      	movs	r0, #1
 8008c04:	e7e7      	b.n	8008bd6 <_raise_r+0x12>
 8008c06:	2400      	movs	r4, #0
 8008c08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	4798      	blx	r3
 8008c10:	2000      	movs	r0, #0
 8008c12:	e7e0      	b.n	8008bd6 <_raise_r+0x12>

08008c14 <raise>:
 8008c14:	4b02      	ldr	r3, [pc, #8]	; (8008c20 <raise+0xc>)
 8008c16:	4601      	mov	r1, r0
 8008c18:	6818      	ldr	r0, [r3, #0]
 8008c1a:	f7ff bfd3 	b.w	8008bc4 <_raise_r>
 8008c1e:	bf00      	nop
 8008c20:	20000014 	.word	0x20000014

08008c24 <_kill_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	4d07      	ldr	r5, [pc, #28]	; (8008c44 <_kill_r+0x20>)
 8008c28:	2300      	movs	r3, #0
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	4608      	mov	r0, r1
 8008c2e:	4611      	mov	r1, r2
 8008c30:	602b      	str	r3, [r5, #0]
 8008c32:	f7f8 ff53 	bl	8001adc <_kill>
 8008c36:	1c43      	adds	r3, r0, #1
 8008c38:	d102      	bne.n	8008c40 <_kill_r+0x1c>
 8008c3a:	682b      	ldr	r3, [r5, #0]
 8008c3c:	b103      	cbz	r3, 8008c40 <_kill_r+0x1c>
 8008c3e:	6023      	str	r3, [r4, #0]
 8008c40:	bd38      	pop	{r3, r4, r5, pc}
 8008c42:	bf00      	nop
 8008c44:	200007a4 	.word	0x200007a4

08008c48 <_getpid_r>:
 8008c48:	f7f8 bf40 	b.w	8001acc <_getpid>

08008c4c <_init>:
 8008c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c4e:	bf00      	nop
 8008c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c52:	bc08      	pop	{r3}
 8008c54:	469e      	mov	lr, r3
 8008c56:	4770      	bx	lr

08008c58 <_fini>:
 8008c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5a:	bf00      	nop
 8008c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c5e:	bc08      	pop	{r3}
 8008c60:	469e      	mov	lr, r3
 8008c62:	4770      	bx	lr
